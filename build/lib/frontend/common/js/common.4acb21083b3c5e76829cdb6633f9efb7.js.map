{"version":3,"sources":["FrontHostApp.js","Helper.js"],"names":[],"mappingsfile":"common.4acb21083b3c5e76829cdb6633f9efb7.js","sourcesContent":["class FrontHostApp {\n    constructor(data) {\n        console.log('FrontHostApp.constructor', data);\n        if (!data) throw new Error('no data');\n        this.data = data;\n        // if (data) {\n        this.env = data.env;\n        // }\n        window.addEventListener('error'             , this.onWindowError.bind(this));\n        window.addEventListener('unhandledrejection', this.onWindowUnhandledrejection.bind(this))\n        // window.onunhandledrejection = this.onunhandledrejection.bind(this);\n        // window.onerror              = this.errorHandler.bind(this);\n        // window.onbeforeunload       = this.exit.bind(this);\n    }\n    run() {\n        throw new Error('FrontHostApp.run not implemented');\n    }\n\n    /*exit(evt) {\n        const message = 'After refreshing or closing of page, all opened pages and unsaved data will be lost.';\n        if (typeof evt === 'undefined') {\n            evt = window.event;\n        }\n        if (evt) {\n            evt.returnValue = message;\n        }\n        return message;\n    }*/\n\n    /*errorHandler(errorMsg) {\n        console.error('FrontHostApp.errorHandler:', errorMsg);\n        let message = errorMsg;\n        const stack = arguments[4] !== undefined && arguments[4].stack !== undefined ? arguments[4].stack : null;\n\n        if (this.env === 'development') {\n            message = 'FrontHostApp Error Handler:\\n' + errorMsg;\n            if (stack) {\n                console.error('stack:', stack);\n                message += '\\n\\nstack:\\n' + stack;\n            }\n        }\n        FrontHostApp.doHttpRequest({\n            action: 'error',\n            error: {message: errorMsg, stack}\n        });\n        alert(message);\n    }*/\n    onWindowUnhandledrejection(e) {\n        console.log('FrontHostApp.onWindowUnhandledrejection', e);\n        const err = e instanceof Error ? e : e.reason || e.detail.reason;\n        this.logError(err);\n        alert(err.message);\n        e.preventDefault();\n    }\n    onWindowError(e) {\n        console.log('FrontHostApp.onWindowError', e);\n        const err = e.error;\n        this.logError(err);\n        alert(err.message);\n        e.preventDefault();\n    }\n    logError(err) {\n        console.error('FrontHostApp.logError', err);\n        console.log(`post error to ${this.data.logErrorUrl}`);\n        fetch(this.data.logErrorUrl, {\n            method: 'POST',\n            body  : JSON.stringify({\n                href           : window.location.href,\n                platformVersion: this.data.platformVersion,\n                appVersion     : this.data.appVersion,\n                message        : err.message,\n                stack          : err.stack,\n            }),\n            headers: {'Content-Type': 'application/json;charset=utf-8'}\n        }).catch(err => {\n            console.error(err.message);\n        });\n    }\n    static async doHttpRequest(data) {\n        console.warn('FrontHostApp.doHttpRequest', 'POST', window.location.href, data);\n        const result = await FrontHostApp.postJson(window.location.href, data);\n        console.warn(`result ${data.page}.${data.form}.${data.ds || data.name}.${data.action}:`, result);\n        return result;\n    }\n\n    static async postJson(url, data) {\n        return await FrontHostApp.post(url, JSON.stringify(data), 'application/json;charset=utf-8');\n    }\n\n    static async post(url, body, contentType) {\n        try {\n            FrontHostApp.startWait();\n            const res = await fetch(url, {\n                method: 'POST',\n                body  : body,\n                ...(contentType ? {headers: {'Content-Type': contentType}} : {}),\n            });\n            if (res.ok) return await res.json();\n            throw new Error(`${res.status} ${res.statusText}: ${await res.text()}`);\n        } finally {\n            FrontHostApp.stopWait();\n        }\n    }\n\n    static startWait() {\n        document.querySelector('html').classList.add('wait');\n    }\n    static stopWait() {\n        document.querySelector('html').classList.remove('wait');\n    }\n}\n","class Helper {\n    /*static currentDate() {\n        const now = new Date();\n        let dd = now.getDate();if (dd < 10) dd = '0' + dd;\n        let mm = now.getMonth()+1;if (mm < 10) mm = '0' + mm;   /!*January is 0!*!/\n        const yyyy = now.getFullYear();\n        return [yyyy, mm, dd].join('-');\n    }*/\n\n    /*static currentDateTime() {\n        return Helper.currentDate() + ' ' + Helper.currentTime();\n    }*/\n\n    /*static currentTime() {\n        const now = new Date();\n        let hh = now.getHours();if (hh < 10) hh = '0' + hh;\n        let mm = now.getMinutes();if (mm < 10) mm = '0' + mm;\n        let ss = now.getSeconds();if (ss < 10) ss = '0' + ss;\n        return [hh, mm, ss].join(':');\n    }*/\n\n    static formatDate(date, format) {\n        const YYYY = date.getFullYear();\n        const M    = date.getMonth() + 1;\n        const D    = date.getDate();\n        const h    = date.getHours();\n        const m    = date.getMinutes();\n        const s    = date.getSeconds();\n        const MM = M < 10 ? `0${M}` : M;\n        const DD = D < 10 ? `0${D}` : D;\n        const hh = h < 10 ? `0${h}` : h;\n        const mm = m < 10 ? `0${m}` : m;\n        const ss = s < 10 ? `0${s}` : s;\n        const values = {YYYY, M, D, h, m, s, MM, DD, hh, mm, ss};\n        return format.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => values[name] ? values[name] : text);\n    }\n\n    static formatNumber(value) {\n        return new Intl.NumberFormat('ru-RU').format(value);\n    }\n\n    static today() {\n        const now = new Date();\n        // return new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        return Helper.getStartOfDay(now);\n    }\n\n    static getStartOfDay(date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    static encodeObject(obj) {\n        const eObj = {};\n        for (const name in obj) {\n            eObj[name] = Helper.encodeValue(obj[name]);\n        }\n        return eObj;\n    }\n\n    static encodeValue(value) {\n        return JSON.stringify(value);\n    }\n\n    static decodeObject(eObj) {\n        if (!eObj) throw new Error('Helper.decodeObject: no object');\n        const obj = {};\n        for (const name in eObj) {\n            obj[name] = Helper.decodeValue(eObj[name]);\n        }\n        return obj;\n    }\n\n    static decodeValue(rawValue) {\n        return JSON.parse(rawValue, Helper.dateTimeReviver);\n    }\n\n    static dateTimeReviver(key, value) {\n        if (typeof value === 'string') {\n            const a =\n                // /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|(\\+|-)([\\d|:]*))?$/\n                /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*)?)(Z|([+\\-])(\\d{2}):(\\d{2}))$/\n                .exec(value);\n            if (a) return new Date(value);\n        }\n        return value;\n    }\n    static createReactComponent(root, type, props = {}, children) {\n        // console.log('Helper.createReactComponent', root, type);\n        let component;\n        props.onCreate = c => component = c;\n        const reactElement = React.createElement(type, props, children);\n        ReactDOM.render(reactElement, root);\n        return component;\n    }\n    static destroyReactComponent(root) {\n        ReactDOM.unmountComponentAtNode(root);\n    }\n\n    static readFileAsDataURL(file) {\n        return new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.readAsDataURL(file);\n        });\n    }\n\n    /*static readFileAsArrayBuffer(file) {\n        return new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.readAsArrayBuffer(file);\n        });\n    }*/\n\n    /*static convertBufferToBase64string(buffer) {\n        const array = new Uint8Array(buffer);\n        const binaryString = String.fromCharCode.apply(null, array);\n        return window.btoa(binaryString);\n    }*/\n    /*static createObjectUrl(buffer) {\n        const blob = new Blob([new Uint8Array(buffer)]);\n        return window.URL.createObjectURL(blob);\n    }*/\n\n    // append file as filed and all not file as json string\n    /*static createFormData(body) {\n        const formData = new FormData();\n        const fields = {};\n        for (const name in body) {\n            if (body[name] instanceof File) {\n                formData.append(name, body[name]);\n            } else {\n                fields[name] = body[name];\n            }\n        }\n        formData.append('__json', JSON.stringify(fields));\n        return formData;\n    }*/\n\n    /*static base64ToArrayBuffer(base64) {\n        const binaryString = window.atob(base64);\n        const len = binaryString.length;\n        const bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n            bytes[i] = binaryString.charCodeAt(i);\n        }\n        return bytes.buffer;\n    }*/\n\n    static templateToJsString(value, params) {\n        return value.replace(/\\{([\\w\\.@]+)\\}/g, (text, name) => {\n            if (params.hasOwnProperty(name)) {\n                return `Helper.decodeValue('${Helper.encodeValue(params[name])}')`;\n            }\n            return 'undefined';\n        });\n    }\n    static moveArrItem(arr, item, offset) {\n        const oldIndex = arr.indexOf(item);\n        if (oldIndex === -1) throw new Error('cannot find element');\n        const newIndex = oldIndex + offset;\n        if (newIndex < 0) throw new Error('cannot up top element');\n        if (newIndex > arr.length - 1) throw new Error('cannot down bottom element');\n        arr.splice(newIndex, 0,   arr.splice(oldIndex, 1)[0]);\n    }\n    static formatTime(_sec) {\n        // console.log('Helper.formatTime', sec);\n        let sec = _sec;\n        let sign = '';\n        if (_sec < 0) {\n            sec = -sec;\n            sign = '-';\n        }\n        let h = Math.floor(sec / 3600);\n        let m = Math.floor((sec - h * 3600) / 60);\n        let s = Math.floor(sec - h * 3600 - m * 60);\n        if (h < 10) h = '0' + h;\n        if (m < 10) m = '0' + m;\n        if (s < 10) s = '0' + s;\n        if (h === 0) {\n            return `${sign}${m}:${s}`;\n        } else {\n            return `${sign}${h}:${m}:${s}`;\n        }\n    }\n    static SECOND() {\n        return 1000;\n    }\n    static MINUTE() {\n        return 60 * Helper.SECOND();\n    }\n    static HOUR() {\n        return 60*Helper.MINUTE();\n    }\n    static DAY() {\n        return 24*Helper.HOUR();\n    }\n}\n"]}