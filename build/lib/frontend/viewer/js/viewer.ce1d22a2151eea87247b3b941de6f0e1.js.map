{"version":3,"sources":["ViewerFrontHostApp.js","Controller/Controller.js","Model/Model.js","Controller/ApplicationController/ApplicationController.js","Controller/FieldController/FieldController.js","Controller/FormController/FormController.js","Controller/PageController/PageController.js","Model/Application/Application.js","Model/Column/Column.js","Model/DataSource/DataSource.js","Model/Database/Database.js","Model/Form/Form.js","Model/Table/Table.js","Model/Page/Page.js","Model/Field/Field.js","Controller/ApplicationController/MdiApplicationController/MdiApplicationController.js","Controller/ApplicationController/SdiApplicationController/SdiApplicationController.js","Controller/FieldController/RowFormFieldController/RowFormFieldController.js","Controller/FieldController/TableFormFieldController/TableFormFieldController.js","Controller/FormController/RowFormController/RowFormController.js","Controller/FormController/TableFormController/TableFormController.js","Model/DataSource/SqlDataSource/SqlDataSource.js","Model/Form/RowForm/RowForm.js","Model/Form/TableForm/TableForm.js","Model/Field/CheckBoxField/CheckBoxField.js","Model/Field/ComboBoxField/ComboBoxField.js","Model/Field/DatePickerField/DatePickerField.js","Model/Field/DateTimeField/DateTimeField.js","Model/Field/FileField/FileField.js","Model/Field/LabelField/LabelField.js","Model/Field/LinkField/LinkField.js","Model/Field/ImageField/ImageField.js","Model/Field/TextAreaField/TextAreaField.js","Model/Field/TextBoxField/TextBoxField.js","Model/Field/TimeField/TimeField.js","Controller/FieldController/RowFormFieldController/RowFormCheckBoxFieldController/RowFormCheckBoxFieldController.js","Controller/FieldController/RowFormFieldController/RowFormComboBoxFieldController/RowFormComboBoxFieldController.js","Controller/FieldController/RowFormFieldController/RowFormDatePickerFieldController/RowFormDatePickerFieldController.js","Controller/FieldController/RowFormFieldController/RowFormDateTimeFieldController/RowFormDateTimeFieldController.js","Controller/FieldController/RowFormFieldController/RowFormFileFieldController/RowFormFileFieldController.js","Controller/FieldController/RowFormFieldController/RowFormImageFieldController/RowFormImageFieldController.js","Controller/FieldController/RowFormFieldController/RowFormTextAreaFieldController/RowFormTextAreaFieldController.js","Controller/FieldController/RowFormFieldController/RowFormLinkFieldController/RowFormLinkFieldController.js","Controller/FieldController/RowFormFieldController/RowFormTextBoxFieldController/RowFormTextBoxFieldController.js","Controller/FieldController/RowFormFieldController/RowFormTimeFieldController/RowFormTimeFieldController.js","Controller/FieldController/TableFormFieldController/TableFormCheckBoxFieldController/TableFormCheckBoxFieldController.js","Controller/FieldController/TableFormFieldController/TableFormComboBoxFieldController/TableFormComboBoxFieldController.js","Controller/FieldController/TableFormFieldController/TableFormDatePickerFieldController/TableFormDatePickerFieldController.js","Controller/FieldController/TableFormFieldController/TableFormDateTimeFieldController/TableFormDateTimeFieldController.js","Controller/FieldController/TableFormFieldController/TableFormLinkFieldController/TableFormLinkFieldController.js","Controller/FieldController/TableFormFieldController/TableFormTextAreaFieldController/TableFormTextAreaFieldController.js","Controller/FieldController/TableFormFieldController/TableFormTextBoxFieldController/TableFormTextBoxFieldController.js","Controller/FieldController/TableFormFieldController/TableFormTimeFieldController/TableFormTimeFieldController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvpNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACppjrtlpLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"viewer.ce1d22a2151eea87247b3b941de6f0e1.js","sourcesContent":["class ViewerFrontHostApp extends FrontHostApp {\n    run() {\n        console.log('ViewerFrontHostApp.run');\n\n        // application\n        const application = new Application(this.data);\n        application.init();\n\n        // applicationController\n        const applicationController = ApplicationController.create(application);\n        applicationController.init();\n\n        // view\n        const rootElementName = `.${applicationController.getViewClass().name}__root`;\n        const rootElement = document.querySelector(rootElementName);\n        if (!rootElement) {\n            throw new Error(`no root element: ${rootElementName}`);\n        }\n        applicationController.createView(rootElement);\n    }\n}\n","class Controller extends EventEmitter {\n    constructor(model, parent) {\n        super();\n        this.model    = model;\n        this.parent   = parent;\n        this.view     = null;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.model.getFullName()}: controller already deinited`);\n        this.deinited = true;\n    }\n    onViewCreate = view => {\n        // console.log('Controller.onViewCreate', this.model.getFullName());\n        this.view = view;\n    }\n    rerender() {\n        if (this.view) {\n            this.view.rerender();\n        } else {\n            console.error(`Controller.rerender no view: ${this.model.getFullName()}`);\n        }\n    }\n    getModel() {\n        return this.model;\n    }\n    getParent() {\n        return this.parent;\n    }\n}\n","class Model extends EventEmitter {\n    constructor(data, parent) {\n        if (!data.name) throw new Error(`${data.class} no name`);\n        super();\n        this.data     = data;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n\n    init() {\n    }\n\n    deinit() {\n        if (this.deinited) throw new Error(`${this.getFullName()}: model already deinited`);\n        this.deinited = true;\n    }\n\n    static getAttr(data, name) {\n        return data[name];\n    }\n    static getName(data) {\n        return Model.getAttr(data, 'name');\n    }\n    static getClassName(data) {\n        return Model.getAttr(data, 'class');\n    }\n\n    getAttr(name) {\n        return this.data[name];\n    }\n\n    getClassName() {\n        return this.getAttr('class');\n    }\n\n    getName() {\n        return this.getAttr('name');\n    }\n    getFullName() {\n        if (this.parent) {\n            return `${this.parent.getFullName()}.${this.getName()}`;\n        }\n        return this.getName();\n    }\n    getCaption() {\n        return this.getAttr('caption');\n    }\n    getDataSource(name) {\n        return this.dataSources.find(dataSource => dataSource.getName() === name);\n    }\n    createDataSources() {\n        for (const data of this.data.dataSources) {\n            try {\n                const dataSource = eval(`new ${data.class}(data, this)`);\n                dataSource.init();\n                this.dataSources.push(dataSource);\n            } catch (err) {\n                err.message = `${this.getFullName()}.${data.name}: ${err.message}`;\n                throw err;\n            }\n        }\n    }\n    deinitDataSources() {\n        for (const dataSource of this.dataSources) {\n            dataSource.deinit();\n        }\n    }\n    hasActions() {\n        return this.data.actions.length > 0;\n    }\n}\n","class ApplicationController extends Controller {\n    static create(model) {\n        // console.log('ApplicationController.create', 'debug:', ApplicationController.isInDebugMode());\n        const customClassName = `${model.getName()}ApplicationController`;\n        if (eval(`typeof ${customClassName}`) === 'function') {\n            const CustomClass = eval(customClassName);\n            // console.log('CustomClass:', CustomClass);\n            return new CustomClass(model);\n        }\n        return new SdiApplicationController(model);\n    }\n    static getSearchObj() {\n        // console.log('ApplicationController.getSearchObj:', window.location);\n        if (!window.location.search.split('?')[1]) return {};\n        return window.location.search.split('?')[1].split('&').reduce((acc, item) => {\n            const kv = item.split('=');\n            acc[kv[0]] = kv[1];\n            return acc;\n        }, {});\n    }\n    static isInDebugMode() {\n        return ApplicationController.getSearchObj()['debug'] === '1';\n    }\n    constructor(model) {\n        // console.log('ApplicationController.constructor', model, view);\n        super(model, null);\n        this.lastPageId = 0;\n        this.modalPages = [];\n        this.activePage = null;\n        this.statusbar  = null;\n    }\n    init() {\n        // console.log('ApplicationController.init');\n        super.init();\n        // this.model.on('logout' , this.onLogout);\n        this.model.on('request', this.onRequest);\n        this.activePage = this.createPage();\n    }\n    deinit() {\n        // this.model.off('logout', this.onLogout);\n        this.model.off('request', this.onRequest);\n        super.deinit();\n    }\n    getViewClass() {\n        return ApplicationView;\n    }\n    createView(root) {\n        // console.log('ApplicationController.createView');\n        this.view = Helper.createReactComponent(root, this.getViewClass(), {ctrl: this});\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(this.model.getAttr('time'));\n        }\n    }\n    onRequest = e => {\n        // console.log('onRequest', e);\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(e.time);\n        }\n    }\n    async openPage(options) {\n        console.log('ApplicationController.openPage', options);\n        const name       = options.name;\n        const key        = options.key || null;\n        const parentPage = options.parentPage;\n        const isModal    = options.modal   !== undefined ? options.modal   : true;\n        const isNewMode  = options.newMode !== undefined ? options.newMode : false;\n        const params     = options.params || {};\n\n        // if this page with this key is already opened, then show it\n        const pageController = this.findPageControllerByPageNameAndKey(name, key);\n        // console.log('pageController:', pageController);\n        if (pageController) {\n            this.onPageSelect(pageController);\n            return;\n        }\n\n        //console.log('open ' + name + ' with key: ' + key);\n\n        const {page: pageData} = await this.model.request({\n            action        : 'page',\n            page          : name,\n            newMode       : isNewMode,\n            parentPageName: parentPage ? parentPage.getName() : null,\n            params        : Helper.encodeObject({\n                ...(parentPage ? parentPage.getParams() : {}),\n                ...params,\n                ...(key ? DataSource.keyToParams(key) : {})\n            })\n        });\n\n        const pageModel = new Page(pageData, this.model, {\n            id            : `p${this.getNextPageId()}`,\n            modal         : isModal,\n            parentPage    : parentPage,\n            params        : {\n                ...params,\n                ...(key ? DataSource.keyToParams(key) : {}),\n            },\n        });\n        pageModel.init();\n        const pc = PageController.create(pageModel, this);\n        pc.init();\n        isModal ? this.modalPages.push(pc) : this.onPageCreate(pc);\n        this.rerender();\n        // console.log('pc:', pc);\n    }\n    getNextPageId() {\n        this.lastPageId++;\n        return this.lastPageId;\n    }\n    createPage() {\n        if (!this.model.data.pages[0]) return;\n        const pageData = this.model.data.pages[0];\n\n        // model\n        const page = new Page(pageData, this.model, {\n            id   : `p${this.getNextPageId()}`,\n            modal: false\n        });\n        page.init();\n\n        // controller\n        const pc = PageController.create(page, this);\n        pc.init();\n        return pc;\n    }\n    onPageCreate(pc) {\n        if (this.activePage) {\n            this.closePage(this.activePage);\n        }\n        this.activePage = pc\n        this.rerender();\n    }\n    findPageControllerByPageNameAndKey(pageName, key) {\n        if (this.activePage && this.activePage.model.getName() === pageName && this.activePage.model.getKey() === key) {\n            return this.activePage;\n        }\n        return null;\n    }\n    onPageSelect(pc) {\n        console.log('SdiApplicationController.onPageSelect', pc.model.getName());\n    }\n    closePage(pageController) {\n        console.log('SdiApplicationController.closePage', pageController.model.getFullName());\n        if (this.modalPages.indexOf(pageController) > -1) {\n            this.modalPages.splice(this.modalPages.indexOf(pageController), 1);\n        } else if (this.activePage === pageController) {\n            this.activePage = null;\n        } else  {\n            throw new Error('page not found');\n        }\n        this.rerender();\n        pageController.deinit();\n        pageController.model.deinit();\n    }\n    async onActionClick(name) {\n        console.log('ApplicationController.onActionClick', name);\n    }\n    getMenuItemsProp() {\n        // console.log('ApplicationController.getMenuItemsProp');\n        return [\n            // pages & actions\n            ...(this.model.data.menu ? Object.keys(this.model.data.menu).map(key => ({\n                name : key,\n                title: key,\n                items: this.model.data.menu[key].map(item => ({\n                    type : item.type,\n                    name : item.page || item.action,\n                    title: item.caption\n                }))\n            })) : []),\n            // user\n            ...(this.model.getUser() ? [{\n                name : 'user',\n                title: `${this.model.getDomain()}/${this.model.getUser().name}`,\n                items: [\n                    {\n                        type : 'custom',\n                        name : 'logout',\n                        title: 'Logout'\n                    }\n                ]\n            }] : [])\n        ];\n    }\n    onStatusbarCreate = statusbar => {\n        this.statusbar = statusbar;\n    }\n    onLogout = async () => {\n        console.log('ApplicationController.onLogout');\n        const result = await this.model.request({action: 'logout'});\n        location.reload();\n    }\n    onMenuItemClick = async (menu, type, name) => {\n        console.log('ApplicationController.onMenuItemClick', menu, type, name);\n        // try {\n            if (type === 'page') {\n                await this.openPage({name: name, modal: false});\n            } else if (type === 'action') {\n                const result = await this.onActionClick(name);\n                if (!result) alert(`no handler for action '${name}'`);\n            } else if (type === 'custom' && name === 'logout') {\n                await this.onLogout();\n            } else {\n                throw new Error(`unknown menu type/name: ${type}/${name}`);\n            }\n        // } catch (err) {\n        //     console.error(err);\n        //     alert(err.message);\n        // }\n    }\n}\n","class FieldController extends Controller {\n\n    static create(model, parent) {\n        // console.log('FieldController.create', model.getFullName(), parent.model.getClassName());\n        const customClassName = `${model.getPage().getName()}${model.getForm().getName()}${model.getName()}Controller`;\n        if (eval(`typeof ${customClassName}`) === 'function') {\n            const CustomClass = eval(customClassName);\n            // console.log('CustomClass:', CustomClass);\n            return new CustomClass(model, parent);\n        }\n        /*if (model.data.js) {\n            const CustomClass = eval(model.data.js);\n            if (!CustomClass) throw new Error(`custom class of \"${model.getName()}\" field does not return type`);\n            return new CustomClass(model, parent);\n        }*/\n        const className = `${parent.model.getClassName()}${model.getClassName()}Controller`;\n        // console.log('className:', className);\n        return eval(`new ${className}(model, parent);`);\n    }\n\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n\n    valueToString(value) {\n        // console.log('Field.valueToString', this.model.getFullName(), typeof value, value);\n        switch (typeof value) {\n            case 'string':\n                return value;\n            case 'object':\n                if (value === null) return '';\n                if (value instanceof Date) return value.toISOString();\n                return JSON.stringify(value, null, 4);\n            case 'number':\n            case 'boolean':\n                return value.toString();\n            case 'undefined':\n                return '';\n            default: throw new Error(`${this.model.getFullName()}: unknown value type: ${typeof value}, value: ${value}`);\n        }\n    }\n\n    stringToValue(stringValue) {\n        // console.log('FieldController.stringToValue', this.model.getFullName(), stringValue);\n        // if (stringValue === undefined) return undefined;\n        // if (stringValue === null) return null;\n        const fieldType = this.model.getType();\n        // console.log('fieldType:', fieldType);\n        if (stringValue.trim() === '') return null;\n        if (fieldType === 'object' || fieldType === 'boolean') {\n            return JSON.parse(stringValue);\n        } else if (fieldType === 'date') {\n            const date = new Date(stringValue);\n            if (date.toString() === 'Invalid Date') throw new Error(`invalid date: ${stringValue}`);\n            return date;\n        } else if (fieldType === 'number') {\n            const num = Number(stringValue);\n            if (isNaN(num)) throw new Error('not a number');\n            return num;\n        }\n        return stringValue;\n    }\n\n    renderViewStyle(row) {\n        return null;\n    }\n\n}\n","class FormController extends Controller {\n\n    static create(model, parent) {\n        // console.log('FormController.create', model.getFullName());\n        const customClassName = `${model.getPage().getName()}${model.getName()}FormController`;\n        if (eval(`typeof ${customClassName}`) === 'function') {\n            const CustomClass = eval(customClassName);\n            // console.log('CustomClass:', CustomClass);\n            return new CustomClass(model, parent);\n        }\n        /*if (model.data.js) {\n            const CustomClass = eval(model.data.js);\n            if (!CustomClass) throw new Error(`custom class of \"${model.getFullName()}\" form does not return type`);\n            return new CustomClass(model, parent);\n        }*/\n        return eval(`new ${model.getClassName()}Controller(model, parent);`);\n    }\n    constructor(model, parent) {\n        super(model, parent);\n        this.fields = {};\n    }\n    init() {\n        for (const field of this.model.fields) {\n            const ctrl = this.fields[field.getName()] = FieldController.create(field, this);\n            ctrl.init();\n        }\n    }\n    deinit() {\n        // console.log('FormController.deinit:', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].deinit();\n        }\n        super.deinit();\n    }\n    isValid() {\n        return true;\n    }\n    async openPage(options) {\n        return this.getPageController().openPage(options);\n    }\n    getPageController() {\n        return this.parent;\n    }\n    isChanged() {\n        return false;\n    }\n    async onFieldChange(e) {\n        // console.log('FormController.onFieldChange', this.model.getFullName());\n        await this.getPageController().onFormChange(e);\n    }\n    getUpdated() {\n        return this.state.updated;\n    }\n    invalidate() {\n        this.state.updated = Date.now();\n    }\n    async onActionClick(name, row) {\n        console.log('FormController.onActionClick', name, row);\n    }\n    getField(name) {\n        return this.fields[name];\n    }\n}\n","class PageController extends Controller {\n\n    static create(model, parent) {\n        // console.log('PageController.create', model.getName());\n        const customClassName = `${model.getName()}PageController`;\n        if (eval(`typeof ${customClassName}`) === 'function') {\n            const CustomClass = eval(customClassName);\n            // console.log('CustomClass:', CustomClass);\n            return new CustomClass(model, parent);\n        }\n        return new PageController(model, parent);\n    }\n\n    constructor(model, parent) {\n        //console.log('PageController.constructor', model);\n        super(model, parent);\n        this.forms = [];\n    }\n\n    init() {\n        for (const form of this.model.forms) {\n            const ctrl = FormController.create(form, this);\n            ctrl.init();\n            this.forms.push(ctrl);\n        }\n    }\n\n    deinit() {\n        console.log('PageController.deinit: ' + this.model.getFullName());\n        for (const form of this.forms) {\n            form.deinit();\n        }\n        super.deinit();\n    }\n\n    onSaveAndCloseClick = async () => {\n        console.log('PageController.onSaveAndCloseClick');\n        if (this.isValid()) {\n            await this.model.update();\n            console.log('page model updated', this.model.getFullName());\n            this.getAppController().closePage(this);\n        }\n    }\n\n    onClosePageClick = () => {\n        // console.log('PageController.onClosePageClick', this.model.getFullName());\n        this.close();\n    }\n\n    close() {\n        // console.log('PageController.close', this.model.getFullName());\n        const changed = this.isChanged();\n        // console.log('changed:', changed);\n        // const valid = this.isValid();\n        // console.log('valid:', valid);\n        if (this.model.hasRowFormWithDefaultSqlDataSource() && changed) {\n            const result = confirm(this.model.getApp().data.text.form.areYouSure);\n            if (!result) return;\n        }\n        this.getAppController().closePage(this);\n    }\n    isValid() {\n        // console.log('PageController.isValid', this.model.getFullName());\n        for (const form of this.forms) {\n            if (!form.isValid()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async onFormChange(e) {\n        // console.log('PageController.onFormChange', this.model.getFullName());\n        this.rerender();\n    }\n    onFormDiscard(formController) {\n        console.log('PageController.onFormDiscard', this.model.getFullName());\n        this.rerender();\n    }\n\n    onFormUpdate(e) {\n        console.log('PageController.onFormUpdate:', this.model.getFullName());\n        this.rerender();\n    }\n\n    onFormInsert(e) {\n        console.log('PageController.onFormInsert:', this.model.getFullName());\n        // console.log('hasNew:', this.model.hasNew());\n        for (const form of this.forms) {\n            form.invalidate();\n        }\n        this.rerender();\n    }\n\n    async openPage(options) {\n        options.parentPage = this.model;\n        return await this.getAppController().openPage(options);\n    }\n\n    isChanged() {\n        // console.log('PageController.isChanged', this.model.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged()) {\n                // console.log(`FORM CHANGED: ${form.model.getFullName()}`);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getAppController() {\n        return this.parent;\n    }\n    getViewClass() {\n        return PageView;\n    }\n    getCaption() {\n        return this.model.getCaption();\n    }\n    static createLink(params = {}) {\n        // const query = window.location.search.split('?')[1];\n        // console.log('query:', query);\n        return [\n            window.location.pathname,\n            [\n                // ...(query ? query.split('&') : []),\n                ...(ApplicationController.isInDebugMode() ? ['debug=1'] : []),\n                ...Object.keys(params).map(name => `${name}=${encodeURI(Helper.encodeValue(params[name]))}`)\n            ].join('&')\n        ].join('?');\n    }\n    getForm(name) {\n        return this.forms.find(form => form.model.getName() === name);\n    }\n    async onActionClick(name) {\n        console.log('PageController.onActionClick', name);\n    }\n}\n","class Application extends Model {\n    constructor(data) {\n        super(data);\n        this.databases   = [];\n        this.dataSources = [];\n    }\n\n    init() {\n        // console.log('Application.init');\n        if (!this.data.theme) throw new Error('no theme attr');\n\n        // databases\n        for (const data of this.data.databases) {\n            const database = new Database(data, this);\n            database.init();\n            this.databases.push(database);\n        }\n\n        // data sources\n        this.createDataSources();\n    }\n\n    deinit() {\n        this.deinitDataSources();\n        // TODO: add deinit on opened pages\n        super.deinit();\n    }\n\n    async logout() {\n        const data = await this.request({\n            'action': 'logout'\n        });\n        this.emit('logout', {source: this});\n    }\n\n    async request(options) {\n        // console.warn('Application.request', data);\n        const start = Date.now();\n        const response = await FrontHostApp.doHttpRequest(options);\n        this.emit('request', {time: Date.now() - start});\n        return response;\n    }\n\n    getDatabase(name) {\n        const database = this.databases.find(database => database.getName() === name);\n        if (!database) throw new Error(`no database: ${name}`);\n        return database;\n    }\n\n    getText() {\n        return this.data.text;\n    }\n    getUser() {\n        return this.data.user;\n    }\n    getDomain() {\n        return this.data.domain;\n    }\n    async rpc(name, params) {\n        console.log('Application.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.request({\n            action: 'rpc',\n            name  : name,\n            params: Helper.encodeObject(params)\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n}\n","class Column  extends Model {\n    init() {\n        // console.log('Column.init', this.getFullName());\n    }\n\n    getType() {\n        if (!this.data.type) throw new Error(`column ${this.getFullName()}: no type`);\n        return this.data.type;\n    }\n    getDbType() {\n        return this.data.dbType;\n    }\n}\n","class DataSource extends Model {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.rows      = null;\n        this.rowsByKey = null;\t\t\t\t\t\t// for row search by key\n        this.news      = [];                        // new rows\n        this.changes   = new Map();\n    }\n\n    init() {\n        // console.log('DataSource.init', this.getFullName(), this.getClassName());\n        this.setRows(this.data.rows);\n    }\n\n    setRows(rows) {\n        this.rows = rows;\n        this.fillRowsByKey();\n    }\n\n    addRows(rows) {\n        for (let i = 0; i < rows.length; i++) {\n            this.rows.push(rows[i]);\n        }\n        this.fillRowsByKey();\n    }\n\n    fillRowsByKey() {\n        // console.log('DataSource.fillRowsByKey', this.getFullName())\n        this.rowsByKey = {};\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            const key = this.getRowKey(row);\n            this.rowsByKey[key] = row;\n        }\n        // console.log('this.rowsByKey:', this.getFullName(), this.rowsByKey);\n    }\n\n    // deinit() {\n    //     console.log('DataSource.deinit', this.getFullName());\n    //     super.deinit();\n    // }\n\n    getType(column) {\n        // console.log('DataSource.getType', this.getClassName(), column);\n        throw new Error('DataSource column type not implemented');\n    }\n\n    discardRowColumn(row, column) {\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            delete this.changes.get(row)[column];\n        }\n    }\n\n    changeRowColumn(row, column, newValue) {\n        if (!this.changes.has(row)) this.changes.set(row, {});\n        this.changes.get(row)[column] = newValue;\n    }\n\n    setValue(row, column, value) {\n        // console.log('DataSource.setValue', this.getFullName(), column, value, typeof value);\n        if (value === undefined) throw new Error(`${this.getFullName()}: undefined is wrong value for data source`);\n        if (typeof value === 'object' && value !== null) {\n            throw new Error(`setValue: ${this.getFullName()}.${column}: object must be in JSON format`);\n        }\n        if (row[column] !== value) {\n            this.changeRowColumn(row, column, value);\n            if (row[column] === undefined && value === null) {  // workaround for new rows\n                this.discardRowColumn(row, column);\n            }\n        } else {\n            this.discardRowColumn(row, column);\n        }\n        if (this.changes.has(row) && !Object.keys(this.changes.get(row)).length) this.changes.delete(row);\n        // console.log('changes:', this.changes);\n    }\n\n    isChanged() {\n        // console.log('DataSource.isChanged', this.getFullName());\n        return !!this.changes.size;\n    }\n\n    hasNew() {\n        return !!this.news.length;\n    }\n\n    isRowColumnChanged(row, column) {\n        // console.log('DataSource.isRowColumnChanged', this.getFullName());\n        return row[column] !== this.getValue(row, column);\n    }\n\n    getValue(row, column) {\n        // console.log('DataSource.getValue', column);\n        let value;\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            value = this.changes.get(row)[column];\n        } else {\n            value = row[column];\n        }\n        if (value !== undefined && typeof value !== 'string') {\n            throw new Error(`getValue: ${this.getFullName()}.${column}: object must be in JSON format, value: ${value}`);\n        }\n        // console.log('DataSource.getValue:', value);\n        return value;\n    }\n\n    getKeyValues(row) {\n        return this.data.keyColumns.reduce((key, column) => {\n            key[column] = JSON.parse(row[column]);\n            return key;\n        }, {});\n    }\n\n    getRowKey(row) {\n        // console.log('DataSource.getRowKey', row);\n        const arr = [];\n        for (let i = 0; i < this.data.keyColumns.length; i++) {\n            const column = this.data.keyColumns[i];\n            if (row[column] === undefined) return null;\n            if (row[column] === null) throw new Error('wrong value null for data source value');\n            try {\n                const value = JSON.parse(row[column]);\n                arr.push(value);\n            } catch (err) {\n                console.log('cannot parse: ', row[column]);\n                throw err;\n            }\n        }\n        return JSON.stringify(arr);\n    }\n\n    // copy new values to data source row\n    copyNewValues(oldRow, newRow) {\n        for (const columnName in newRow) {\n            oldRow[columnName] = newRow[columnName];\n        }\n    }\n\n    removeRow(key) {\n        const row = this.rowsByKey[key];\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key} to remove`);\n        const i = this.rows.indexOf(row);\n        if (i === -1) throw new Error(`${this.getFullName()}: no row with i ${i} to remove`);\n        this.rows.splice(i, 1);\n        delete this.rowsByKey[key];\n    }\n\n    newRow(row) {\n        console.log('DataSource.newRow', this.getFullName(), row);\n        if (this.data.rows.length > 0) {\n            throw new Error('rows can be added to empty data sources only in new mode');\n        }\n        this.news.push(row);\n    }\n\n    getSingleRow(withChanges = false) {\n        if (this.news[0]) return this.news[0];\n        const row = this.rows[0];\n        if (!row) throw new Error('no single row');\n        if (withChanges) return this.getRowWithChanges(row);\n        return row;\n    }\n\n    getForm() {\n        return this.parent instanceof Form ? this.parent : null;\n    }\n\n    getPage() {\n        if (this.parent instanceof Page) return this.parent;\n        if (this.parent instanceof Form) return this.parent.getPage();\n        return null;\n    }\n\n    getApp() {\n        if (this.parent instanceof Application) return this.parent;\n        return this.parent.getApp();\n    }\n\n    getNamespace() {\n        if (this.parent instanceof Form) {\n            return this.parent.getPage().getName() + '.' + this.parent.getName() + '.' + this.getName();\n        }\n        if (this.parent instanceof Page) {\n            return this.parent.getName() + '.' + this.getName();\n        }\n        return this.getName();\n    }\n\n    getRow(key) {\n        return this.rowsByKey[key];\n    }\n\n    getRows() {\n        return this.rows;\n    }\n\n    getRowByIndex(i) {\n        return this.rows[i];\n    }\n\n    getRowByKey(key) {\n        return this.rowsByKey[key] || null;\n    }\n\n    discard() {\n        console.log('DataSource.discard', this.getFullName());\n        if (!this.isChanged()) throw new Error(`no changes in data source ${this.getFullName()}`);\n        this.changes.clear();\n    }\n\n    static keyToParams(key, paramName = 'key') {\n        if (typeof key !== 'string') throw new Error('key not string');\n        const params = {};\n        const arr = JSON.parse(key);\n        if (arr.length === 1) {\n            params[paramName] = arr[0];\n        } else  if (arr.length > 1) {\n            for (let i = 0; i < arr.length; i++) {\n                params[`${paramName}${i + 1}`] = arr[i];\n            }\n        } else {\n            throw new Error(`invalid key: ${key}`);\n        }\n        return params;\n    }\n\n    getChangesByKey() {\n        const changes = {};\n        for (const row of this.changes.keys()) {\n            changes[this.getRowKey(row)] = this.changes.get(row);\n        }\n        return changes;\n    }\n\n    getRowWithChanges(row) {\n        if (this.changes.has(row)) {\n            return {...row, ...this.changes.get(row)};\n        }\n        return row;\n    }\n\n    hasNewRows() {\n        return this.news.length > 0;\n    }\n\n}\n","class Database extends Model {\n    constructor(...args) {\n        super(...args);\n        this.tables = [];\n    }\n\n    init() {\n        // console.log('Database.init', this.getName());\n        for (const data of this.data.tables) {\n            const table = new Table(data, this);\n            table.init();\n            this.tables.push(table);\n        }\n    }\n\n    getTable(name) {\n        const table = this.tables.find(table => table.getName() === name);\n        if (!table) throw new Error(`${this.getFullName()}: no table with name: ${name}`);\n        return table;\n    }\n\n    emitResult(result, source) {\n        this.emitDelete(result, source);\n        this.emitUpdate(result, source);\n        this.emitInsert(result, source);\n    }\n\n    emitInsert(result, source = null) {\n        if (!result.insert) return;\n        for (const tableName in result.insert) {\n            const table = this.getTable(tableName);\n            for (const key in result.insert[tableName]) {\n                table.emit('insert', {source: source, key: key});\n            }\n        }\n    }\n\n    emitUpdate(result, source = null) {\n        if (!result.update) return;\n        for (const tableName in result.update) {\n            const table = this.getTable(tableName);\n            for (const key in result.update[tableName]) {\n                const oldKey = result.update[tableName][key];\n                table.emit('update', {source: source, changes: {[key]: oldKey}});\n            }\n        }\n    }\n    emitDelete(result, source = null) {\n        if (!result.delete) return;\n        for (const tableName in result.delete) {\n            const table = this.getTable(tableName);\n            for (const key of result.delete[tableName]) {\n                table.emit('delete', {source: source, key: key});\n            }\n        }\n    }\n}\n","class Form extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.dataSources = [];\n        this.fields      = [];\n    }\n\n    init() {\n        // data sources\n        this.createDataSources();\n\n        // fields\n        for (const data of this.data.fields) {\n            const field = eval(`new ${data.class}(data, this)`);\n            field.init();\n            this.fields.push(field);\n        }\n    }\n\n    deinit() {\n        // console.log('Form.deinit:', this.getFullName());\n        this.deinitDataSources();\n        for (const field of this.fields) {\n            field.deinit();\n        }\n        super.deinit();\n    }\n\n    fillDefaultValues(row) {\n        for (const field of this.fields) {\n            field.fillDefaultValue(row);\n        }\n    }\n\n    onDataSourceRefresh(e) {\n        // console.log('Form.onDataSourceRefresh', this.getFullName());\n        this.emit('refresh', e);\n    }\n\n    onDataSourceInsert(e) {\n        // console.log('Form.onDataSourceInsert', this.getFullName());\n        this.parent.onFormInsert(e);\n        this.emit('insert', e);\n    }\n\n    onDataSourceUpdate(e) {\n        // console.log('Form.onDataSourceUpdate', this.getFullName());\n        this.emit('update', e);\n    }\n\n    onDataSourceDelete(e) {\n        // console.log('Form.onDataSourceDelete', this.getFullName());\n        this.emit('delete', e);\n    }\n\n    async update() {\n        console.log('Form.update', this.getFullName(), this.isChanged());\n        if (this.getPage().deinited) throw new Error('page already deinited');\n        if (!this.isChanged() && !this.getDefaultDataSource().hasNewRows()) throw new Error(`form model not changed or does not have new rows: ${this.getFullName()}`);\n        await this.getDefaultDataSource().update();\n    }\n\n    isChanged() {\n        // console.log('Form.isChanged', this.getFullName());\n        return this.getDefaultDataSource().isChanged();\n    }\n\n    hasNew() {\n        // console.log('Form.hasNew', this.getFullName());\n        return this.getDefaultDataSource().hasNew();\n    }\n\n    async rpc(name, params) {\n        console.log('Form.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.getApp().request({\n            action: 'rpc',\n            page  : this.getPage().getName(),\n            form  : this.getName(),\n            name  : name,\n            params: Helper.encodeObject(params)\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n\n    getKey() {\n        return null;\n    }\n\n    getDefaultDataSource() {\n        const dataSource = this.getDataSource('default');\n        if (!dataSource) throw new Error(`${this.getFullName()}: no default data source`);\n        return dataSource;\n    }\n\n    getPage() {\n        return this.parent;\n    }\n\n    getApp() {\n        return this.parent.parent;\n    }\n    async refresh() {\n        await this.getDefaultDataSource().refresh();\n    }\n    getField(name) {\n        return this.fields.find(field => field.getName() === name);\n    }\n    hasDefaultSqlDataSource() {\n        return this.getDefaultDataSource().getClassName() === 'SqlDataSource';\n    }\n}\n","class Table extends Model {\n    constructor(...args) {\n        super(...args);\n        this.columns = [];\n    }\n    init() {\n        // console.log('Table.init', this.getFullName());\n        for (const data of this.data.columns) {\n            const column = new Column(data, this);\n            column.init();\n            this.columns.push(column);\n        }\n    }\n\n    getColumn(name) {\n        const column = this.columns.find(column => column.getName() === name);\n        if (!column) throw new Error(`table ${this.getFullName()}: no column ${name}`);\n        return column;\n    }\n}\n","class Page extends Model {\n    constructor(data, parent, options) {\n        // console.log('Page.constructor', options);\n        if (!options.id) throw new Error('no page id');\n        super(data, parent);\n        this.options = options; // {id, parentPage, modal, params}\n        this.dataSources    = [];\n        this.forms          = [];\n        this.params         = {};\n    }\n\n    init() {\n        this.createDataSources();\n\n        // forms\n        for (const data of this.data.forms) {\n            const FormClass = eval(Model.getClassName(data));\n            const form = new FormClass(data, this);\n            form.init();\n            this.forms.push(form);\n        }\n        console.log('page params:', this.getFullName(), this.getParams());\n    }\n\n    deinit() {\n        // console.log('Page.deinit', this.getFullName());\n        if (this.deinited) throw new Error(`page ${this.getFullName()} is already deinited`);\n        this.deinitDataSources();\n        for (const form of this.forms) {\n            form.deinit();\n        }\n        super.deinit();\n    }\n\n    getId() {\n        return this.options.id;\n    }\n\n    getParentPageName() {\n        return this.options.parentPage ? this.options.parentPage.getName() : null;\n    }\n\n    getParams() {\n        return {\n            ...(this.options.parentPage ? this.options.parentPage.getParams() : {}),\n            ...(this.options.params !== undefined ? this.options.params : {}),\n            ...this.params,\n        };\n    }\n\n    addPageParam(name, value) {\n        // console.log('Page.addPageParam', name);\n        this.params[name] = value !== undefined ? value : null;\n    }\n\n    async update() {\n        console.log('Page.update', this.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged() || form.hasNew()) await form.update();\n        }\n    }\n\n    discard() {\n        console.log('Page.discard', this.getFullName());\n        for (const form of this.forms) {\n            form.discard();\n        }\n    }\n\n    getKey() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') {\n                return form.getKey();\n            }\n        }\n        return null;\n    }\n\n    hasRowFormWithDefaultDs() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.getDefaultDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowFormWithDefaultSqlDataSource() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.hasDefaultSqlDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') return true;\n        }\n        return false;\n    }\n\n    hasTableForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'TableForm') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isNewMode() {\n        return this.getAttr('newMode');\n    }\n\n    hasNew() {\n        for (const form of this.forms) {\n            if (form.hasNew()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getApp() {\n        return this.parent;\n    }\n\n    getFullName() {\n        return `${this.getName()}(${this.getId()})`;\n    }\n\n    isModal() {\n        // return this.modal;\n        return !!this.options.modal;\n    }\n\n    onFormInsert(e) {\n        console.log('Page.onFormInsert', e);\n        if (!e.key) throw new Error('no key of inserted row');\n\n        // key params to page params\n        const keyParams = DataSource.keyToParams(e.key);\n        for (const name in keyParams) {\n            this.addPageParam(name, keyParams[name]);\n        }\n    }\n    async rpc(name, params) {\n        // console.log('Page.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result =  await this.getApp().request({\n            action: 'rpc',\n            page  : this.getName(),\n            name  : name,\n            params: Helper.encodeObject(params)\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.getName() === name);\n    }\n}\n","class Field extends Model {\n    // constructor(data, parent) {\n    //     super(data, parent);\n    // }\n\n    init() {\n    }\n\n    replaceThis(value) {\n        return value.replace(/\\{([@\\w\\.]+)\\}/g, (text, name) => {\n            if (name.indexOf('.') === -1) return text;\n            let arr = name.split('.');\n            if (arr[0] === 'this') arr[0] = this.getPage().getName();\n            if (arr[0] === 'parent' && this.getPage().getParentPageName()) {\n                arr[0] = this.getPage().getParentPageName();\n            }\n            return `{${arr.join('.')}}`;\n        });\n    }\n\n    fillDefaultValue(row) {\n        // console.log('Field.fillDefaultValue', this.getFullName());\n        const column = this.getAttr('column');\n        if (!column) return;\n        const defaultValue = this.replaceThis(this.getAttr('defaultValue'));\n        const js = Helper.templateToJsString(defaultValue, this.getPage().getParams());\n        if (typeof js !== 'string') throw new Error(`${this.getFullName()}: defaultValue must be templated to js string`);\n        // console.log('js', this.getFullName(), js);\n        try {\n            const value = eval(js);\n            if (value !== undefined) {\n                row[column] = Helper.encodeValue(value);\n            }\n        } catch (err) {\n            throw new Error(`[${this.getFullName()}] fillDefaultValue: ${err.toString()}`);\n        }\n    }\n\n    valueToPageParams(row) {\n        // console.log('Field.valueToPageParams', this.getFullName(), this.getDbType());\n        // if (this.getDbType() === 'text') return;\n        if (this.isParam()) {\n            this.getPage().addPageParam(this.getFullName(), this.getValue(row));\n        }\n    }\n\n    setValue(row, value) {\n        // console.log('Field.setValue', this.getFullName(), value);\n        if (!this.getAttr('column')) throw new Error(`field has no column: ${this.getFullName()}`);\n        const rawValue = Helper.encodeValue(value);\n        this.getForm().getDefaultDataSource().setValue(row, this.getAttr('column'), rawValue);\n        this.valueToPageParams(row);\n    }\n\n    isChanged(row) {\n        // console.log('Field.isChanged', this.getFullName());\n        if (!this.getAttr('column')) throw new Error(`${this.getFullName()}: field has no column`);\n        return this.getDefaultDataSource().isRowColumnChanged(row, this.getAttr('column'));\n    }\n\n    hasColumn() {\n        return !!this.getAttr('column');\n    }\n\n    getValue(row) {\n        // console.log('Field.getValue', this.getFullName());\n        if (this.getAttr('column')) {\n            if (!row && this.parent instanceof RowForm) {\n                row = this.parent.getRow();\n            }\n            let rawValue = this.getRawValue(row);\n            if (rawValue === undefined) return undefined;\n            if (rawValue === null) throw new Error(`[${this.getFullName()}]: null is wrong raw value`);\n            try {\n                return Helper.decodeValue(rawValue);\n            } catch (err) {\n                console.log('raw value decode error:', this.getFullName(), rawValue);\n                throw err;\n            }\n        }\n        if (this.data.value) return eval(this.data.value);\n        throw new Error(`${this.getFullName()}: no column and no value in field`);\n    }\n\n    getRawValue(row) {\n        if (!this.hasColumn()) throw new Error(`${this.getFullName()}: no column`);\n        return this.getForm().getDefaultDataSource().getValue(row, this.getAttr('column'));\n    }\n\n    getDefaultDataSource() {\n        return this.getForm().getDefaultDataSource();\n    }\n\n    getType() {\n        const dataSource = this.getDefaultDataSource();\n        if (dataSource.getClassName() === 'SqlDataSource' && this.getAttr('column')) {\n            return this.getDefaultDataSource().getType(this.getAttr('column'));\n        }\n        if (this.getAttr('type')) return this.getAttr('type');\n        throw new Error(`field type empty`);\n    }\n\n    getDbType() {\n        const dataSource = this.getDefaultDataSource();\n        if (dataSource.getClassName() === 'SqlDataSource' && this.getAttr('column')) {\n            return this.getDefaultDataSource().getDbType(this.getAttr('column'));\n        }\n        return null;\n    }\n\n    getForm() {\n        return this.parent;\n    }\n\n    getPage() {\n        return this.parent.parent;\n    }\n\n    getApp() {\n        return this.parent.parent.parent;\n    }\n\n    isReadOnly() {\n        return this.data.readOnly === 'true';\n    }\n    isNotNull() {\n        return this.data.notNull === 'true';\n    }\n    isNullable() {\n        return this.data.notNull === 'false';\n    }\n    isVisible() {\n        return this.data.isVisible === 'true';\n    }\n    getWidth() {\n        return this.data.width !== '0' ? parseInt(this.data.width) : 100;\n    }\n    getFullName() {\n        return `${this.getPage().getName()}.${this.getForm().getName()}.${this.getName()}`;\n    }\n    isParam() {\n        return this.data.param === 'true';\n    }\n    /*getPlaceholder() {\n        return this.getAttr('placeholder');\n    }*/\n    validateOnChange() {\n        if (this.data.validateOnChange !== undefined) {\n            return this.data.validateOnChange === 'true';\n        }\n        return true;\n    }\n    validateOnBlur() {\n        if (this.data.validateOnBlur !== undefined) {\n            return this.data.validateOnBlur === 'true';\n        }\n        return false;\n    }\n    getCaption() {\n        const caption = this.getAttr('caption');\n        if (caption === '') {\n            const columnName = this.getAttr('column');\n            if (columnName && this.parent.hasDefaultSqlDataSource()) {\n                const ds = this.parent.getDataSource('default');\n                if (ds.getAttr('table')) {\n                    const column = ds.getTable().getColumn(columnName);\n                    return column.getCaption();\n                }\n            }\n        }\n        return caption;\n    }\n}\n","class MdiApplicationController extends ApplicationController {\n    constructor(model) {\n        super(model);\n        this.pages = null;\n        this.tab = null;\n    }\n    init() {\n        super.init();\n        this.pages = this.createPages();\n        this.activePage = this.pages.length ? this.pages[0] : null;\n    }\n    deinit() {\n        // TabWidget\n        /*this.tabWidget.off('tabClosingByUser', this.listeners.tabClosingByUser);\n        this.tabWidget.off('tabShow', this.listeners.tabShow);\n        this.tabWidget.off('tabHide', this.listeners.tabHide);*/\n        super.deinit();\n    }\n    getViewClass() {\n        return MdiApplicationView;\n    }\n    /*onTabShow(e) {\n        // console.log('ApplicationController.onTabShow', e.tab.pageController);\n        if (e.tab.pageController) {\n            e.tab.pageController.emit('show', {source: this});\n        }\n    }*/\n\n    /*onTabHide(e) {\n        if (e.tab.pageController) {\n            e.tab.pageController.emit('hide', {source: this});\n        }\n    }*/\n    onTabCreate = tab => {\n        // console.log('MdiApplicationController.onTabCreate', tab);\n        this.tab = tab;\n    }\n    onTabMouseDown = i => {\n        // console.log('MdiApplicationController.onTabMouseDown');\n        if (this.activePage !== this.pages[i]) {\n            this.activePage = this.pages[i];\n            this.rerender();\n        }\n    }\n    createPages() {\n        return this.model.data.pages.map(pageData => {\n            const page = new Page(pageData, this.model, {\n                id   : `p${this.getNextPageId()}`,\n                modal: false\n            });\n            page.init();\n\n            // controller\n            const pageController = PageController.create(page, this);\n            pageController.init();\n            return pageController;\n        });\n    }\n    onPageSelect(pc) {\n        console.log('ApplicationController.onPageSelect', pc.model.getName());\n        const i = this.pages.indexOf(pc);\n        if (i === -1) throw new Error(`no page controller ${pc.model.getName()} in pages`);\n        this.activePage = pc;\n        this.tab.rerender();\n    }\n    getActivePageIndex = () => {\n        const i = this.activePage ? this.pages.indexOf(this.activePage) : null;\n        if (i === -1) throw new Error('active page not in list');\n        return i;\n    }\n    closePage(pageController) {\n        // console.log('ApplicationController.closePage', pageController.model.getFullName());\n        if (this.pages.indexOf(pageController) > -1) {\n            this.pages.splice(this.pages.indexOf(pageController), 1);\n            if (this.activePage === pageController) {\n                this.activePage = this.pages[this.pages.length - 1];\n            }\n        } else if (this.modalPages.indexOf(pageController) > -1) {\n            this.modalPages.splice(this.modalPages.indexOf(pageController), 1);\n        } else {\n            throw new Error('page not found');\n        }\n        this.rerender();\n        pageController.deinit();\n        pageController.model.deinit();\n    }\n    onTabClose = i => {\n        console.log('ApplicationController.onTabClose', this.pages[i].model.getFullName());\n        this.closePage(this.pages[i]);\n    }\n    findPageControllerByPageNameAndKey(pageName, key) {\n        return this.pages.find(({model}) => model.getName() === pageName && model.getKey() === key);\n    }\n    onPageCreate(pc) {\n        this.pages.push(this.activePage = pc);\n    }\n}\n","class SdiApplicationController extends ApplicationController {\n    getViewClass() {\n        return SdiApplicationView;\n    }\n}\n","class RowFormFieldController extends FieldController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            value     : null,\n            parseError: null,\n            error     : null,\n            changed   : false,\n        };\n    }\n    init() {\n        const row = this.getRow();\n        const value = this.model.getValue(row);\n        this.setValue(value);\n        // console.log(this.model.getFullName(), value);\n    }\n    refill() {\n        // console.log('RowFormFieldController.refill', this.model.getFullName());\n        if (!this.view) return;\n        const value = this.model.getValue(this.getRow());\n        this.setValue(value);\n        this.resetErrors();\n        this.refreshChanged();\n    }\n    getViewClass() {\n        return RowFormTextBoxFieldView;\n    }\n    getRow() {\n        return this.model.getForm().getRow();\n    }\n    copyValueToModel() {\n        // console.log('RowFormFieldController.copyValueToModel', this.model.getFullName());\n        this.model.setValue(this.getRow(), this.getValue());\n    }\n    _onChange(viewValue) {\n\n    }\n    putValue(viewValue) {\n        // console.log('RowFormFieldController.putValue', viewValue);\n        this.onChange(viewValue, false);\n    }\n    onChange = async (viewValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onChange', viewValue);\n        this._onChange(viewValue);\n        this.resetErrors();\n        try {\n            this.setValueFromView(viewValue);\n        } catch (err) {\n            console.error(`${this.model.getFullName()}: cannot parse view value: ${err.message}`);\n            this.state.parseError = err.message;\n        }\n\n        if (this.model.validateOnChange()) {\n            this.validate();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: viewValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    onBlur = (viewValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onBlur', this.model.getFullName());\n        if (this.model.validateOnBlur()) {\n            console.log('validateOnBlur');\n            this.validate();\n            if (this.isValid()) {\n                this.model.setValue(this.getRow(), this.getValue());\n            }\n            this.refreshChanged();\n            if (fireEvent) {\n                try {\n                    this.emit('change', {value: viewValue});\n                } catch (err) {\n                    console.error('unhandled change event error:', this.model.getFullName(), err);\n                }\n                this.parent.onFieldChange({source: this});\n            }\n        }\n    }\n    getValueForView() {\n        const value = this.getValue();\n        // console.log('value:', this.model.getFullName(), value, typeof value);\n        return this.valueToString(value);\n    }\n    setValueFromView(viewValue) {\n        // console.log('RowFormFieldController.setValueFromView', this.model.getFullName(), typeof viewValue, viewValue);\n        if (typeof viewValue !== 'string') throw new Error(`${this.model.getFullName()}: viewValue must be string, but got ${typeof viewValue}`);\n        const value = this.stringToValue(viewValue);\n        // console.log('value:', value);\n        this.setValue(value);\n    }\n    setValue(value) {\n        // console.log('RowFormFieldController.setValue', this.model.getFullName(), value);\n        this.state.value = value;\n    }\n    getValue() {\n        return this.state.value;\n    }\n    isChanged() {\n        return this.state.changed;\n    }\n    isValid() {\n        return this.state.error === null;\n    }\n    validate() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        this.state.error = this.getError();\n    }\n    refreshChanged() {\n        this.state.changed = this.calcChangedState(this.getRow());\n    }\n    getPlaceholder() {\n        // console.log('RowFormFieldController.getPlaceholder', this.model.getFullName(), this.model.getAttr('placeholder'));\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        if (ApplicationController.isInDebugMode()) {\n            const value = this.getValue();\n            if (value === undefined) return 'undefined';\n            if (value === null) return 'null';\n            if (value === '') return 'empty string';\n        }\n    }\n    getError() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.view) {\n            try {\n                const viewValue = this.view.getValue();\n            } catch (err) {\n                return `can't parse value: ${err.message}`;\n            }\n        }\n\n        // null validator\n        const value = this.getValue();\n        if (this.model.isNotNull() && (value === null || value === undefined)) {\n            return 'not null';\n        }\n        return null;\n    }\n    isEditable() {\n        return this.parent.getMode() === 'edit' && !this.model.isReadOnly();\n    }\n    isParseError() {\n        return this.state.parseError !== null;\n    }\n    calcChangedState(row) {\n        // console.log('RowFormFieldController.calcChangedState', this.model.getFullName());\n        if (!row) throw new Error('FieldController: no row');\n        if (this.isParseError()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: parse error: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (!this.isValid()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: not valid: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (this.model.hasColumn()) {\n            const fieldRawValue = Helper.encodeValue(this.getValue());\n            const dsRawValue = this.model.getRawValue(row);\n            if (fieldRawValue !== dsRawValue) {\n                console.log(`FIELD CHANGED ${this.model.getFullName()}`, dsRawValue, fieldRawValue);\n                return true;\n            }\n        }\n        if (this.model.isChanged(row)) {\n            let original = row[this.model.getAttr('column')];\n            let modified = this.model.getDefaultDataSource().getRowWithChanges(row)[this.model.getAttr('column')];\n            if (original) original = original.substr(0, 100);\n            if (modified) modified = modified.substr(0, 100);\n            console.log(`FIELD MODEL CHANGED ${this.model.getFullName()}:`, original, modified);\n            return true;\n        }\n        return false;\n    }\n    setError(error) {\n        this.state.error = error;\n    }\n    resetErrors() {\n        this.setError(null);\n        this.state.parseError = null;\n    }\n    getErrorMessage() {\n        if (this.state.parseError) {\n            return this.state.parseError;\n        }\n        return this.state.error;\n    }\n}\n","class TableFormFieldController extends FieldController {\n    getViewClass() {\n        return TableFormTextBoxFieldView;\n    }\n    getValueForView(row) {\n        // console.log('TableFormFieldController.getValueForView');\n        return this.valueToString(this.model.getValue(row));\n    }\n    renderViewStyle(row) {\n        return null;\n    }\n}\n","class RowFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now(),\n            mode   : 'edit',\n            hasNew : false,\n            changed: false,\n            valid  : true\n        };\n    }\n\n    init() {\n        super.init();\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('insert' , this.onModelInsert);\n        this.model.on('update' , this.onModelUpdate);\n        if (this.model.getDefaultDataSource().getClassName() === 'SqlDataSource') {\n            this.state.mode = 'view';\n        }\n        this.calcState();\n    }\n\n    deinit() {\n        // console.log('RowFormController.deinit', this.model.getFullName());\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('insert' , this.onModelInsert);\n        this.model.off('update' , this.onModelUpdate);\n        super.deinit();\n    }\n\n    calcState() {\n        this.state.hasNew  = this.model.hasNew();\n        this.state.changed = this.isChanged();\n        this.state.valid   = this.isValid();\n        if (this.state.hasNew) {\n            this.state.mode = 'edit';\n        }\n        // console.log('changed:', changed);\n        // console.log('hasNew:', hasNew);\n    }\n\n    refill() {\n        console.log('RowFormController.refill', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].refill();\n        }\n    }\n\n    onModelRefresh = e => {\n        console.log('RowFormController.onModelRefresh', this.model.getFullName());\n        if (!this.view) return;\n        this.refill();\n        this.invalidate();\n        this.rerender();\n    }\n\n    onModelInsert = e => {\n        console.log('RowFormController.onModelInsert', this.model.getFullName());\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormInsert(e);\n    }\n\n    onModelUpdate = e => {\n        console.log('RowFormController.onModelUpdate', this.model.getFullName());\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormUpdate(e);\n    }\n\n    isValid() {\n        // console.log('RowFormController.isValid', this.model.getFullName());\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (!field.isValid()) return false;\n        }\n        return true;\n    }\n    validate() {\n        for (const name in this.fields) {\n            this.fields[name].validate();\n        }\n    }\n    clearFieldsError() {\n        for (const name in this.fields) {\n            this.fields[name].setError(null);\n        }\n    }\n    onSaveClick = async () => {\n        console.log('RowFormController.onSaveClick');\n        this.validate();\n        if (this.isValid()) {\n            await this.model.update();\n        } else {\n            console.error(`cannot update invalid row form: ${this.model.getFullName()}`);\n            this.rerender();\n        }\n    }\n\n    onDiscardClick = () => {\n        console.log('RowFormController.onDiscardClick', this.model.getFullName());\n        const changedFields = [];\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row) || !field.isValid()) {\n                changedFields.push(name);\n            }\n        }\n        // console.log('changedFields:', changedFields);\n        this.model.discard(changedFields);\n\n        // refill changed fields\n        changedFields.forEach(name => {\n            this.fields[name].refill();\n        });\n\n        // ui\n        this.calcState();\n        this.rerender();\n\n        // event\n        this.parent.onFormDiscard(this);\n    }\n\n    onRefreshClick = async () => {\n        // console.log('RowFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n    }\n\n    isChanged() {\n        // console.log('RowFormController.isChanged', this.model.getFullName());\n        if (this.model.isChanged()) return true;\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row)) return true;\n        }\n        return false;\n    }\n\n    async onFieldChange(e) {\n        // console.log('RowFormController.onFieldChange', this.model.getFullName());\n        this.calcState();\n        this.invalidate();\n        await super.onFieldChange(e);\n    }\n\n    onEditClick = e => {\n        // console.log('RowFormController.onEditClick', this);\n        this.state.mode = 'edit';\n        this.rerender();\n    }\n    onCancelClick = e => {\n        // console.log('RowFormController.onCancelClick', this);\n        this.state.mode = 'view';\n        this.rerender();\n    }\n    getViewClass() {\n        // console.log('RowFormController.getViewClass', this.model.getFullName());\n        return RowFormView;\n    }\n    getActiveRow(withChanges) {\n        return this.model.getRow(withChanges);\n    }\n    getMode() {\n        return this.state.mode;\n    }\n}\n","class TableFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated     : Date.now(),\n            activeRowKey: null\n        };\n    }\n    getViewClass() {\n        return TableFormView;\n    }\n    init() {\n        super.init();\n        // this.parent.on('hide', this.onHidePage);\n        // this.parent.on('show', this.onShowPage);\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('update' , this.onModelUpdate);\n        this.model.on('delete' , this.onModelDelete);\n        this.model.on('insert' , this.onModelInsert);\n    }\n    deinit() {\n        // this.parent.off('hide', this.onHidePage);\n        // this.parent.off('show', this.onShowPage);\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('update' , this.onModelUpdate);\n        this.model.off('delete' , this.onModelDelete);\n        this.model.off('insert' , this.onModelInsert);\n        super.deinit();\n    }\n    onNewClick = async e => {\n        console.log('TableFormController.onNewClick');\n        await this.new();\n    }\n    onRefreshClick = async e => {\n        console.log('TableFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n        // console.error('refresh error handler:', err.message);\n        // alert(err.message);\n    }\n    onDeleteClick = e => {\n        console.log('TableFormController.onDeleteClick', this.model.getFullName(), this.state.activeRowKey);\n        if (confirm(this.model.getApp().getText().form.areYouSure)) {\n            this.model.getDefaultDataSource().delete(this.state.activeRowKey);\n        }\n    }\n    onGridCellDblClick = async (row) => {\n        // console.log('TableFormController.onGridCellDblClick', row);\n        // const bodyCell = e.bodyCell;\n        // const row = bodyCell.bodyRow.dbRow;\n        // console.log('row:', row);\n        const key = this.model.getDefaultDataSource().getRowKey(row);\n        // console.log('key:', key);\n        switch (this.model.getAttr('editMethod')) {\n            // case 'table':\n            //     this.grid.gridColumns[bodyCell.qFieldName].beginEdit(bodyCell);\n            // break;\n            case 'form':\n                await this.edit(key);\n            break;\n        }\n    }\n    onHidePage = () => {\n        // this.grid.saveScroll();\n    }\n    onShowPage = () => {\n        console.log('TableFormController.onShowPage', this.model.getFullName());\n        /*if (!this.grid.isHidden()) {\n            this.grid.restoreScroll();\n            this.grid.focus();\n            // console.log('document.activeElement:', document.activeElement);\n        }*/\n    }\n    async new() {\n        if (this.model.getAttr('newRowMode') === 'oneclick') {\n            const row = {};\n            this.model.fillDefaultValues(row);\n            await this.model.getDefaultDataSource().insert(row);\n        } else if (this.model.getAttr('newRowMode') === 'editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemEditPage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemCreatePage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const key = await this.model.getDefaultDataSource().insert(row);\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                key  : key,\n                modal: true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const key2 = await this.model.getDefaultDataSource().insert(row);\n            await this.openPage({\n                name : this.model.getAttr('itemCreatePage'),\n                key  : key2,\n                modal: true\n            });\n        }\n    }\n    async edit(key) {\n        // console.log('TableForm.edit', this.model.getFullName(), key);\n        if (!this.model.getAttr('itemEditPage')) {\n            throw new Error(`${this.model.getFullName()}: itemEditPage is empty`);\n        }\n        try {\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                key  : key,\n                modal: true\n            });\n        } catch (err) {\n            // console.error(`${this.model.getFullName()}: edit form error handler:`, err);\n            // alert(`${this.model.getFullName()}: ${err.message}`);\n            err.message = `${this.model.getFullName()} edit: ${err.message}`;\n            throw err;\n        }\n    }\n    onModelRefresh = e => {\n        console.log('TableFormController.onModelRefresh', this.model.getFullName(), e);\n        if (!this.view) return;\n        this.invalidate();\n        this.rerender();\n    }\n    onModelUpdate = e => {\n        console.log('TableFormController.onModelUpdate', this.model.getFullName(), e.key);\n        this.invalidate();\n        this.rerender();\n    }\n    onModelDelete = e => {\n        console.log('TableFormController.onModelDelete', this.model.getFullName(), e.key);\n        if (this.state.activeRowKey === e.key) {\n            this.state.activeRowKey = null;\n        }\n        this.invalidate();\n        this.rerender();\n    }\n    onModelInsert = e => {\n        console.log('TableFormController.onModelInsert', this.model.getFullName(), e.key);\n        this.state.activeRowKey = e.key;\n        this.invalidate();\n        this.rerender();\n    }\n    onSelectionChange = i => {\n        // console.log('TableFormController.onSelectionChange', i);\n        const rows = this.model.getDefaultDataSource().getRows();\n        this.state.activeRowKey = this.model.getDefaultDataSource().getRowKey(rows[i]);\n        this.invalidate();\n        this.rerender();\n    }\n    getActiveRowIndex = () => {\n        // console.log('TableFormController.getActiveRowIndex', this.state.activeRowKey);\n        if (this.state.activeRowKey) {\n            const rows = this.model.getDefaultDataSource().getRows();\n            const row = this.model.getDefaultDataSource().getRowByKey(this.state.activeRowKey);\n            if (row) {\n                const i = rows.indexOf(row);\n                if (i === -1) throw new Error('cannot find active row')\n                return i;\n            } else {\n                // console.log('rows:', rows);\n                // console.log('this.rowsByKey:', this.model.getDefaultDataSource().rowsByKey);\n                console.error('no active row in rows');\n            }\n        }\n        return null;\n    }\n    getActiveRow() {\n        if (!this.state.activeRowKey) throw new Error(`${this.model.getFullName()}: no active row key`);\n        return this.model.getDefaultDataSource().getRowByKey(this.state.activeRowKey);\n    }\n    isRowSelected = () => {\n        // console.log('TableFormController.isRowSelected');\n        if (this.state.activeRowKey !== null) {\n            const row = this.model.getDefaultDataSource().getRowByKey(this.state.activeRowKey);\n            if (row) return true;\n        }\n        return false;\n    }\n    onFrameChanged = value => {\n        // console.log('TableFormController.onFrameChanged', parseInt(value));\n        const frame = parseInt(value);\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        this.rerender();\n    }\n    onNextClick = () => {\n        console.log('TableFormController.onNextClick');\n        const frame = this.model.getDefaultDataSource().getFrame() + 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        this.rerender();\n    }\n\n    onPreviousClick = () => {\n        console.log('TableFormController.onPreviousClick');\n        const frame = this.model.getDefaultDataSource().getFrame() - 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        this.rerender();\n    }\n    canPrev() {\n        return this.model.getDefaultDataSource().getFrame() > 1;\n    }\n    canNext() {\n        const ds = this.model.getDefaultDataSource();\n        return ds.getFrame() < ds.getFramesCount();\n    }\n}\n","class SqlDataSource extends DataSource {\n    constructor(data, parent) {\n        super(data, parent);\n        this.frame  = 1;\n        this.count  = data.count !== undefined ? data.count : null;\n        this.lastFrame = 1;\n    }\n\n    init() {\n        super.init();\n        if (this.getAttr('table') !== '') {\n            const table = this.getTable();\n            table.on('update', this.onTableUpdated);\n            table.on('insert', this.onTableInsert);\n            table.on('delete', this.onTableDelete);\n        }\n    }\n\n    deinit() {\n        // console.log('SqlDataSource.deinit', this.getFullName(), this.getTableName());\n        if (this.getAttr('table') !== '') {\n            const table = this.getTable();\n            table.removeListener('update', this.onTableUpdated);\n            table.removeListener('insert', this.onTableInsert);\n            table.removeListener('delete', this.onTableDelete);\n        }\n        super.deinit();\n    }\n\n    getType(columnName) {\n        // console.log('SqlDataSource.getType', columnName);\n        const type = this.getTable().getColumn(columnName).getType();\n        // console.log('type:', type);\n        return type;\n    }\n\n    getDbType(columnName) {\n        return this.getTable().getColumn(columnName).getDbType();\n    }\n\n    async update() {\n        console.log('SqlDataSource.update', this.getFullName());\n        if (this.getAttr('table') === '') throw new Error(`data source has no table: ${this.getFullName()}`);\n        if (this.news[0]) return this.insert(this.news[0]);\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n        const result = await this.getApp().request({\n            action        : 'update',\n            page          : this.getForm().getPage().getName(),\n            form          : this.getForm().getName(),\n            changes       : this.getChangesByKey(),\n        });\n        const [key] = Object.keys(result);\n        if (!key) throw new Error('no updated row');\n        const newValues = result[key];\n        const newKey = this.getRowKey(newValues);\n        this.changes.clear();\n        this.updateRow(key, newValues);\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate({source: this, key: key});\n        }\n        this.getTable().emit('update', {source: this, changes: {[key]: newKey}});\n        return newKey;\n    }\n\n    updateRow(key, newValues) {\n        console.log('SqlDataSource.updateRow', this.getFullName(), key, newValues);\n        if (!key) throw new Error('no key');\n        const row = this.rowsByKey[key];\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key}`);\n        /*const i = this.data.rows.indexOf(row);\n        if (i === -1) {\n            console.log('this.data.rows:', this.data.rows);\n            throw new Error(`${this.getFullName()}: cannot find row with key ${key}`);\n        }*/\n        const newKey = this.getRowKey(newValues);\n\n        // copy new values to original row object\n        for (const column in row) row[column] = newValues[column];\n        if (key !== newKey) {\n            delete this.rowsByKey[key];\n            this.rowsByKey[newKey] = row;\n        }\n        // console.log(`key: ${key} to ${newKey}`);\n        // console.log('this.rowsByKey:', this.rowsByKey);\n        // console.log('this.data.rows:', this.data.rows);\n\n        return {source: this, key};\n    }\n\n    getTable() {\n        if (!this.getAttr('table')) throw new Error(`${this.getFullName()}: table attr empty`);\n        return this.getDatabase().getTable(this.getAttr('table'));\n    }\n\n    getDatabase() {\n        if (!this.getAttr('database')) throw new Error(`${this.getFullName()}: database attr empty`);\n        return this.getApp().getDatabase(this.getAttr('database'));\n    }\n\n    onTableUpdated = async (e) => {\n        console.log('SqlDataSource.onTableUpdated', this.getFullName(), this.getTableName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdated`);\n        if (e.source === this) {\n            // console.error('onTableUpdated stop self update', this.getFullName());\n            return;\n        }\n        // console.log('changes:', e.changes);\n        if (!Object.keys(e.changes).length) throw new Error(`${this.getFullName()}: no changes`);\n        const key = Object.keys(e.changes)[0];\n\n        // check if updated row exists in this ds\n        if (this.rowsByKey[key]) {\n            const newKey = e.changes[key];\n            // console.log(`key: ${key} to ${newKey}`);\n            const keyParams = DataSource.keyToParams(newKey);\n            const result = await this.selectSingle(keyParams);\n            this.updateRow(key, result.row);\n            if (this.parent.onDataSourceUpdate) {\n                this.parent.onDataSourceUpdate({source: this, key: key});\n            }\n        }\n    }\n\n    onTableInsert = async (e) => {\n        console.log('SqlDataSource.onTableInsert', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableInsert`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n        await this.refill();\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n    }\n\n    onTableDelete = async (e) => {\n        console.log('SqlDataSource.onTableDelete', this.getFullName(), this.getTableName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self delete', this.getFullName());\n            return;\n        }\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n    }\n\n    getPageParams() {\n        const page = this.getPage();\n        return page ? page.getParams() : {};\n    }\n\n    async refresh() {\n        console.log('SqlDataSource.refresh', this.getFullName());\n        await this.refill();\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh({source: this});\n        }\n    }\n\n    async refill() {\n        if (this.isChanged()) throw new Error(`cannot refill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame : this.frame} : {});\n        this.count = data.count;\n        this.setRows(data.rows);\n        this.lastFrame = 1;\n    }\n\n    async fill(frame) {\n        if (this.isChanged()) throw new Error(`cannot fill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame} : {});\n        this.count = data.count;\n        this.addRows(data.rows);\n    }\n\n    async more() {\n        if (!this.hasMore()) throw new Error(`${this.getFullName()}: no more rows`);\n        this.lastFrame++;\n        await this.fill(this.lastFrame);\n    }\n\n    async select(params = {}) {\n        console.log('SqlDataSource.select', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action        : 'select',\n            parentPageName: page ? page.getParentPageName() : null,\n            page          : page ? page.getName()           : null,\n            form          : form ? form.getName()           : null,\n            ds            : this.getName(),\n            params        : Helper.encodeObject({\n                ...this.getPageParams(),\n                ...params,\n            })\n        });\n        if (!(data.rows instanceof Array)) throw new Error('rows must be array');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }\n\n    async insert(row) {\n        console.log('SqlDataSource.insert', this.getTableName(), row);\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to insert');\n\n        const result = await this.getApp().request({\n            action        : 'insert',\n            page          : this.getForm().getPage().getName(),\n            form          : this.getForm().getName(),\n            parentPageName: this.getPage().getParentPageName(),\n            params        : this.getRowWithChanges(row),\n        });\n\n        // key & values\n        const [key] = Object.keys(result.insert[table]);\n        if (!key) throw new Error('no inserted row key');\n        const values = result.insert[table][key];\n        for (const column in values) row[column] = values[column];\n        // console.log('key:', key);\n        // console.log('row:', row);\n\n        // add new row to rows\n        this.news.splice(this.news.indexOf(row), 1);\n        // console.log('this.news:', this.news);\n        this.changes.clear();\n        this.addRow(row);\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert({source: this, key});\n        }\n        this.getDatabase().emitResult(result, this);\n        return key;\n    }\n\n    addRow(row) {\n        this.rows.push(row);\n        const key = this.getRowKey(row);\n        this.rowsByKey[key] = row;\n    }\n\n    async delete(key) {\n        console.log('SqlDataSource.delete:', this.getFullName(), key);\n        if (!this.getAttr('table')) {\n            throw new Error(`no table in data source: ${this.getFullName()}`);\n        }\n        const page = this.getPage();\n        const result = await this.getApp().request({\n            action        : '_delete',\n            page          : this.getForm().getPage().getName(),\n            form          : this.getForm().getName(),\n            params        : Helper.encodeObject({key}),\n            parentPageName: page ? page.getParentPageName() : null\n        });\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete({source: this, key: key});\n        }\n        this.getDatabase().emitResult(result, this);\n        return result;\n    }\n\n    getTableName() {\n        if (!this.getAttr('database')) throw new Error('no database');\n        if (!this.getAttr('table')) throw new Error('no table');\n        return `${this.getAttr('database')}.${this.getAttr('table')}`;\n    }\n\n    getFramesCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        if (this.count === 0) return 1;\n        if (this.getLimit()) return Math.ceil(this.count / this.getLimit());\n        return 1;\n    }\n    getLimit() {\n        if (this.getAttr('limit')) return parseInt(this.getAttr('limit'));\n        return null;\n    }\n    getCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        return this.count;\n    }\n    getRowsLength() {\n        return this.rows.length;\n    }\n    getFrame() {\n        return this.frame;\n    }\n    getLastFrame() {\n        return this.lastFrame;\n    }\n    setFrame(frame) {\n        this.frame = frame;\n    }\n    hasMore() {\n        return this.lastFrame < this.getFramesCount();\n    }\n}\n","class RowForm extends Form {\n    init() {\n        super.init();\n        if (this.isNewMode()) {\n            this.getDefaultDataSource().newRow(this.createRow());\n        }\n        this.fillParams(this.getRow()); // dump row values to page params\n    }\n\n    isNewMode() {\n        const newMode = this.getAttr('newMode');\n        if (newMode ===  'true') return  true;\n        if (newMode === 'false') return false;\n        return this.getPage().isNewMode();\n    }\n\n    fillParams(row) {\n        for (const field of this.fields) {\n            field.valueToPageParams(row);\n        }\n    }\n\n    onDataSourceUpdate(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceUpdate(e);\n    }\n\n    onDataSourceInsert(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceInsert(e);\n    }\n\n    getRow(withChanges) {\n        return this.getDefaultDataSource().getSingleRow(withChanges);\n    }\n\n    getKey() {\n        // console.log('RowForm.getKey', this.getFullName());\n        const dataSource = this.getDefaultDataSource();\n        if (dataSource.getClassName() === 'SqlDataSource') {\n            const row = this.getRow();\n            return dataSource.getRowKey(row);\n        }\n        return null;\n    }\n\n    createRow() {\n        const row = {};\n        this.fillDefaultValues(row);\n        return row;\n    }\n\n    discard(fields) {\n        console.log('RowForm.discard', fields);\n        if (this.getDefaultDataSource().isChanged()) {\n            this.getDefaultDataSource().discard();\n            fields.forEach(name => {\n                this.getField(name).valueToPageParams(this.getRow())\n            });\n        }\n    }\n\n}\n","class TableForm extends Form {\n\n}\n","class CheckBoxField extends Field {\n\n}\n","class ComboBoxField extends Field {\n\n    getDisplayValue(row) {\n        let value = null;\n        if (row[this.data.displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[this.data.displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[this.data.displayColumn]);\n                throw err;\n            }\n        } else {\n            value = this.data.displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        if (!row[this.data.valueColumn]) {\n            throw new Error('no valueColumn in ComboBox data source');\n        }\n        return Helper.decodeValue(row[this.data.valueColumn]);\n    }\n\n    getComboBoxDataSource() {\n        const name = this.data.dataSourceName;\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        } else if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        } else if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        return null;\n    }\n\n    findRowByRawValue(rawValue) {\n        return this.getComboBoxDataSource().getRows().find(row => row[this.data.valueColumn] === rawValue);\n    }\n}\n","class DatePickerField extends Field {\n    getFormat() {\n        return this.data.format;\n    }\n}\n","class DateTimeField extends Field {\n    getFormat() {\n        return this.data.format;\n    }\n}","class FileField extends Field {\n}\n","class LabelField extends Field {\n}\n","class LinkField extends Field {\n}\n","class ImageField extends Field {\n}\n","class TextAreaField extends Field {\n    getRows() {\n        return this.data.rows;\n    }\n    getCols() {\n        return this.data.cols;\n    }\n}\n","class TextBoxField extends Field {}","class TimeField extends Field {\n\n}\n","class RowFormCheckBoxFieldController extends RowFormFieldController {\n    getValueForView() {\n        return this.getValue();\n    }\n    setValueFromView(viewValue) {\n        this.setValue(viewValue);\n    }\n\n    getViewClass() {\n        return RowFormCheckBoxFieldView;\n    }\n}\n","class RowFormComboBoxFieldController extends RowFormFieldController {\n    getItems() {\n        return this.getRows().map(row => ({\n            value: this.model.getValueValue(row).toString(),\n            title: this.model.getDisplayValue(row).toString()\n        }));\n    }\n    getRows() {\n        return this.model.getComboBoxDataSource().getRows();\n    }\n    getViewClass() {\n        return RowFormComboBoxFieldView;\n    }\n    getPlaceholder() {\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        return ApplicationController.isInDebugMode() ? '[null]' : null;\n    }\n}\n","class RowFormDatePickerFieldController extends RowFormFieldController {\n    getViewClass() {\n        return RowFormDatePickerFieldView;\n    }\n    getValueForView() {\n        return this.getValue();\n    }\n    setValueFromView(viewValue) {\n        this.setValue(viewValue);\n    }\n}\n","class RowFormDateTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.view2 = null;\n        this.defaultValue = 0;\n        this.state.parseError2 = null;\n        this.state.error2 = null;\n    }\n    getViewClass() {\n        return RowFormDateTimeFieldView;\n    }\n    getValueForView() {\n        return this.getValue();\n    }\n    getValueForTime() {\n        // console.log('RowFormDateTimeFieldController.getValueForTime', this.model.getFullName(), this.defaultValue, TimeBox.getStringValue(this.defaultValue));\n        const date = this.getValue();\n        if (date) {\n            const value = date.getHours() * 60 + date.getMinutes();\n            // console.log('value:', value);\n            if (value !== this.defaultValue) {\n                // console.log('not equal to default value', value, this.defaultValue);\n                return value;\n            }\n        }\n        return null;\n    }\n    setValueFromView(viewValue) {\n        if (viewValue === null) {\n            this.state.parseError2 = null;\n            this.resetErrors2();\n            if (this.view2) this.view2.setValue(null);\n        } else {\n            const [h, m] = TimeBox.splitTime(this.defaultValue);\n            viewValue.setHours(h, m);\n        }\n        this.setValue(viewValue);\n    }\n    onView2Create = view2 => {\n        // console.log('RowFormDateTimeFieldController.onView2Create', view2);\n        this.view2 = view2;\n    };\n    _onChange(viewValue) {\n        // console.log('RowFormDateTimeFieldController._onChange', this.view2);\n        if (viewValue !== null) {\n            setTimeout(() => {\n                const input = this.view2.getInput();\n                input.focus();\n                input.setSelectionRange(0, input.value.length);\n            }, 0);\n        }\n    }\n    onChange2 = (viewValue, fireEvent = true) => {\n        // console.log('RowFormDateTimeFieldController.onChange2', viewValue);\n        this.resetErrors2();\n        try {\n            this.setValueFromView2(viewValue);\n        } catch (err) {\n            console.log(`${this.model.getFullName()}: cannot parse time: ${err.message}`);\n            this.state.parseError2 = err.message;\n        }\n        if (!this.state.parseError2) {\n            this.validate2();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: viewValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    };\n    onBlur2 = (viewValue, fireEvent = false) => {\n        // console.log('RowFormDateTimeFieldController.onBlur2', viewValue);\n        if (!this.isEditable()) return;\n        this.validate2();\n        if (this.isValid()) {\n            this.copyValueToModel();\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: viewValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n        }\n        this.parent.onFieldChange({source: this});\n    };\n    getPlaceholder2() {\n        return TimeBox.getStringValue(this.defaultValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue(defaultValue) {\n        // console.log('RowFormDateTimeFieldController.setDefaultValue', this.view2 ? this.view2.getValue() : null);\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24 * 60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n        if (this.view2 && this.view2.getValue() === null && this.state.value) {\n            this.setValue2(null);\n        }\n    }\n    setValueFromView2(viewValue) {\n        if (isNaN(viewValue)) throw new Error('wrong time');\n        this.setValue2(viewValue);\n    }\n    setValue2(viewValue) {\n        const value = viewValue !== null ? viewValue : this.defaultValue;\n        const [h, m] = TimeBox.splitTime(value);\n        this.state.value.setHours(h, m);\n    }\n    validate2() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        this.state.error2 = this.getError2();\n    }\n    getError2() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.view2) {\n            try {\n                const viewValue = this.view2.getValue();\n            } catch (err) {\n                return `can't parse time: ${err.message}`;\n            }\n        }\n\n        return null;\n    }\n    isParseError2() {\n        return this.state.parseError2 !== null;\n    }\n    resetErrors2() {\n        this.setError2(null);\n        this.state.parseError2 = null;\n    }\n    setError2(error2) {\n        this.state.error2 = error2;\n    }\n    getErrorMessage2() {\n        if (this.state.parseError2) {\n            return this.state.parseError2;\n        }\n        return this.state.error2;\n    }\n    isValid2() {\n        return this.state.error2 === null;\n    }\n    refill() {\n        // console.log('RowFormDateTimeFieldController.refill');\n        if (!this.view2) return;\n        super.refill();\n        this.view2.setValue(this.getValueForTime());\n        this.resetErrors2();\n        this.refreshChanged();\n    }\n    isParseError() {\n        return super.isParseError() || this.isParseError2();\n    }\n    isValid() {\n        return super.isValid() && this.isValid2();\n    }\n    getErrorMessage() {\n        if (super.getErrorMessage() === null && this.getErrorMessage2() === null) return null;\n        return [\n            ...(super.getErrorMessage() ? [super.getErrorMessage()] : []),\n            ...(this.getErrorMessage2() ? [this.getErrorMessage2()] : [])\n        ].join(', ');\n    }\n}\n","class RowFormFileFieldController extends RowFormFieldController {\n    getViewClass() {\n        return RowFormFileFieldView;\n    }\n}\n","class RowFormImageFieldController extends RowFormFieldController {\n    getViewClass() {\n        return RowFormImageFieldView;\n    }\n}\n","class RowFormTextAreaFieldController extends RowFormFieldController {\n    getViewClass() {\n        return RowFormTextAreaFieldView;\n    }\n}\n","class RowFormLinkFieldController extends  RowFormFieldController {\n    getViewClass() {\n        return RowFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('RowFormLinkFieldController.onClick', e);\n        this.emit({source: this});\n    }\n}\n","class RowFormTextBoxFieldController extends RowFormFieldController {\n    getViewClass() {\n        return RowFormTextBoxFieldView;\n    }\n}\n","class RowFormTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.defaultValue = null;\n    }\n    getViewClass() {\n        return RowFormTimeFieldView;\n    }\n    getValueForView() {\n        return this.getValue();\n    }\n    setValueFromView(viewValue) {\n        if (isNaN(viewValue)) throw new Error('wrong time');\n        this.setValue(viewValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue(defaultValue) {\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24*60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n    }\n    getPlaceholder() {\n        // console.log('CarReservefromTimeController.getPlaceholder', this.defaultValue);\n        if (this.defaultValue !== null) return TimeBox.getStringValue(this.defaultValue);\n        return super.getPlaceholder();\n    }\n}\n","class TableFormCheckBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return TableFormCheckBoxFieldView;\n    }\n    getValueForView(row) {\n        return this.model.getValue(row);\n    }\n}\n","class TableFormComboBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return TableFormComboBoxFieldView;\n    }\n    getValueForView(row) {\n        const rawValue = this.model.getRawValue(row);\n        if (rawValue === undefined || rawValue === 'null') return '';\n        const cbRow = this.model.findRowByRawValue(rawValue);\n        if (cbRow) {\n            return this.valueToString(this.model.getDisplayValue(cbRow));\n        }\n        return `[no row for id: ${rawValue}]`;\n    }\n\n\n    /*init() {\n        //console.log('TableFormComboBoxFieldController.init: ' + this.model.getFullName());\n        super.init();\n        if (!this.model.data.dataSourceName) {\n            throw new Error(`[${this.model.getFullName()}] no dataSourceName`);\n        }\n        const dataSource = this.model.getComboBoxDataSource();\n        if (!dataSource) {\n            throw new Error(`[${this.model.getFullName()}] cannot find data source '${this.model.data.dataSourceName}'`);\n        }\n        dataSource.on('update', this.listeners.rowUpdate = this.onRowUpdate.bind(this));\n        dataSource.on('removeRow', this.listeners.removeRow = this.onRemoveRow.bind(this));\n        dataSource.on('newRow'   , this.listeners.newRow    = this.onNewRow.bind(this));\n        dataSource.on('moveRow'  , this.listeners.moveRow   = this.onMoveRow.bind(this));\n    }*/\n\n    /*deinit(row, view) {\n        //console.log('TableFormComboBoxFieldController.deinit: ' + this.model.getFullName());\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.off('update', this.listeners.rowUpdate);\n        dataSource.off('removeRow', this.listeners.removeRow);\n        dataSource.off('newRow'   , this.listeners.newRow);\n        dataSource.off('moveRow'  , this.listeners.moveRow);\n        // ReactDOM.unmountComponentAtNode(view);\n        super.deinit();\n    }*/\n\n    /*getItems() {\n        return this.model.getComboBoxDataSource().getRows().map(row => ({\n            value: this.model.getValueValue(row),\n            title: this.model.getDisplayValue(row)\n        }));\n    }*/\n\n    /*getStringValue(view) {\n        if (this.model.getForm().getClassName() === 'RowForm') {\n            return this.comboBox.getValue();\n        }\n        return super.getStringValue(view);\n    }*/\n\n    /*setValue(value, view) {\n        // console.log('TableFormComboBoxFieldController.setValue', this.model.getFullName(), value);\n        if (this.model.getForm().getClassName() === 'RowForm') {\n            throw new Error('TableFormComboBoxFieldController.setValue not implemented');\n        } else if (this.model.getForm().getClassName() === 'TableForm') {\n            view.firstElementChild.value = value;\n            if (value) {\n                const key = JSON.stringify([value]);\n                const row = this.model.getComboBoxDataSource().getRow(key);\n                if (row) {\n                    view.firstElementChild.innerHTML = this.model.getDisplayValue(row);\n                } else {\n                    view.firstElementChild.innerHTML = '{id: ' + value + '}';\n                }\n            } else {\n                view.firstElementChild.innerHTML = '';\n            }\n        }\n    }*/\n\n    /*_fillSelectOptions(view) {\n        const nullOption = document.createElement('option');\n        /!*if (this.model.data.notNull === 'true') {\n            nullOption.innerHTML = `-- ${this.model.getApp().data.text.field.selectValue} --`;\n        }*!/\n        view.firstElementChild.appendChild(nullOption);\n        const rows = this.model.getComboBoxDataSource().getRows();\n        for (let i = 0; i < rows.length; i++) {\n            this._createOption(view, i);\n        }\n    }*/\n\n    /*_createOption(view, i) {\n        const dataSource = this.model.getComboBoxDataSource();\n        const row = dataSource.getRowByIndex(i);\n        const key = dataSource.getRowKey(row);\n        const option = document.createElement('option');\n        option.innerHTML = this.model.getDisplayValue(row);\n        option.dbRow     = row;\n        option.value     = JSON.parse(key)[0];\n        FrontHostApp.insertNewNodeAt(view.firstElementChild, option, i + 1); // at 0 position always null-value\n        view.keyToOption[key] = option;\n        return option;\n    }*/\n\n    /*onRowUpdate(ea) {\n        //console.log('TableFormComboBoxFieldController.onRowUpdate');\n        //console.log(ea);\n        const key = ea.key;\n        if (this.model.getForm().getClassName() === 'RowForm') {\n            for (const view in this.views.values()) {\n                const option = view.keyToOption[key];\n                this._refillRow(option);\n            }\n        }\n    }*/\n\n    /*_refillRow(option) {\n        option.innerHTML = this.model.getDisplayValue(option.dbRow);\n    }*/\n\n    /*onRemoveRow(ea) {\n        const key = ea.key;\n        switch (this.model.getForm().getClassName()) {\n            case 'RowForm':\n                for (const k in this.views) {\n                    const view = this.views[k];\n                    const option = view.keyToOption[key];\n                    view.firstElementChild.removeChild(option);\n                    delete view.keyToOption[key];\n                }\n                break;\n        }\n    }*/\n\n    /*onNewRow(ea) {\n        //console.log('TableFormComboBoxFieldController.onNewRow');\n        //console.log(ea);\n        switch (this.model.getForm().getClassName()) {\n            case 'RowForm':\n                const key = this.model.getForm().getDefaultDataSource().getRowKey(this.model.getForm().row);\n                const view = this.views[key];\n                this._createOption(view, ea.i);\n                break;\n        }\n    }*/\n\n    /*onMoveRow(ea) {\n        const newIndex = ea.newIndex;\n        const oldIndex = ea.oldIndex;\n        const key      = ea.key;\n        switch (this.model.getForm().getClassName()) {\n            case 'RowForm':\n                for (const k in this.views) {\n                    const view = this.views[k];\n                    const option = view.keyToOption[key];\n                    FrontHostApp.moveNode(view.firstElementChild, option, oldIndex, newIndex + 1);\n                    this._refillRow(option);\n                }\n                break;\n        }\n    }*/\n}\n","class TableFormDatePickerFieldController extends TableFormFieldController {\n    getViewClass() {\n        return TableFormDatePickerFieldView;\n    }\n    getValueForView(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.model.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\n","class TableFormDateTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return TableFormDatePickerFieldView;\n    }\n    getValueForView(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.model.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\n","class TableFormLinkFieldController extends TableFormFieldController {\n    getViewClass() {\n        return TableFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('TableFormLinkFieldController.onClick', e);\n        this.emit('click', {source: this});\n    }\n}\n","class TableFormTextAreaFieldController extends TableFormFieldController {\n\n}\n","class TableFormTextBoxFieldController extends TableFormFieldController {\n    /*beginEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'text';\n        view.firstElementChild.contentEditable = true;\n        const range = document.createRange();\n        range.selectNodeContents(view.firstElementChild);\n        window.getSelection().removeAllRanges();\n        window.getSelection().addRange(range);\n        view.firstElementChild.focus();\n        return true;\n    }*/\n\n    /*endEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'none';\n        view.firstElementChild.contentEditable = false;\n    }*/\n    /*getViewClass() {\n        return TableFormTextBoxFieldView;\n    }*/\n}\n","class TableFormTimeFieldController extends TableFormFieldController {\n    /*getViewClass() {\n        return TableFormTextBoxFieldView;\n    }*/\n    getValueForView(row) {\n        const value = this.model.getValue(row);\n        return TimeBox.getStringValue(value);\n    }\n}\n"]}