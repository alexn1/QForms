{"version":3,"sources":["EditorFrontHostApp/EditorFrontHostApp.js","FormWizard/FormWizard.js","ModalController/ModalController.js","ModelController/ModelController.js","Model/Model.js","FormWizard/MySqlFormWizard/MySqlFormWizard.js","FormWizard/PostgreSqlFormWizard/PostgreSqlFormWizard.js","ModalController/ChangeClassController/ChangeClassController.js","ModalController/NewActionController/NewActionController.js","ModalController/NewColumnController/NewColumnController.js","ModalController/NewDatabaseController/NewDatabaseController.js","ModalController/NewDataSourceController/NewDataSourceController.js","ModalController/NewFieldController/NewFieldController.js","ModalController/NewFormController/NewFormController.js","ModalController/NewFormFromTableController/NewFormFromTableController.js","ModalController/NewPageController/NewPageController.js","ModalController/NewParamController/NewParamController.js","ModalController/NewKeyColumnController/NewKeyColumnController.js","ModalController/NewTableController/NewTableController.js","ModelController/ActionController/ActionController.js","ModelController/DocumentController/DocumentController.js","ModelController/ColumnController/ColumnController.js","ModelController/KeyColumnController/KeyColumnController.js","ModelController/PageLinkController/PageLinkController.js","ModelController/ParamController/ParamController.js","Model/Action/Action.js","Model/Application/Application.js","Model/Column/Column.js","Model/DataSource/DataSource.js","Model/Database/Database.js","Model/Field/Field.js","Model/Form/Form.js","Model/KeyColumn/KeyColumn.js","Model/Page/Page.js","Model/PageLink/PageLink.js","Model/Param/Param.js","Model/Table/Table.js","ModelController/DocumentController/DataSourceController/DataSourceController.js","ModelController/DocumentController/DatabaseController/DatabaseController.js","ModelController/DocumentController/TableController/TableController.js","ModelController/DocumentController/VisualController/VisualController.js","ModelController/DocumentController/VisualController/ApplicationController/ApplicationController.js","ModelController/DocumentController/VisualController/FieldController/FieldController.js","ModelController/DocumentController/VisualController/PageController/PageController.js","ModelController/DocumentController/VisualController/FormController/FormController.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpzjNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACthxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjxfile":"editor.76e727bdb0a9fda9d1b197347e4e70f7.js","sourcesContent":["class EditorFrontHostApp extends FrontHostApp {\n    constructor(data, runAppLink) {\n        console.log('EditorFrontHostApp.constructor');\n        super(data);\n        EditorFrontHostApp.editorApp = this;\n        // this.data = data;\n        this.runAppLink = runAppLink;\n        this.view = null;\n        this.actionList = null;\n        this.treeWidget2 = null;\n        this.pg = null;                 // property grid\n        this.items = null;              // treeWidget2 items\n        this.tabWidget = null;\n        this.documents = [];\n        this.modal = null;\n    }\n\n    run() {\n        console.log('EditorFrontHostApp.run', this.data);\n\n        // app\n        const app = new Application(this.data);\n        app.init();\n        // console.log('app:', app);\n\n        // application controller\n        const applicationController = new ApplicationController(app, this);\n        applicationController.init();\n        this.items = [applicationController];\n\n        // view\n        this.view = Helper.createReactComponent(document.querySelector('.editor__root'), EditorFrontHostAppView, {ctrl: this});\n    }\n\n    deinit() {\n    }\n    onItemOpen2 = async item => {\n        console.log('EditorFrontHostApp.onItemOpen2', item.getTitle());\n        // console.log('parent:', item.view.parent);\n        if (item instanceof PageLinkController && !item.hasPage()) {\n            await item.loadPage();\n        }\n    }\n    onItemSelect2 = async item => {\n        console.log('EditorFrontHostApp.onItemSelect2', item ? item.getTitle() : null);\n        if (item instanceof ModelController) {\n            if (item instanceof PageLinkController && !item.hasPage()) {\n                await item.loadPage();\n            }\n            this.fillActions(item);\n            this.fillPropertyGrid(item);\n        } else {\n            this.clearActions();\n            this.endEdit();\n        }\n    }\n\n    fillPropertyGrid(ctrl) {\n        const propList = ctrl.getPropList();\n        this.beginEdit(propList['list'], propList['options']);\n    }\n\n    onPropertyGrid2Change = (name, value) => {\n        console.log('EditorFrontHostApp.onPropertyGrid2Change', name, value);\n        const controller = this.treeWidget2.getSelectedItem();\n        // console.log('controller', controller);\n        controller.setProperty(name, value);\n    }\n\n    beginEdit(obj, options) {\n        console.log('EditorFrontHostApp.beginEdit', obj, options);\n        this.pg.setState({object: {obj, options}});\n    }\n\n    endEdit() {\n        console.log('EditorFrontHostApp.endEdit');\n        this.pg.setState({object: null});\n    }\n\n    static async fetchPageData(fileName) {\n        console.log('EditorFrontHostApp.fetchPageData', fileName);\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'get',\n            params    : Helper.encodeObject({fileName})\n        });\n    }\n\n    fillActions(item) {\n        // console.log('EditorFrontHostApp.fillActions');\n        this.actionList.setState({item});\n    }\n    clearActions() {\n        // console.log('EditorFrontHostApp.clearActions');\n        this.actionList.setState({item: null});\n    }\n\n    onItemDoubleClick2 = async item => {\n        console.log('EditorFrontHostApp.onItemDoubleClick2', item.getTitle());\n        const controller = item instanceof PageLinkController ? item.pageController : item;\n        if (!controller || !(controller instanceof DocumentController)) return;\n        await this.openDocument(controller);\n    }\n    async openDocument(controller) {\n        console.log('EditorFrontHostApp.openDocument', controller.getTitle());\n        let document = this.findDocument(controller);\n        if (!document) {\n            document = await controller.createDocument();\n            this.documents.push(document);\n            // console.log('document:', document);\n        }\n        this.tabWidget.state.active = this.documents.indexOf(document);\n        await this.view.rerender();\n    }\n    findDocument(controller) {\n        return this.documents.find(document => document.controller === controller) || null;\n    }\n    onDocumentClose = i => {\n        console.log('EditorFrontHostApp.onDocumentClose', i, this.tabWidget.state.active);\n        const document = this.documents[i];\n        const activeDocument = this.documents[this.tabWidget.state.active];\n        this.documents.splice(i, 1);\n        document.controller.onDocumentClose();\n        if (document === activeDocument) {\n            if (this.documents.length) {\n                if (this.tabWidget.state.active >= this.documents.length) {\n                    this.tabWidget.state.active = this.documents.length - 1;\n                }\n            } else {\n                this.tabWidget.state.active = null;\n            }\n        } else {\n            this.tabWidget.state.active = this.documents.indexOf(activeDocument);\n        }\n        this.view.rerender();\n    }\n    async openModal(modalController) {\n        console.log('EditorFrontHostApp.openModal');\n        this.modal = modalController;\n        await this.view.rerender();\n    }\n    async onModalClose() {\n        console.log('EditorFrontHostApp.onModalClose');\n        this.modal = null;\n        await this.view.rerender();\n    }\n    onActionClick = async actionName => {\n        console.log('EditorFrontHostApp.onActionClick', actionName);\n        const item = this.treeWidget2.getSelectedItem();\n        // console.log('item', item);\n        const controller = item instanceof PageLinkController ? item.pageController : item;\n        await controller.doAction(actionName);\n    }\n}\n\n","class FormWizard {\n    static create(params) {\n        console.log('FormWizard.create', params);\n        switch (params.model.database.getClassName()) {\n            case 'MySqlDatabase'     : return new MySqlFormWizard(params);\n            case 'PostgreSqlDatabase': return new PostgreSqlFormWizard(params);\n            default: throw new Error(`unknown database class: ${params.model.database.getClassName()}`);\n        }\n    }\n\n    constructor(params) {\n        console.log('FormWizard.constructor', params);\n        this.params        = params;\n        this.model         = params.model;\n        this.databaseName  = params.model.database.getName();\n        this.tableName     = params.model.getName();\n        this.tableColumns  = Object.keys(params.model.data.columns).map(name => params.model.data.columns[name]['@attributes']);\n    }\n\n    getDataSources() {\n        return {\n            default: {\n                class     : 'SqlDataSource',\n                name      : 'default',\n                database  : this.databaseName,\n                table     : this.tableName,\n                limit     : this.params.className === 'TableForm' ? '100' : '',\n                countQuery   : this.getCountQuery(),\n                singleQuery  : this.getSingleQuery(),\n                multipleQuery: this.getMultipleQuery()\n            }\n        };\n    }\n\n    getFieldClass(column) {\n        if (column.type === 'date') return 'DatePickerField';\n        if (column.type === 'boolean') return 'CheckBoxField';\n        if (this.params.className === 'RowForm') {\n            if (column.dbType === 'text') {\n                return 'TextAreaField';\n            }\n            if (column.dbType === 'json') {\n                return 'TextAreaField';\n            }\n        }\n        return 'TextBoxField';\n    }\n\n    getField(column) {\n        // console.log('FormWizard.getField', column);\n        let field = {\n            class: this.getFieldClass(column),\n            name : column.name\n        };\n        if (column.caption) {\n            field.caption = column.caption;\n        }\n        if (column.key === 'true') {\n            if (column.auto === 'false') {\n                field.notNull = 'true';\n            }\n        } else {\n            if (column.nullable === 'false') {\n                field.notNull = 'true';\n                field.readOnly = 'false';\n            }\n        }\n        if (column.auto === 'true') {\n            field.readOnly = 'true';\n        }\n        return field;\n    }\n\n    getFields() {\n        let fields = {};\n        this.getColumns().forEach(column => {\n            fields[column.name] = this.getField(column);\n        });\n        /*for (let i = 0; i < this.tableColumns.length; i++) {\n            const column = this.tableColumns[i];\n            fields[column.name] = this.getField(column);\n        }*/\n        return fields;\n    }\n\n    getColumns() {\n        return this.tableColumns.filter(column => {\n            if (this.params.className === 'TableForm') {\n                if (column.dbType === 'text') return false;\n                if (column.dbType === 'bytea') return false;\n            }\n            return true;\n        });\n    }\n\n    getFormParams() {\n        return {\n            name       : this.params.formName,\n            caption    : this.params.formCaption,\n            class      : this.params.className,\n            dataSources: this.getDataSources(),\n            fields     : this.getFields()\n        };\n    }\n}\n","class ModalController {\n    constructor(options) {\n        this.options = options;\n    }\n    onClose = async e => {\n        console.log('ModalController.onClose');\n        await this.close();\n    }\n    onCreate = async values => {\n        console.log('ModalController.onCreate', values);\n        await this.close();\n        if (this.options.onCreate) {\n            await this.options.onCreate(values);\n        }\n    }\n    async close() {\n        await EditorFrontHostApp.editorApp.onModalClose();\n    }\n    getViewClass() {\n        throw new Error('ModalController.getViewClass not implemented');\n    }\n}\n","class ModelController /*extends EventEmitter*/ {\n    constructor(model, parent = null) {\n        // super();\n        this.model = model;\n        this.parent = parent;\n        this.view = null;\n    }\n    init() {\n    }\n    getTitle() {\n        return this.model.getName();\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n        };\n    }\n    getPropList() {\n        return {\n            list   : this.model.data['@attributes'],\n            options: {}\n        };\n    }\n    async setProperty(name, value) {\n        await this.model.setValue(name, value);\n    }\n    /*getObject(col, name) {\n        return this[col].find(obj => obj.model.getName() === name);\n    }*/\n    async doAction(name) {\n        throw new Error(`${this.constructor.name}.doAction('${name}') not implemented`);\n    }\n    getDocumentViewClass() {\n        console.log(`${this.constructor.name}.getDocumentViewClass`);\n        return null;\n    }\n    moveColItem(colName, item, offset) {\n        Helper.moveArrItem(this[colName], item, offset);\n    }\n}\n","class Model {\n\n    constructor(data, parent = null) {\n        if (!data) throw new Error('no data');\n        this.data   = data;\n        this.parent = parent;\n    }\n\n    init() {\n    }\n\n    getClassName() {\n        return this.data['@class'];\n    }\n\n    getName() {\n        return this.getAttr('name');\n    }\n\n    getFullName(splitter = '.') {\n        let name;\n        if (this.form) {\n            name = `${this.form.page.getName()}${splitter}${this.form.getName()}${splitter}${this.getName()}`;\n        } else if (this.page) {\n            name = `${this.page.getName()}${splitter}${this.getName()}`;\n        } else {\n            name = this.getName();\n        }\n        return name;\n    }\n\n    async setValue(name, value) {\n        throw new Error(`${this.constructor.name}.setValue not implemented`);\n    }\n\n    getAttr(name) {\n        return this.data['@attributes'][name];\n    }\n    getAttributes() {\n        return this.data['@attributes'];\n    }\n\n    setAttr(name, value) {\n        this.data['@attributes'][name] = value;\n    }\n\n    /*getObject(col, name) {\n        return this[col].find(obj => obj.getName() === name);\n    }*/\n    createDataSource(data) {\n        const dataSource = new DataSource(data, this);\n        dataSource.init();\n        this.dataSources.push(dataSource);\n        return dataSource;\n    }\n    removeDataSource(dataSource) {\n        // console.log('Model.removeDataSource', dataSource.getName());\n        const i = this.dataSources.indexOf(dataSource);\n        if (i === -1) throw new Error('no such dataSource');\n        this.dataSources.splice(i, 1);\n    }\n    createAction(data) {\n        const action = new Action(data, this);\n        action.init();\n        this.actions.push(action);\n        return action;\n    }\n    removeAction(action) {\n        // console.log('Model.removeField', action.getName());\n        const i = this.actions.indexOf(action);\n        if (i === -1) throw new Error('no such action');\n        this.actions.splice(i, 1);\n    }\n\n}\n","class MySqlFormWizard extends FormWizard {\n\n    getSingleQuery() {\n        const columns = this.tableColumns.map(column => column.name);\n        return 'select\\n{columns}\\nfrom `{table}`\\nwhere id = {key}'\n            .replace('{table}',   this.tableName)\n            .replace('{columns}', columns.map(column => {return '    `' + column + '`';}).join(',\\n'));\n    }\n\n    getMultipleQuery() {\n        const columns = this.tableColumns.map(column => column.name);\n        return 'select\\n{columns}\\nfrom `{table}`\\nlimit {offset}, {limit}'\n            .replace('{table}',   this.tableName)\n            .replace('{columns}', columns.map(column => {return '    `' + column + '`';}).join(',\\n'));\n    }\n\n    getCountQuery() {\n        console.log('MySqlFormWizard.getCountQuery');\n        return 'select count(*) from `{table}`'.replace('{table}', this.tableName);\n    }\n}\n","class PostgreSqlFormWizard extends FormWizard {\n\n    getSingleQuery() {\n        console.log('PostgreSqlFormWizard.getSingleQuery');\n        const columns = this.getColumns().map(column => column.name);\n        return 'select\\n{columns}\\nfrom \"{table}\"\\nwhere id = {key}'\n            .replace('{table}',   this.tableName)\n            .replace('{columns}', columns.map(column => `    \"${column}\"`).join(',\\n'));\n    }\n\n    getMultipleQuery() {\n        console.log('PostgreSqlFormWizard.getMultipleQuery');\n        const columns = this.getColumns().map(column => column.name);\n        const _columns = columns.map(column => `    \"${column}\"`).join(',\\n');\n        return `select\\n${_columns}\\nfrom \"${this.tableName}\"\\nlimit {limit}\\noffset {offset}`;\n    }\n\n    getCountQuery() {\n        console.log('PostgreSqlFormWizard.getCountQuery');\n        return `select count(*) from \"${this.tableName}\"`;\n    }\n}\n","class ChangeClassController extends ModalController {\n    getViewClass() {\n        return ChangeClassView;\n    }\n}\n","class NewActionController extends ModalController {\n    getViewClass() {\n        return NewActionView;\n    }\n}\n","class NewColumnController extends ModalController {\n    getViewClass() {\n        return NewColumnView;\n    }\n}\n","class NewDatabaseController extends ModalController {\n    getViewClass() {\n        return NewDatabaseView;\n    }\n}","class NewDataSourceController extends ModalController {\n    getViewClass() {\n        return NewDataSourceView;\n    }\n}\n","class NewFieldController extends ModalController {\n    getViewClass() {\n        return NewFieldView;\n    }\n}\n","class NewFormController extends ModalController {\n    getViewClass() {\n        return NewFormView;\n    }\n}\n","class NewFormFromTableController extends ModalController {\n    getViewClass() {\n        return NewFormFromTableView;\n    }\n}\n","class NewPageController extends ModalController {\n    getViewClass() {\n        return NewPageView;\n    }\n}\n","class NewParamController extends ModalController {\n    getViewClass() {\n        return NewParamView;\n    }\n}","class NewKeyColumnController extends ModalController {\n    getViewClass() {\n        return NewKeyColumnView;\n    }\n}","class NewTableController extends ModalController {\n    getViewClass() {\n        return NewTableView;\n    }\n}\n","class ActionController extends ModelController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    getActions() {\n        return [\n            {'action': 'moveUp'     , 'caption': 'Move Up'     },\n            {'action': 'moveDown'   , 'caption': 'Move Down'   },\n            {'action': 'delete', 'caption': 'Delete'}\n        ];\n    }\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('actions', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('actions', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n        }\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeAction(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n}\n","class DocumentController extends ModelController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.document = null;\n    }\n    async createDocument() {\n        const document = {\n            controller: this,\n            view      : null,\n        };\n        return this.document = document;\n    }\n    onDocumentClose() {\n        console.log('DocumentController.onDocumentClose', this.getTitle());\n        this.document = null;\n    }\n}\n","class ColumnController extends ModelController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    getActions() {\n        return [\n            {'action': 'delete', 'caption': 'Delete'}\n        ];\n    }\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n        }\n    }\n    static async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Column',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                view: view\n            })\n        });\n    }\n    getPropList() {\n        const propList = super.getPropList();\n        propList.options['key']      = ['true', 'false'];\n        propList.options['auto']     = ['true', 'false'];\n        propList.options['nullable'] = ['true', 'false'];\n        return propList;\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeColumn(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n}\n","class KeyColumnController extends ModelController {\n\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n\n    getActions() {\n        return [\n            {'action':'delete', 'caption':'Delete'}\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n        }\n    }\n\n    static async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'KeyColumn',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                view: view\n            })\n        });\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeKeyColumn(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n}\n","class PageLinkController extends ModelController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.node = true;\n        this.pageController = null;\n        this.items = null;\n    }\n    getTitle() {\n        if (this.pageController) return this.pageController.getTitle();\n        return super.getTitle();\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'red'\n        };\n    }\n    hasPage() {\n        return this.pageController != null;\n    }\n    async loadPage() {\n        console.log('PageLinkController.loadPage', this.getTitle());\n        if (this.pageController) throw new Error('page already loaded');\n        const pageLink = this.model;\n        const pageData = await EditorFrontHostApp.fetchPageData(pageLink.getFileName());\n\n        // page\n        const page = new Page(pageData, pageLink);\n        page.init();\n\n        // pageController\n        const pageController = new PageController(page, this);\n        pageController.init();\n        this.setPageController(pageController);\n        // console.log('pageController:', pageController);\n\n        this.view.rerender();\n    }\n    getActions() {\n        return this.pageController.getActions();\n    }\n    getPropList() {\n        return this.pageController.getPropList();\n    }\n    async setProperty(name, value) {\n        this.pageController.setProperty(name, value);\n    }\n    setPageController(pageController) {\n        if (this.pageController) throw new Error('pageLinkController already has pageController');\n        this.pageController = pageController;\n        this.items = pageController.items;\n    }\n    remove() {\n        console.log('PageLinkController.remove', this.getTitle());\n        this.parent.removePageLink(this);\n    }\n}\n","class ParamController extends ModelController {\n\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n\n    getActions() {\n        return [\n            {'action': 'delete', 'caption': 'Delete'}\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n        }\n    }\n\n    static async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Param',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                view: view\n            })\n        });\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeParam(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n}\n","class Action extends Model {\n    /*constructor(data, parent) {\n        super(data, parent);\n    }*/\n\n    /*async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                view : view,\n                page : this.data !== undefined ? this.form.page.getName() : null,\n                form : this.data !== undefined ? this.form.getName()      : null,\n            })\n        });\n    }*/\n\n    getParams() {\n        if (this.parent instanceof Form) {\n            return {\n                pageFileName: this.parent.page.pageLink.getAttr('fileName'),\n                form        : this.parent.getAttr('name'),\n                action      : this.getAttr('name'),\n            };\n        } else if (this.parent instanceof Page) {\n            return {\n                pageFileName: this.parent.pageLink.getAttr('fileName'),\n                action      : this.getAttr('name'),\n            };\n        }\n        return {\n            action: this.getAttr('name'),\n        };\n    }\n\n    async setValue(name, value) {\n        //console.log('Action.setValue', name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                ...this.getParams(),\n                attr        : name,\n                value       : value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : 'delete',\n            params    : Helper.encodeObject({\n                ...this.getParams(),\n            })\n        });\n    }\n    async delete() {\n        console.log('Action.delete', this.getName());\n        await this.deleteData();\n        this.parent.removeAction(this);\n    }\n    moveUp() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Action',\n            action     : 'moveUp',\n            params     : Helper.encodeObject({\n                ...this.getParams(),\n            })\n        });\n    }\n    moveDown() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Action',\n            action     : 'moveDown',\n            params     : Helper.encodeObject({\n                ...this.getParams(),\n            })\n        });\n    }\n\n}\n","class Application extends Model {\n\n    constructor(data) {\n        super(data);\n        this.databases   = [];\n        this.dataSources = [];\n        this.actions     = [];\n        this.pageLinks   = [];\n    }\n\n    init() {\n        console.log('Application.init', this.data);\n        // databases\n        for (const data of this.data.databases) {\n            this.createDatabase(data);\n        }\n\n        // dataSources\n        for (const data of this.data.dataSources) {\n            this.createDataSource(data);\n        }\n\n        // actions\n        for (const data of this.data.actions) {\n            this.createAction(data);\n        }\n\n        // pageLinks\n        for (const data of this.data.pageLinks) {\n            this.createPageLink(data);\n        }\n    }\n    createDatabase(data) {\n        const database = new Database(data, this);\n        database.init();\n        this.databases.push(database);\n        return database;\n    }\n    createPageLink(data) {\n        const pageLink = new PageLink(data, this);\n        pageLink.init();\n        this.pageLinks.push(pageLink);\n        return pageLink;\n    }\n    removeDatabase(database) {\n        console.log('Application.removeDatabase', database.getName());\n        const i = this.databases.indexOf(database);\n        if (i === -1) throw new Error('no such database');\n        this.databases.splice(i, 1);\n    }\n\n    removePageLink(pageLink) {\n        console.log('Application.removePageLink', pageLink.getName());\n        const i = this.pageLinks.indexOf(pageLink);\n        if (i === -1) throw new Error('no such pageLink');\n        this.pageLinks.splice(i, 1);\n    }\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                attr : name,\n                value: value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async newPageAndPageLinkData(params) {\n        params['menu'] = (params['startup'] === 'true') ? 'Pages' : '';\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n    }\n\n    async newPage(params) {\n        const {page: pageData, pageLink: pageLinkData} = await this.newPageAndPageLinkData(params);\n        const pageLink = this.createPageLink(pageLinkData);\n        return new Page(pageData, pageLink);\n    }\n\n    async newDatabase(params) {\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n        return this.createDatabase(data);\n    }\n\n    async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                app : this.getName(),\n                view: view\n            })\n        });\n    }\n\n    async saveView(text, view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'saveView',\n            params    : Helper.encodeObject({\n                app : this.getName(),\n                view: view,\n                text: text\n            })\n        });\n    }\n\n    async saveController(text) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'saveController',\n            params    : Helper.encodeObject({\n                app : this.getName(),\n                text: text\n            })\n        });\n    }\n\n    async createView() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'createView',\n            params    : Helper.encodeObject({\n                app: this.getName()\n            })\n        });\n    }\n\n    async createController() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'createController',\n            params    : Helper.encodeObject({\n                app: this.getName()\n            })\n        });\n    }\n\n    async newDataSource(params) {\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'DataSource',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n        return this.createDataSource(data);\n    }\n\n    async newAction(params) {\n        // params['pageFileName'] = this.page.pageLink.getFileName();\n        // params['form']         = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n        return this.createAction(data);\n    }\n\n}\n","class Column extends Model {\n\n    constructor(data, table) {\n        super(data, table);\n        this.table = table;\n    }\n\n    async setValue(name, value) {\n        //console.log('Column.setValue', name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Column',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                database: this.table.database.getName(),\n                table   : this.table.getName(),\n                column  : this.getName(),\n                attr    : name,\n                value   : value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Column',\n            action    : 'delete',\n            params    : Helper.encodeObject({\n                database: this.table.database.getName(),\n                table   : this.table.getName(),\n                column  : this.getName(),\n            })\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeColumn(this);\n    }\n\n}\n","class DataSource extends Model {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.keyColumns = [];\n    }\n\n    init() {\n        for (const data of this.data.keyColumns) {\n            this.createKeyColumn(data);\n        }\n    }\n\n    createKeyColumn(data) {\n        const keyColumn = new KeyColumn(data, this);\n        keyColumn.init();\n        this.keyColumns.push(keyColumn);\n        return keyColumn;\n    }\n    removeKeyColumn(keyColumn) {\n        console.log('Database.removeParam', keyColumn.getName());\n        const i = this.keyColumns.indexOf(keyColumn);\n        if (i === -1) throw new Error('no such keyColumn');\n        this.keyColumns.splice(i, 1);\n    }\n    static async create(parent, params) {\n        if (parent instanceof Form) {\n            const form = parent;\n            params['page']  = form.page.pageLink.getFileName();\n            params['form']  = form.getName();\n        }\n        if (parent instanceof Page) {\n            const page = parent;\n            params['page']  = page.pageLink.getFileName();\n        }\n        return await FrontHostApp.doHttpRequest({\n            controller: 'DataSource',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const args = {\n            controller: 'DataSource',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                dataSource: this.getName(),\n                attr      : name,\n                value     : value\n            })\n        };\n        if (this.parent instanceof Page) {\n            args.params.pageFileName = Helper.encodeValue(this.parent.pageLink.getFileName());\n        }\n        if (this.parent instanceof Form) {\n            args.params.form         = Helper.encodeValue(this.parent.getName());\n            args.params.pageFileName = Helper.encodeValue(this.parent.page.pageLink.getFileName());\n        }\n        const data = await FrontHostApp.doHttpRequest(args);\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        const args = {\n            controller: 'DataSource',\n            action    : 'delete',\n            params    : Helper.encodeObject({\n                dataSource: this.getName()\n            })\n        };\n        if (this.parent instanceof Page) {\n            args.params.page = Helper.encodeValue(this.parent.pageLink.getFileName());\n        }\n        if (this.parent instanceof Form) {\n            args.params.form = Helper.encodeValue(this.parent.getName());\n            args.params.page = Helper.encodeValue(this.parent.page.pageLink.getFileName());\n        }\n        await FrontHostApp.doHttpRequest(args);\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeDataSource(this);\n    }\n\n    async moveUp() {\n        const args = {\n            controller: 'DataSource',\n            action    : 'moveUp',\n            params    : Helper.encodeObject({\n                dataSource: this.getName()\n            })\n        };\n        if (this.parent instanceof Page) {\n            args.params.page = Helper.encodeValue(this.parent.pageLink.getFileName());\n        }\n        if (this.parent instanceof Form) {\n            args.params.form = Helper.encodeValue(this.parent.getName());\n            args.params.page = Helper.encodeValue(this.parent.page.pageLink.getFileName());\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    async moveDown() {\n        const args = {\n            controller: 'DataSource',\n            action    : 'moveDown',\n            params    : Helper.encodeObject({\n                dataSource: this.getName()\n            })\n        };\n        if (this.parent instanceof Page) {\n            args.params.page = Helper.encodeValue(this.parent.pageLink.getFileName());\n        }\n        if (this.parent instanceof Form) {\n            args.params.form = Helper.encodeValue(this.parent.getName());\n            args.params.page = Helper.encodeValue(this.parent.page.pageLink.getFileName());\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    async newKeyColumnData(name) {\n        const args = {\n            controller: 'KeyColumn',\n            action    : '_new',\n            params    : Helper.encodeObject({\n                dataSource: this.getName(),\n                name      : name\n            })\n        };\n        if (this.parent instanceof Form) {\n            args.params.page = Helper.encodeValue(this.parent.page.pageLink.getFileName());\n            args.params.form = Helper.encodeValue(this.parent.getName());\n        }\n        if (this.parent instanceof Page) {\n            args.params.page = Helper.encodeValue(this.parent.pageLink.getFileName());\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n    async newKeyColumn(name) {\n        const data = await this.newKeyColumnData(name);\n        return this.createKeyColumn(data);\n    }\n    async getView(view) {\n        const args = {\n            controller: 'DataSource',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                dataSource: (this instanceof DataSource) ? this.getName() : undefined,\n                view      : view\n            })\n        };\n        if (this.parent instanceof Page) {\n\n            args.params.pageFileName = Helper.encodeValue((this instanceof DataSource) ? this.parent.pageLink.getFileName() : undefined);\n        }\n        if (this.parent instanceof Form) {\n            args.params.pageFileName = Helper.encodeValue((this instanceof DataSource) ? this.parent.page.pageLink.getFileName() : undefined);\n            args.params.form         = Helper.encodeValue((this instanceof DataSource) ? this.parent.getName()                   : undefined);\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    async saveController(text) {\n        const args = {\n            controller: 'DataSource',\n            action    : 'saveController',\n            params    : Helper.encodeObject({\n                dataSource: this.getName(),\n                text      : text\n            })\n        };\n        if (this.parent instanceof Page) {\n            args.params.pageFileName = Helper.encodeValue(this.parent.pageLink.getFileName());\n        }\n        if (this.parent instanceof Form) {\n            args.params.pageFileName = Helper.encodeValue(this.parent.page.pageLink.getFileName());\n            args.params.form         = Helper.encodeValue(this.parent.getName());\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    async createController() {\n        const args = {\n            controller: 'DataSource',\n            action    : 'createController',\n            params    : Helper.encodeObject({\n                page        : this.parent.page.getName(),\n                pageFileName: this.parent.page.pageLink.getFileName(),\n                form        : this.parent.getName(),\n                dataSource  : this.getName()\n            })\n        };\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    getFullName() {\n        if (this.parent instanceof Form) {\n            return [this.parent.parent.getName(), this.parent.getName(), this.getName()].join('.');\n        } else if (this.parent instanceof Page) {\n            return [this.parent.getName(), this.getName()].join('.');\n        } else if (this.parent instanceof Application) {\n            return this.getName();\n        }\n    }\n\n}\n","class Database extends Model {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.params = [];\n        this.tables = [];\n    }\n\n    init() {\n\n        // params\n        for (const data of this.data.params) {\n            this.createParam(data);\n        }\n\n        // tables\n        for (const data of this.data.tables) {\n            this.createTable(data);\n        }\n    }\n\n    createParam(data) {\n        const param = new Param(data, this);\n        param.init();\n        this.params.push(param);\n        return param;\n    }\n\n    createTable(data) {\n        const table = new Table(data, this);\n        table.init();\n        this.tables.push(table);\n        return table;\n    }\n    removeParam(param) {\n        console.log('Database.removeParam', param.getName());\n        const i = this.params.indexOf(param);\n        if (i === -1) throw new Error('no such param');\n        this.params.splice(i, 1);\n    }\n    removeTable(table) {\n        console.log('Database.removeTable', table.getName());\n        const i = this.tables.indexOf(table);\n        if (i === -1) throw new Error('no such table');\n        this.tables.splice(i, 1);\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                database: this.getName(),\n                attr    : name,\n                value   : value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : 'delete',\n            params    : Helper.encodeObject({\n                database: this.getName()\n            })\n        });\n    }\n\n    async delete() {\n        await this.deleteData();\n        this.parent.removeDatabase(this);\n    }\n\n    async newParam(name) {\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Param',\n            action    : '_new',\n            params    : Helper.encodeObject({\n                database: this.getName(),\n                name    : name\n            })\n        });\n        return this.createParam(data);\n    }\n\n    async newTable(params) {\n        if (!params.name) throw new Error('newTable: no name');\n        const data =  await FrontHostApp.doHttpRequest({\n            controller: 'Table',\n            action    : '_new',\n            params    : Helper.encodeObject({\n                database: this.getName(),\n                name    : params.name,\n                columns : params.columns\n            })\n        });\n        return this.createTable(data);\n    }\n\n    async getView(view) {\n        console.log('Database.getView', view);\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                view    : view,\n                database: this.data !== undefined ? this.getName() : null\n            })\n        });\n    }\n\n    async getTableInfo(table) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : 'getTableInfo',\n            params    : Helper.encodeObject({\n                database: this.data !== undefined ? this.getName() : null,\n                table   : table\n            })\n        });\n    }\n    moveUp() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Database',\n            action     : 'moveUp',\n            params    : Helper.encodeObject({\n                database: this.getName()\n            })\n        });\n    }\n    moveDown() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Database',\n            action     : 'moveDown',\n            params    : Helper.encodeObject({\n                database: this.getName()\n            })\n        });\n    }\n\n}\n","class Field extends Model {\n\n    constructor(data, form) {\n        super(data, form);\n        this.form = form;\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                pageFileName: this.form.page.pageLink.getFileName(),\n                form        : this.form.getName(),\n                field       : this.getName(),\n                attr        : name,\n                value       : value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller : 'Field',\n            action     : 'delete',\n            params     : Helper.encodeObject({\n                pageFileName:this.form.page.pageLink.getFileName(),\n                form        :this.form.getName(),\n                field       :this.getName()\n            })\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeField(this);\n    }\n    async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                view : view,\n                page : this.data !== undefined ? this.form.page.getName() : null,\n                form : this.data !== undefined ? this.form.getName()      : null,\n                field: this.data !== undefined ? this.getName()           : null\n            })\n        });\n    }\n\n    async saveView(text, view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'saveView',\n            params    : Helper.encodeObject({\n                page : this.form.page.getName(),\n                form : this.form.getName(),\n                field: this.getName(),\n                view : view,\n                text : text\n            })\n        });\n    }\n\n    async saveController(text) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'saveController',\n            params    : Helper.encodeObject({\n                page : this.form.page.getName(),\n                form : this.form.getName(),\n                field: this.getName(),\n                text : text\n            })\n        });\n    }\n\n    async createView() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'createView',\n            params    : Helper.encodeObject({\n                page : this.form.page.getName(),\n                form : this.form.getName(),\n                field: this.getName(),\n                class: this.getClassName()\n            })\n        });\n    }\n\n    async createController() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'createController',\n            params    : Helper.encodeObject({\n                page : this.form.page.getName(),\n                form : this.form.getName(),\n                field: this.getName(),\n                class: this.getClassName()\n            })\n        });\n    }\n\n    async changeClass(params) {\n        params['page']  = this.form.page.getName();\n        params['form']  = this.form.getName();\n        params['field'] = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'changeClass',\n            params    : Helper.encodeObject(params)\n        });\n        return this.data = data;\n    }\n\n    moveUp() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Field',\n            action     : 'moveUp',\n            params     : Helper.encodeObject({\n                pageFileName: this.form.page.pageLink.getFileName(),\n                form        : this.form.getName(),\n                field       : this.getName()\n            })\n        });\n    }\n\n    moveDown() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Field',\n            action     : 'moveDown',\n            params     : Helper.encodeObject({\n                pageFileName: this.form.page.pageLink.getFileName(),\n                form        : this.form.getName(),\n                field       : this.getName()\n            })\n        });\n    }\n\n}\n","class Form extends Model {\n\n    constructor(data, page) {\n        super(data, page);\n        this.page   = page;\n        this.dataSources = [];\n        this.fields      = [];\n        this.actions     = [];\n    }\n\n    init() {\n        // dataSources\n        for (const data of this.data.dataSources) {\n            this.createDataSource(data);\n        }\n\n        // actions\n        for (const data of this.data.actions) {\n            this.createAction(data);\n        }\n\n        // fields\n        for (const data of this.data.fields) {\n            this.createField(data);\n        }\n    }\n    createField(data) {\n        const field = new Field(data, this);\n        field.init();\n        this.fields.push(field);\n        return field;\n    }\n    removeField(field) {\n        console.log('Form.removeField', field.getName());\n        const i = this.fields.indexOf(field);\n        if (i === -1) throw new Error('no such field');\n        this.fields.splice(i, 1);\n    }\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                pageFileName: this.page.pageLink.getFileName(),\n                form        : this.getName(),\n                attr        : name,\n                value       : value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'delete',\n            params    : Helper.encodeObject({\n                pageFileName: this.page.pageLink.getFileName(),\n                form        : this.getName()\n            })\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeForm(this);\n    }\n    moveUp() {\n        const args = {\n            controller: 'Form',\n            action    : 'moveUp',\n            params    : Helper.encodeObject({\n                pageFileName: this.page.pageLink.getFileName(),\n                form        : this.getName()\n            })\n        };\n        return FrontHostApp.doHttpRequest(args);\n    }\n\n    moveDown() {\n        const args = {\n            controller: 'Form',\n            action    : 'moveDown',\n            params    : Helper.encodeObject({\n                pageFileName: this.page.pageLink.getFileName(),\n                form        : this.getName()\n            })\n        };\n        return FrontHostApp.doHttpRequest(args);\n    }\n\n    async newField(params) {\n        params['pageFileName'] = this.page.pageLink.getFileName();\n        params['form']         = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n        return this.createField(data);\n    }\n\n    async newAction(params) {\n        params['pageFileName'] = this.page.pageLink.getFileName();\n        params['form']         = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n        return this.createAction(data);\n    }\n\n    async newDataSource(params) {\n        params['page']  = this.page.pageLink.getFileName();\n        params['form']  = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'DataSource',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n        return this.createDataSource(data);\n    }\n\n    async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                view: view,\n                page: this.data !== undefined ? this.page.getName() : null,\n                form: this.data !== undefined ? this.getName()      : null\n            })\n        });\n    }\n\n    async saveView(text, view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'saveView',\n            params    : Helper.encodeObject({\n                page: this.page.getName(),\n                form: this.getName(),\n                view: view,\n                text: text\n            })\n        });\n    }\n\n    async saveController(text) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'saveController',\n            params    : Helper.encodeObject({\n                page: this.page.getName(),\n                form: this.getName(),\n                text: text\n            })\n        });\n    }\n\n    async createView() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'createView',\n            params    : Helper.encodeObject({\n                page : this.page.getName(),\n                form : this.getName(),\n                class: this.getClassName()\n            })\n        });\n    }\n\n    async createController() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'createController',\n            params    : Helper.encodeObject({\n                page : this.page.getName(),\n                form : this.getName(),\n                class: this.getClassName()\n            })\n        });\n    }\n\n}\n","class KeyColumn extends Model {\n\n    constructor(data, dataSource) {\n        super(data, dataSource);\n        this.dataSource = dataSource;\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'KeyColumn',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                form        : this.dataSource.parent.getName(),\n                pageFileName: this.dataSource.parent.page.pageLink.getFileName(),\n                dataSource  : this.dataSource.getName(),\n                keyColumn   : this.getName(),\n                attr        : name,\n                value       : value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'KeyColumn',\n            action    : 'delete',\n            params    : Helper.encodeObject({\n                page      : this.dataSource.parent.page.pageLink.getFileName(),\n                form      : this.dataSource.parent.getName(),\n                dataSource: this.dataSource.getName(),\n                keyColumn : this.getName()\n            })\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeKeyColumn(this);\n    }\n\n\n}\n","class Page extends Model {\n\n    constructor(data, pageLink) {\n        super(data);\n        this.pageLink    = pageLink;\n        this.dataSources = [];\n        this.actions     = [];\n        this.forms       = [];\n    }\n\n    init() {\n        // data sources\n        for (const data of this.data.dataSources) {\n            this.createDataSource(data);\n        }\n\n        // actions\n        for (const data of this.data.actions) {\n            this.createAction(data);\n        }\n\n        // forms\n        for (const data of this.data.forms) {\n            this.createForm(data);\n        }\n    }\n    createForm(data) {\n        const form = new Form(data, this);\n        form.init();\n        this.forms.push(form);\n        return form;\n    }\n    removeForm(form) {\n        console.log('Page.removeForm', form.getName());\n        const i = this.forms.indexOf(form);\n        if (i === -1) throw new Error('no such form');\n        this.forms.splice(i, 1);\n    }\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                fileName: this.pageLink.getFileName(),\n                attr    : name,\n                value   : value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'delete',\n            params    : Helper.encodeObject({\n                page: this.getName()\n            })\n        });\n    }\n\n    async delete() {\n        console.log('Page.delete', this.getName());\n        await this.deleteData();\n        this.pageLink.remove();\n    }\n\n    async newForm(params) {\n        params['pageFileName'] = this.pageLink.getFileName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n        return this.createForm(data);\n    }\n\n    async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                view: view,\n                page: this.data !== undefined ? this.getName() : null\n            })\n        });\n    }\n\n    async saveView(text, view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'saveView',\n            params    : Helper.encodeObject({\n                page: this.getName(),\n                view: view,\n                text: text\n            })\n        });\n    }\n\n    async saveController(text) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'saveController',\n            params    : Helper.encodeObject({\n                page: this.getName(),\n                text: text\n            })\n        });\n    }\n\n    async createView() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'createView',\n            params    : Helper.encodeObject({\n                page: this.getName()\n            })\n        });\n    }\n\n    async createController() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'createController',\n            params    : Helper.encodeObject({\n                page: this.getName()\n            })\n        });\n    }\n\n    async newAction(params) {\n        params['pageFileName'] = this.pageLink.getFileName();\n        // params['form']         = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : '_new',\n            params    : Helper.encodeObject(params)\n        });\n        return this.createAction(data);\n    }\n\n}\n","class PageLink extends Model {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.application = parent;\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'PageLink',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                pageLink: this.getName(),\n                attr    : name,\n                value   : value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async moveUp() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'PageLink',\n            action    : 'moveUp',\n            params    : Helper.encodeObject({\n                page: this.getName()\n            })\n        });\n    }\n\n    async moveDown() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'PageLink',\n            action    : 'moveDown',\n            params    : Helper.encodeObject({\n                page: this.getName()\n            })\n        });\n    }\n\n    getFileName() {\n        return this.data['@attributes'].fileName;\n    }\n    remove() {\n        console.log('PageLink.remove', this.getName());\n        this.parent.removePageLink(this);\n    }\n\n}\n","class Param extends Model {\n\n    constructor(data, database) {\n        super(data, database);\n        this.database = database;\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Param',\n            action    : 'save',\n            params    : Helper.encodeObject({\n                database: this.database.getName(),\n                param   : this.getName(),\n                attr    : name,\n                value   : value\n            })\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Param',\n            action    : 'delete',\n            params    : Helper.encodeObject({\n                database: this.database.getName(),\n                param   : this.getName()\n            })\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeParam(this);\n    }\n}\n","class Table extends Model {\n    constructor(data, database) {\n        super(data, database);\n        this.database = database;\n        this.columns = [];\n    }\n\n    init() {\n        for (const data of this.data.columns) {\n            this.createColumn(data);\n        }\n    }\n\n    createColumn(data) {\n        const column = new Column(data, this);\n        column.init();\n        this.columns.push(column);\n        return column;\n    }\n    removeColumn(column) {\n        console.log('Table.removeColumn', column.getName());\n        const i = this.columns.indexOf(column);\n        if (i === -1) throw new Error('no such column');\n        this.columns.splice(i, 1);\n    }\n\n    async newColumn(name) {\n        if (!name) throw new Error(`newColumn: no name`);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Column',\n            action    : '_new',\n            params    : Helper.encodeObject({\n                database: this.database.getName(),\n                table   : this.getName(),\n                name    : name\n            })\n        });\n        return this.createColumn(data);\n    }\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Table',\n            action    : 'delete',\n            params    : Helper.encodeObject({\n                database: this.database.getName(),\n                table   : this.getName()\n            })\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeTable(this);\n    }\n\n    moveUp() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Table',\n            action     : 'moveUp',\n            params     : Helper.encodeObject({\n                database: this.database.getName(),\n                table   : this.getName()\n            })\n        });\n    }\n\n    moveDown() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Table',\n            action     : 'moveDown',\n            params     : Helper.encodeObject({\n                database: this.database.getName(),\n                table   : this.getName()\n            })\n        });\n    }\n\n}\n","class DataSourceController extends DocumentController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.keyColumns = [];\n        this.items = [\n            {\n                getTitle: () => 'Key Columns',\n                items: this.keyColumns\n            }\n        ];\n    }\n    getTitle() {\n        return `${this.model.getClassName()}: ${this.model.getName()}`;\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'brown'\n        };\n    }\n    init() {\n        this.model.keyColumns.forEach(keyColumn => this.createKeyColumn(keyColumn));\n    }\n    createKeyColumn(model) {\n        const keyColumn = new KeyColumnController(model, this);\n        keyColumn.init();\n        this.keyColumns.push(keyColumn);\n        return keyColumn;\n    }\n    removeKeyColumn(keyColumnController) {\n        console.log('DataSourceController.removeKeyColumn', keyColumnController.getTitle());\n        const i = this.keyColumns.indexOf(keyColumnController);\n        if (i === -1) throw new Error('no such keyColumnController');\n        this.keyColumns.splice(i, 1);\n    }\n    getActions() {\n        return [\n            {'action' : 'newItem', 'caption': 'New Key Column'},\n            {'action':  'moveUp', 'caption':   'Move Up'},\n            {'action':'moveDown', 'caption': 'Move Down'},\n            {'action' : 'delete', 'caption': 'Delete'}\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'newItem':\n                await this.actionNewKeyColumn();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('dataSources', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('dataSources', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n        }\n    }\n\n    async actionNewKeyColumn() {\n        await EditorFrontHostApp.editorApp.openModal(new NewKeyColumnController({onCreate: async values => {\n            const keyColumn = await this.model.newKeyColumn(values.name);\n            const keyColumnController = this.createKeyColumn(keyColumn);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(keyColumnController);\n            keyColumnController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    getPropList() {\n        const propList = {\n            list   : {},\n            options: {}\n        };\n\n        // list\n        for (const name in this.model.data['@attributes']) {\n            if (!['countQuery', 'singleQuery', 'multipleQuery'].includes(name)) {\n                propList.list[name] = this.model.data['@attributes'][name];\n            }\n        }\n\n        // options\n        // propList.options['insertNewKey'] = ['true', 'false'];\n        return propList;\n    }\n    getDocumentViewClass() {\n        if (this.model.getClassName() === 'SqlDataSource') return SqlDataSourceView;\n        return super.getDocumentViewClass();\n    }\n    async onSaveClick(name, value) {\n        // console.log('DataSourceController.onSaveClick', name, value);\n        await this.model.setValue(name, value);\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeDataSource(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n}\n","class DatabaseController extends DocumentController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.tableName = null;\n        this.tableInfo = null;\n        this.params  = [];\n        this.tables = [];\n        this.items = [\n            {\n                getTitle: () => 'Params',\n                items: this.params\n            },\n            {\n                getTitle: () => 'Tables',\n                items: this.tables\n            }\n        ];\n    }\n    getTitle() {\n        return `${this.model.getClassName()}: ${this.model.getName()}`;\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'purple'\n        };\n    }\n    init() {\n        this.model.params.forEach(param => this.createParam(param));\n        this.model.tables.forEach(table => this.createTable2(table));\n    }\n    createParam(model) {\n        const param = new ParamController(model, this);\n        param.init();\n        this.params.push(param);\n        return param;\n    }\n    createTable2(model) {\n        const table = new TableController(model, this);\n        table.init();\n        this.tables.push(table);\n        return table;\n    }\n    removeParam(paramController) {\n        console.log('DatabaseController.removeParam', paramController.getTitle());\n        const i = this.params.indexOf(paramController);\n        if (i === -1) throw new Error('no such paramController');\n        this.params.splice(i, 1);\n    }\n    removeTable2(tableController) {\n        console.log('DatabaseController.removeTable2', tableController.getTitle());\n        const i = this.tables.indexOf(tableController);\n        if (i === -1) throw new Error('no such tableController');\n        this.tables.splice(i, 1);\n    }\n    getActions() {\n        return [\n            {'action': 'newParam', 'caption': 'New Param'},\n            {'action': 'newTable', 'caption': 'New Table'},\n            {'action': 'moveUp'  , 'caption': 'Move Up'  },\n            {'action': 'moveDown', 'caption': 'Move Down'},\n            {'action': 'delete'  , 'caption': 'Delete'   }\n        ];\n    }\n    async doAction(name) {\n        switch (name) {\n            case 'newParam':\n                await this.actionNewParam();\n                break;\n            case 'newTable':\n                await this.actionNewTable();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('databases', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('databases', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            default:\n                throw new Error(`unknown action: ${name}`);\n        }\n    }\n    async actionNewParam() {\n        await EditorFrontHostApp.editorApp.openModal(new NewParamController({onCreate: async values => {\n            const param = await this.model.newParam(values.name);\n            const paramController = this.createParam(param);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(paramController);\n            paramController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n    async actionNewTable() {\n        await EditorFrontHostApp.editorApp.openModal(new NewTableController({onCreate: async values => {\n            const table = await this.model.newTable({name: values.name});\n            const tableController = this.createTable2(table);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(tableController);\n            tableController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n    async createDocument() {\n        const document = await super.createDocument();\n        const result = await this.model.getView('DatabaseView/DatabaseView.html');\n        // console.log('data:', result.data);\n        document.treeWidgetItems = result.data.tables.sort().map(tableName => ({getTitle: () => tableName}))\n        return document;\n    }\n    onTableSelect2 = async item => {\n        console.log('DatabaseController.onTableSelect2', item.getTitle());\n        const tableName = item.getTitle();\n        this.tableName = tableName;\n        const data = await this.model.getTableInfo(tableName);\n        this.tableInfo = data.tableInfo;\n        this.document.view.rerender();\n        // console.log('tableInfo:', this.tableInfo);\n    }\n    onCreateTableClick = e => {\n        console.log('DatabaseController.onCreateTableClick');\n        this.newTableAction(this.tableName, this.tableInfo);\n    }\n    async newTableAction(tableName, tableInfo) {\n        console.log('DatabaseController.newTableAction', tableName, tableInfo);\n        const table = await this.model.newTable({\n            name   : tableName,\n            columns: tableInfo.map(column => ({\n                name    : column.name,\n                caption : column.name,\n                type    : column.type,\n                dbType  : column.dbType,\n                key     : column.key,\n                auto    : column.auto,\n                nullable: column.nullable,\n            }))\n        });\n        const tableController = this.createTable2(table);\n        await EditorFrontHostApp.editorApp.treeWidget2.select(tableController);\n        tableController.view.parent.open();\n        this.view.rerender();\n        // EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n    }\n    async delete() {\n        console.log('DatabaseController.delete', this.getTitle());\n        await this.model.delete();\n        this.parent.removeDatabase(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n    getDocumentViewClass() {\n        return DatabaseView;\n    }\n}\n","class TableController extends DocumentController {\n\n    constructor(model, parent) {\n        super(model, parent);\n        this.columns = [];\n        this.items = [\n            {\n                getTitle: () => 'Columns',\n                items: this.columns\n            }\n        ];\n    }\n\n    init() {\n        this.model.columns.forEach(column => this.createColumn(column));\n    }\n    createColumn(model) {\n        const column = new ColumnController(model, this);\n        column.init();\n        this.columns.push(column);\n        return column;\n    }\n    removeColumn(columnController) {\n        console.log('TableController.removeColumn', columnController.getTitle());\n        const i = this.columns.indexOf(columnController);\n        if (i === -1) throw new Error('no such columnController');\n        this.columns.splice(i, 1);\n    }\n\n    getActions() {\n        return [\n            {'action': 'newColumn', 'caption': 'New Column'},\n            {'action': 'moveUp'     , 'caption': 'Move Up'     },\n            {'action': 'moveDown'   , 'caption': 'Move Down'   },\n            {'action': 'delete', 'caption': 'Delete'},\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n            case 'newColumn':\n                await this.actionNewColumn();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('tables', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('tables', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            default:\n                throw new Error(`unknown action: ${name}`);\n        }\n    }\n\n    static async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Table',\n            action    : 'getView',\n            params    : Helper.encodeObject({\n                view: view\n            })\n        });\n    }\n\n    async actionNewColumn() {\n        await EditorFrontHostApp.editorApp.openModal(new NewColumnController({onCreate: async values => {\n            const column = await this.model.newColumn(values.name);\n            const columnController = this.createColumn(column);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(columnController);\n            columnController.view.parent.open();\n            this.view.rerender();\n                EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n    onCreateFormButtonClick = async e => {\n        console.log('TableController.onCreateFormButtonClick');\n        await this.createFormAction();\n    }\n    static async getView(view) {\n        console.log('TableController.getView', view);\n        return FrontHostApp.doHttpRequest({\n            controller: 'Table',\n            action    : 'getView',\n            params    : Helper.encodeObject({view : view})\n        });\n    }\n\n    async createFormAction() {\n        console.log('TableController.createFormAction');\n        await EditorFrontHostApp.editorApp.openModal(new NewFormFromTableController({\n            tableController: this,\n            onCreate: async values => {\n                const formWizard = FormWizard.create({\n                    model       : this.model,\n                    pageName    : values.page,\n                    className   : values.class,\n                    formName    : values.name,\n                    formCaption : values.caption,\n                });\n                const params = formWizard.getFormParams();\n                // console.log('params:', params);\n                const databaseController = this.parent;\n                const applicationController = databaseController.parent;\n                const pageLinkController = applicationController.findPageLink(values.page);\n                if (!pageLinkController.pageController) {\n                    await pageLinkController.loadPage();\n                }\n                const pageController = pageLinkController.pageController;\n                // console.log('pageController:', pageController);\n                const form = await pageController.model.newForm(params);\n                // console.log('form:', form);\n                const formController = pageController.createForm(form);\n                await EditorFrontHostApp.editorApp.treeWidget2.select(formController);\n                formController.view.parent.open();\n                pageLinkController.view.rerender();\n                EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n    async delete() {\n        console.log('TableController.delete', this.getTitle());\n        await this.model.delete();\n        this.parent.removeTable2(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n    getDocumentViewClass() {\n        return TableView;\n    }\n}\n","class VisualController extends DocumentController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.data = null;\n    }\n    async createDocument() {\n        console.log('VisualController.createDocument');\n        const document = await super.createDocument();\n        const result = await this.model.getView('VisualView.html');\n        this.data = result.data;\n        return document;\n    }\n    async onControllerSave(value) {\n        console.log('ApplicationController.onControllerSave'/*, value*/);\n        await this.model.saveController(value);\n    }\n    onCreateCustomController = async e => {\n        console.log('ApplicationController.onCreateCustomController');\n        const data = await this.model.createController();\n        this.data.js = data.js;\n        this.document.view.rerender();\n    }\n    createDataSource(model) {\n        const dataSource = new DataSourceController(model, this);\n        dataSource.init();\n        this.dataSources.push(dataSource);\n        return dataSource;\n    }\n    removeDataSource(dataSourceController) {\n        // console.log('VisualController.removeDataSource', dataSourceController.getTitle());\n        const i = this.dataSources.indexOf(dataSourceController);\n        if (i === -1) throw new Error('no such dataSourceController');\n        this.dataSources.splice(i, 1);\n    }\n    createAction(model) {\n        const action = new ActionController(model, this);\n        action.init();\n        this.actions.push(action);\n        return action;\n    }\n    removeAction(actionController) {\n        // console.log('VisualController.removeAction', actionController.getTitle());\n        const i = this.actions.indexOf(actionController);\n        if (i === -1) throw new Error('no such actionController');\n        this.actions.splice(i, 1);\n    }\n    async actionNewAction() {\n        console.log('VisualController.actionNewAction');\n        await EditorFrontHostApp.editorApp.openModal(new NewActionController({onCreate: async values => {\n            const action = await this.model.newAction({\n                name   : values.name,\n                caption: values.caption\n            });\n            const actionController = this.createAction(action);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(actionController);\n            actionController.view.parent.open();\n            if (this.pageLinkController) {\n                this.pageLinkController.view.rerender();\n            } else {\n                this.view.rerender();\n            }\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n}\n","class ApplicationController extends VisualController {\n\n    constructor(model, editorApp) {\n        super(model);\n        this.editorApp = editorApp;\n        this.databases   = [];\n        this.dataSources = [];\n        this.actions     = [];\n        this.pageLinks   = [];\n\n        // items\n        this.opened = true;\n        this.items = [\n            {getTitle: () => 'Databases'   , items: this.databases},\n            {getTitle: () => 'Data Sources', items: this.dataSources},\n            {getTitle: () => 'Actions'     , items: this.actions},\n            {getTitle: () => 'Pages'       , items: this.pageLinks, opened: true}\n        ];\n    }\n    init() {\n        this.model.databases.forEach(database => this.createDatabase(database));\n        this.model.dataSources.forEach(dataSource => this.createDataSource(dataSource));\n        this.model.actions.forEach(action => this.createAction(action));\n        this.model.pageLinks.forEach(pageLink => this.createPageLink(pageLink));\n    }\n\n    createDatabase(model) {\n        const database = new DatabaseController(model, this);\n        database.init();\n        this.databases.push(database);\n        return database;\n    }\n    createPageLink(model) {\n        const pageLink = new PageLinkController(model, this);\n        pageLink.init();\n        this.pageLinks.push(pageLink);\n        return pageLink;\n    }\n    removeDatabase(databaseController) {\n        console.log('ApplicationController.removeDatabase', databaseController.getTitle());\n        const i = this.databases.indexOf(databaseController);\n        if (i === -1) throw new Error('no such databaseController');\n        this.databases.splice(i, 1);\n    }\n    removePageLink(pageLinkController) {\n        const i = this.pageLinks.indexOf(pageLinkController);\n        if (i === -1) throw new Error('no such pageLinkController');\n        this.pageLinks.splice(i, 1);\n    }\n\n    getActions() {\n        return [\n            {'action': 'newDatabase'  , 'caption': 'New Database'   },\n            {'action': 'newDataSource', 'caption': 'New Data Source'},\n            {'action': 'newAction'    , 'caption': 'New Action'},\n            {'action': 'newPage'      , 'caption': 'New Page'       }\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'newDatabase':\n                await this.newDatabaseAction();\n                break;\n            case 'newDataSource':\n                await this.newDataSourceAction();\n                break;\n            case 'newPage':\n                await this.newPageAction();\n                break;\n            case 'newAction':\n                await this.actionNewAction();\n                break;\n            default:\n                console.log(name);\n        }\n    }\n\n    async newDatabaseAction() {\n        console.log('ApplicationController.newDatabaseAction');\n        await EditorFrontHostApp.editorApp.openModal(new NewDatabaseController({onCreate: async values => {\n            // console.log('values: ', values);\n            const database = await this.model.newDatabase({\n                _class: values.class,\n                name  : values.name,\n                params: {\n                    host    : {name: 'host'    , value: values.host    },\n                    database: {name: 'database', value: values.database},\n                    user    : {name: 'user'    , value: values.user    },\n                    password: {name: 'password', value: values.password}\n                }\n            });\n            const databaseController = this.createDatabase(database);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(databaseController);\n            databaseController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    async newDataSourceAction() {\n        await EditorFrontHostApp.editorApp.openModal(new NewDataSourceController({onCreate: async values => {\n            const dataSource = await this.model.newDataSource({\n                name : values.name,\n                class: values.class\n            });\n            const dataSourceController = this.createDataSource(dataSource);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(dataSourceController);\n            dataSourceController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    async newPageAction() {\n        await EditorFrontHostApp.editorApp.openModal(new NewPageController({onCreate: async values => {\n            const page = await this.model.newPage({\n                name   : values.name,\n                caption: values.caption,\n                startup: values.startup\n            });\n            const pageLinkController = this.createPageLink(page.pageLink);\n            const pageController = new PageController(page, pageLinkController);\n            pageController.init();\n            pageLinkController.setPageController(pageController);\n            EditorFrontHostApp.editorApp.treeWidget2.select(pageLinkController);\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    getPropList() {\n        const propList = super.getPropList();\n        propList.options['authentication'] = ['true', 'false'];\n        propList.options['lang']           = ['en'  , 'ru'   ];\n        return propList;\n    }\n    findPageLink(name) {\n        return this.pageLinks.find(pageLink => pageLink.model.getName() === name);\n    }\n    getDocumentViewClass() {\n        return VisualView;\n    }\n}\n","class FieldController extends VisualController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    getTitle() {\n        return `${this.model.getClassName()}: ${this.model.getName()}`;\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'blue'\n        };\n    }\n    getActions() {\n        return [\n            {'action': 'changeClass', 'caption': 'Change Class'},\n            {'action': 'moveUp'     , 'caption': 'Move Up'     },\n            {'action': 'moveDown'   , 'caption': 'Move Down'   },\n            {'action': 'delete'     , 'caption': 'Delete'      }\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'changeClass':\n                await this.actionChangeClass();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('fields', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('fields', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n        }\n    }\n\n    async actionChangeClass() {\n        await EditorFrontHostApp.editorApp.openModal(new ChangeClassController({\n            fieldCtrl: this,\n            onCreate: async values => {\n                const data = await this.model.changeClass({class: values.class});\n                console.log(data);\n                EditorFrontHostApp.editorApp.fillPropertyGrid(this);\n                this.view.rerender();\n            }\n        }));\n    }\n\n    getPropList() {\n        const list = this.model.data['@attributes'];\n        const options = {};\n        options['isVisible']        = ['true', 'false'];\n        options['readOnly']         = ['true', 'false'];\n        options['notNull']          = ['true', 'false'];\n        options['align']            = ['left', 'right'];\n        options['param']            = ['true', 'false'];\n        options['validateOnChange'] = ['true', 'false'];\n        options['validateOnBlur']   = ['true', 'false'];\n        return {list: list, options: options};\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeField(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n    getDocumentViewClass() {\n        return VisualView;\n    }\n}\n","class PageController extends VisualController {\n\n    constructor(model, pageLinkController = null) {\n        super(model);\n        this.pageLinkController = pageLinkController;\n        this.dataSources = [];\n        this.actions     = [];\n        this.forms       = [];\n        this.items = [\n            {getTitle: () => 'Data Sources', items: this.dataSources},\n            {getTitle: () => 'Actions'     , items: this.actions},\n            {getTitle: () => 'Forms'       , items: this.forms}\n        ];\n    }\n\n    init() {\n        // console.log('PageController.init');\n        this.model.dataSources.forEach(dataSource => this.createDataSource(dataSource));\n        this.model.actions.forEach(action => this.createAction(action));\n        this.model.forms.forEach(form => this.createForm(form));\n    }\n\n    createForm(model) {\n        const form = new FormController(model, this);\n        form.init();\n        this.forms.push(form);\n        return form;\n    }\n    removeForm(formController) {\n        console.log('PageController.removeForm', formController.getTitle());\n        const i = this.forms.indexOf(formController);\n        if (i === -1) throw new Error('no such formController');\n        this.forms.splice(i, 1);\n    }\n\n    getActions() {\n        return [\n            {'action': 'newDataSource', 'caption': 'New Data Source'},\n            {'action': 'newAction'    , 'caption': 'New Action'       },\n            {'action': 'newForm'      , 'caption': 'New Form'       },\n            {'action': 'moveUp'       , 'caption': 'Move Up'        },\n            {'action': 'moveDown'     , 'caption': 'Move Down'      },\n            {'action': 'delete'       , 'caption': 'Delete'         }\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'newForm':\n                await this.actionNewForm();\n                break;\n            case 'newDataSource':\n                await this.newDataSourceAction();\n                break;\n            case 'newAction':\n                await this.actionNewAction();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.pageLink.moveUp();\n                this.pageLinkController.parent.moveColItem('pageLinks', this.pageLinkController, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.pageLink.moveDown();\n                this.pageLinkController.parent.moveColItem('pageLinks', this.pageLinkController, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            default:\n                console.log(name);\n        }\n    }\n\n    async newDataSourceAction() {\n        await EditorFrontHostApp.editorApp.openModal(new NewDataSourceController({onCreate: async values => {\n            const dataSourceData = await DataSource.create(this.model, {\n                name : values.name,\n                class: values.class\n            });\n            const dataSource = this.model.createDataSource(dataSourceData);\n            const dataSourceController = this.createDataSource(dataSource);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(dataSourceController);\n            dataSourceController.view.parent.open();\n            this.pageLinkController.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    async actionNewForm() {\n        await EditorFrontHostApp.editorApp.openModal(new NewFormController({onCreate: async values => {\n            const form = await this.model.newForm({\n                name   : values.name,\n                caption: values.caption,\n                class  : values.class\n            });\n            const formController = this.createForm(form);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(formController);\n            formController.view.parent.open();\n            this.pageLinkController.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    getPropList() {\n        const propList = super.getPropList();\n        propList.list['menu']    = this.getPageLink().getAttr('menu');\n        propList.list['startup'] = this.getPageLink().getAttr('startup');\n        propList.options['startup'] = ['true', 'false'];\n        return propList;\n    }\n\n    setProperty(name, value) {\n        if (name === 'startup' || name === 'menu') {\n            this.getPageLink().setValue(name, value);\n        } else  {\n            ModelController.prototype.setProperty.call(this, name, value);\n        }\n    }\n\n    getPageLink() {\n        return this.model.pageLink;\n    }\n\n    async delete() {\n        await this.model.delete();\n        this.pageLinkController.parent.removePageLink(this.pageLinkController);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n\n    getDocumentViewClass() {\n        return VisualView;\n    }\n}\n","class FormController extends VisualController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.dataSources = [];\n        this.actions     = [];\n        this.fields      = [];\n        this.items = [\n            {getTitle: () => 'Data Sources', items: this.dataSources},\n            {getTitle: () => 'Actions'     , items: this.actions},\n            {getTitle: () => 'Fields'      , items: this.fields}\n        ];\n    }\n    getTitle() {\n        return `${this.model.getClassName()}: ${this.model.getName()}`;\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'green',\n        };\n    }\n    init() {\n        this.model.dataSources.forEach(dataSource => this.createDataSource(dataSource));\n        this.model.fields.forEach(field => this.createField(field));\n        this.model.actions.forEach(action => this.createAction(action));\n    }\n    createField(model) {\n        const field = new FieldController(model, this);\n        field.init();\n        this.fields.push(field);\n        return field;\n    }\n\n\n    removeField(fieldController) {\n        console.log('FormController.removeField', fieldController.getTitle());\n        const i = this.fields.indexOf(fieldController);\n        if (i === -1) throw new Error('no such fieldController');\n        this.fields.splice(i, 1);\n    }\n\n\n    getActions() {\n        return [\n            {'action': 'newDataSource', 'caption': 'New Data Source'},\n            {'action': 'newField'     , 'caption': 'New Field'      },\n            {'action': 'newAction'    , 'caption': 'New Action'     },\n            {'action': 'moveUp'       , 'caption': 'Move Up'        },\n            {'action': 'moveDown'     , 'caption': 'Move Down'      },\n            {'action': 'delete'       , 'caption': 'Delete'         }\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'newDataSource':\n                await this.actionNewDataSource();\n                break;\n            case 'newField':\n                await this.actionNewField();\n                break;\n            case 'newAction':\n                await this.actionNewAction();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('forms', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('forms', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n        }\n    }\n\n    async actionNewDataSource() {\n        await EditorFrontHostApp.editorApp.openModal(new NewDataSourceController({onCreate: async values => {\n            const dataSource = await this.model.newDataSource({\n                name : values.name,\n                class: values.class\n            });\n            const dataSourceController = this.createDataSource(dataSource);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(dataSourceController);\n            dataSourceController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    async actionNewField() {\n        await EditorFrontHostApp.editorApp.openModal(new NewFieldController({onCreate: async values => {\n            const field = await this.model.newField({\n                class  : values.class,\n                name   : values.name,\n                caption: values.caption,\n                type   : values.type\n            });\n            const fieldController = this.createField(field);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(fieldController);\n            fieldController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n\n\n    getPropList() {\n        return {\n            list   : this.model.data['@attributes'],\n            options: {\n                editMethod: [\n                    'disabled',\n                    'table',\n                    'form'\n                ],\n                newRowMode: [\n                    'disabled',\n                    'oneclick',\n                    'editform',\n                    'createform',\n                    'oneclick editform',\n                    'oneclick createform'\n                ],\n                deleteRowMode: [\n                    'disabled',\n                    'enabled'\n                ],\n                refreshButton: [\n                    'true',\n                    'false'\n                ],\n                visible: ['true', 'false'],\n                newMode: ['', 'true', 'false'],\n                backOnly : ['true', 'false'],\n            }\n        };\n    }\n\n    async setProperty(name, value) {\n        await this.model.setValue(name, value);\n    }\n\n    async delete() {\n        await this.model.delete();\n        this.parent.removeForm(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n    getDocumentViewClass() {\n        return VisualView;\n    }\n}\n"]}