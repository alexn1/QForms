import { FieldController } from '../FieldController';
import { Field } from '../../../../Model/Field/Field';
import { FormController } from '../../FormController/FormController';
import { RowFormController } from '../../FormController/RowFormController/RowFormController';
import { RawRow } from '../../../../../../types';
export declare class RowFormFieldController<TField extends Field = Field> extends FieldController<TField> {
    state: any;
    constructor(model: TField, parent: any);
    init(): void;
    refill(): void;
    getRow(): RawRow;
    getForm<TRowFormController extends FormController = RowFormController>(): TRowFormController;
    copyValueToModel(): void;
    putValue(widgetValue: any): void;
    onChange: (widgetValue: any, fireEvent?: boolean) => Promise<void>;
    onBlur: (widgetValue: any, fireEvent?: boolean) => void;
    getValueForWidget(): string;
    setValueFromWidget(widgetValue: any): void;
    setValue(value: any): void;
    getValue(): any;
    isChanged(): any;
    isValid(): boolean;
    validate(): void;
    refreshChangedState(): void;
    getPlaceholder(): any;
    getError(): any;
    getNullErrorText(): any;
    isEditable(): boolean;
    isParseError(): boolean;
    calcChangedState(row: RawRow): boolean;
    setError(error: any): void;
    resetErrors(): void;
    getErrorMessage(): any;
    renderView(): any;
    isValidateOnChange(): boolean;
    isValidateOnBlur(): boolean;
    onChangePure: (value: any, fireEvent?: boolean) => Promise<void>;
}
