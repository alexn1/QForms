import { ReactNode } from 'react';
import { JSONString, Scalar, Query, QueryRecord, KeyTuple, Key } from '../../types';
import { ReactComponent } from './ReactComponent';
export declare class Helper {
    static formatNumber(value: number): string;
    static encodeObject(obj: Record<string, any>): Record<string, JSONString>;
    static encodeValue<T>(value: T): JSONString<T>;
    static decodeObject(eObj: Record<string, JSONString>): Record<string, any>;
    static decodeValue(raw: JSONString): any;
    static dateTimeReviver(key: string, value: any): any;
    static createReactComponent(rootElement: Element, type: any, props?: {}, children?: ReactNode[]): ReactComponent | undefined;
    static createReactComponent2(rootElement: Element, type: any, props?: {}, children?: ReactNode[]): ReactComponent | undefined;
    static readFileAsDataURL(file: Blob): Promise<string | ArrayBuffer | null>;
    static templateToJsString(value: string, params: Record<string, any>): string;
    static moveArrItem(arr: any[], item: any, offset: number): void;
    static copyTextToClipboard(text: string): Promise<void>;
    static fallbackCopyTextToClipboard(text: string): void;
    static fillArray(n: number): number[];
    static setCookie(name: string, value: Scalar, time: number): void;
    static getCookie(name: string): string | undefined;
    static eraseCookie(name: string): void;
    static delay(ms?: number): Promise<unknown>;
    static registerGlobalClass(Class: any): void;
    static getGlobalClass(className: string): any;
    static addClassToDocumentElement(className: string): void;
    static headersToRecord(headers: Headers): Record<string, string>;
    static queryToString(query: Query): string;
    static queryRecordToString(name: string, record: QueryRecord): string;
    static keyTupleToKey(keyArray: KeyTuple): Key;
    static keyToKeyTuple(key: Key): KeyTuple;
    static getFirstField(object: any): any;
    static mapObject(object: any, cb: any): any;
    static templateArray(arr: any[]): any[];
}
