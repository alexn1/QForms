{"version":3,"sources":["Editor/Editor.js","Editor/ActionEditor/ActionEditor.js","Editor/ApplicationEditor/ApplicationEditor.js","Editor/ColumnEditor/ColumnEditor.js","Editor/DataSourceEditor/DataSourceEditor.js","Editor/DatabaseEditor/DatabaseEditor.js","Editor/FieldEditor/FieldEditor.js","Editor/FormEditor/FormEditor.js","Editor/KeyColumnEditor/KeyColumnEditor.js","Editor/PageEditor/PageEditor.js","Editor/PageLinkEditor/PageLinkEditor.js","Editor/ParamEditor/ParamEditor.js","Editor/TableEditor/TableEditor.js","EditorFrontHostApp/EditorFrontHostApp.js","FormWizard/FormWizard.js","FormWizard/MySqlFormWizard/MySqlFormWizard.js","FormWizard/PostgreSqlFormWizard/PostgreSqlFormWizard.js","ModalController/ModalController.js","ModalController/ChangeClassController/ChangeClassController.js","ModalController/NewActionController/NewActionController.js","ModalController/NewColumnController/NewColumnController.js","ModalController/NewDataSourceController/NewDataSourceController.js","ModalController/NewDatabaseController/NewDatabaseController.js","ModalController/NewFieldController/NewFieldController.js","ModalController/NewFormController/NewFormController.js","ModalController/NewFormFromTableController/NewFormFromTableController.js","ModalController/NewKeyColumnController/NewKeyColumnController.js","ModalController/NewPageController/NewPageController.js","ModalController/NewParamController/NewParamController.js","ModalController/NewTableController/NewTableController.js","ModelController/ModelController.js","ModelController/ActionController/ActionController.js","ModelController/ColumnController/ColumnController.js","ModelController/DocumentController/DocumentController.js","ModelController/DocumentController/DataSourceController/DataSourceController.js","ModelController/DocumentController/DatabaseController/DatabaseController.js","ModelController/DocumentController/TableController/TableController.js","ModelController/DocumentController/VisualController/VisualController.js","ModelController/DocumentController/VisualController/ApplicationController/ApplicationController.js","ModelController/DocumentController/VisualController/FieldController/FieldController.js","ModelController/DocumentController/VisualController/FormController/FormController.js","ModelController/DocumentController/VisualController/PageController/PageController.js","ModelController/KeyColumnController/KeyColumnController.js","ModelController/PageLinkController/PageLinkController.js","ModelController/ParamController/ParamController.js"],"names":["Editor","constructor","data","parent","Error","this","init","getClassName","getName","getAttr","getFullName","splitter","let","name","form","page","setValue","value","getAttributes","setAttr","createDataSource","dataSource","DataSourceEditor","dataSources","push","removeDataSource","i","indexOf","splice","createAction","action","ActionEditor","actions","removeAction","getParams","FormEditor","pageFileName","pageLink","PageEditor","FrontHostApp","doHttpRequest","controller","params","attr","deleteData","delete","console","log","moveUp","moveDown","ApplicationEditor","super","databases","pageLinks","createDatabase","createPageLink","database","DatabaseEditor","PageLinkEditor","removeDatabase","removePageLink","newPageAndPageLinkData","newPage","pageData","pageLinkData","newDatabase","getView","view","app","saveView","text","saveController","createView","createController","createModelBackJs","newDataSource","newAction","ColumnEditor","table","column","removeColumn","keyColumns","createKeyColumn","keyColumn","KeyColumnEditor","removeKeyColumn","create","getFileName","args","newKeyColumnData","class","newKeyColumn","undefined","join","tables","createParam","createTable","param","ParamEditor","TableEditor","removeParam","removeTable","newParam","newTable","columns","getTableInfo","FieldEditor","field","removeField","createStyle","changeClass","fields","createField","removeForm","newField","getPage","getForm","forms","createForm","fileName","remove","newForm","application","createColumn","newColumn","EditorFrontHostApp","runAppLink","editorApp","actionList","treeWidget2","pg","items","tabWidget","documents","modal","run","applicationController","ApplicationController","Helper","createReactComponent","document","querySelector","EditorFrontHostAppView","ctrl","deinit","onItemOpen2","item","getTitle","PageLinkController","hasPage","loadPage","onItemSelect2","ModelController","fillActions","fillPropertyGrid","clearActions","endEdit","propList","getPropList","beginEdit","onPropertyGrid2Change","getSelectedItem","setProperty","obj","options","setState","object","fetchPageData","onItemDoubleClick2","pageController","DocumentController","openDocument","findDocument","createDocument","state","active","rerender","find","onDocumentClose","activeDocument","length","openModal","modalController","onModalClose","onActionClick","actionName","doAction","FormWizard","model","MySqlFormWizard","PostgreSqlFormWizard","databaseName","tableName","tableColumns","Object","keys","map","getDataSources","limit","className","countQuery","getCountQuery","singleQuery","getSingleQuery","multipleQuery","getMultipleQuery","getFieldClass","type","dbType","getField","caption","key","auto","notNull","nullable","readOnly","timezone","getFields","getColumns","filter","getFormParams","formName","formCaption","replace","ModalController","onClose","e","close","onCreate","values","getViewClass","ChangeClassController","ChangeClassView","NewActionController","NewActionView","NewColumnController","NewColumnView","NewDataSourceController","NewDataSourceView","NewDatabaseController","NewDatabaseView","NewFieldController","NewFieldView","NewFormController","NewFormView","NewFormFromTableController","NewFormFromTableView","NewKeyColumnController","NewKeyColumnView","NewPageController","NewPageView","NewParamController","NewParamView","NewTableController","NewTableView","getStyle","list","getDocumentViewClass","moveColItem","colName","offset","moveArrItem","ActionController","getActions","select","ColumnController","DataSourceController","color","forEach","KeyColumnController","keyColumnController","actionNewKeyColumn","open","scrollToSelected","includes","SqlDataSourceView","onSaveClick","onCreateModelBack","DatabaseController","tableInfo","createTable2","ParamController","TableController","paramController","removeTable2","tableController","actionNewParam","actionNewTable","result","treeWidgetItems","sort","onTableSelect2","onCreateTableClick","newTableAction","toString","DatabaseView","columnController","actionNewColumn","onCreateFormButtonClick","createFormAction","formWizard","pageName","pageLinkController","findPageLink","formController","TableView","VisualController","onControllerSave","js","onCreateCustomController","onCreateCustomView","jsx","onCreateCustomStyle","less","dataSourceController","actionController","actionNewAction","opened","databaseController","newDatabaseAction","newDataSourceAction","newPageAction","host","user","password","startup","PageController","setPageController","VisualView","FieldController","actionChangeClass","fieldCtrl","visible","validateOnChange","validateOnBlur","autoFocus","newRowMode","FormController","fieldController","actionNewDataSource","actionNewField","editMethod","deleteRowMode","refreshButton","newMode","backOnly","actionNewForm","dataSourceData","getPageLink","prototype","call","node"],"mappings":"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","file":"editor.fcc0d0f780227d069e37206266911fd6.js","sourcesContent":["class Editor {\n\n    constructor(data, parent = null) {\n        if (!data) throw new Error('no data');\n        this.data   = data;\n        this.parent = parent;\n    }\n\n    init() {\n    }\n\n    getClassName() {\n        return this.data['@class'];\n    }\n\n    getName() {\n        return this.getAttr('name');\n    }\n\n    getFullName(splitter = '.') {\n        let name;\n        if (this.form) {\n            name = `${this.form.page.getName()}${splitter}${this.form.getName()}${splitter}${this.getName()}`;\n        } else if (this.page) {\n            name = `${this.page.getName()}${splitter}${this.getName()}`;\n        } else {\n            name = this.getName();\n        }\n        return name;\n    }\n\n    async setValue(name, value) {\n        throw new Error(`${this.constructor.name}.setValue not implemented`);\n    }\n\n    getAttr(name) {\n        return this.data['@attributes'][name];\n    }\n    getAttributes() {\n        return this.data['@attributes'];\n    }\n\n    setAttr(name, value) {\n        this.data['@attributes'][name] = value;\n    }\n\n    /*getObject(col, name) {\n        return this[col].find(obj => obj.getName() === name);\n    }*/\n    createDataSource(data) {\n        const dataSource = new DataSourceEditor(data, this);\n        dataSource.init();\n        this.dataSources.push(dataSource);\n        return dataSource;\n    }\n    removeDataSource(dataSource) {\n        // console.log('Editor.removeDataSource', dataSource.getName());\n        const i = this.dataSources.indexOf(dataSource);\n        if (i === -1) throw new Error('no such dataSource');\n        this.dataSources.splice(i, 1);\n    }\n    createAction(data) {\n        const action = new ActionEditor(data, this);\n        action.init();\n        this.actions.push(action);\n        return action;\n    }\n    removeAction(action) {\n        // console.log('Editor.removeField', action.getName());\n        const i = this.actions.indexOf(action);\n        if (i === -1) throw new Error('no such action');\n        this.actions.splice(i, 1);\n    }\n\n}\n","class ActionEditor extends Editor {\n    /*constructor(data, parent) {\n        super(data, parent);\n    }*/\n\n    /*async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : 'getView',\n            params    : {\n                view : view,\n                page : this.data !== undefined ? this.form.page.getName() : null,\n                form : this.data !== undefined ? this.form.getName()      : null,\n            }\n        });\n    }*/\n\n    getParams() {\n        if (this.parent instanceof FormEditor) {\n            return {\n                pageFileName: this.parent.page.pageLink.getAttr('fileName'),\n                form        : this.parent.getAttr('name'),\n                action      : this.getAttr('name'),\n            };\n        } else if (this.parent instanceof PageEditor) {\n            return {\n                pageFileName: this.parent.pageLink.getAttr('fileName'),\n                action      : this.getAttr('name'),\n            };\n        }\n        return {\n            action: this.getAttr('name'),\n        };\n    }\n\n    async setValue(name, value) {\n        //console.log('ActionEditor.setValue', name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : 'save',\n            params    : {\n                ...this.getParams(),\n                attr        : name,\n                value       : value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : 'delete',\n            params    : {\n                ...this.getParams(),\n            }\n        });\n    }\n    async delete() {\n        console.log('ActionEditor.delete', this.getName());\n        await this.deleteData();\n        this.parent.removeAction(this);\n    }\n    moveUp() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Action',\n            action     : 'moveUp',\n            params     : {\n                ...this.getParams(),\n            }\n        });\n    }\n    moveDown() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Action',\n            action     : 'moveDown',\n            params     : {\n                ...this.getParams(),\n            }\n        });\n    }\n}\n","class ApplicationEditor extends Editor {\n\n    constructor(data) {\n        super(data);\n        this.databases   = [];\n        this.dataSources = [];\n        this.actions     = [];\n        this.pageLinks   = [];\n    }\n\n    init() {\n        console.log('ApplicationEditor.init', this.data);\n        // databases\n        for (const data of this.data.databases) {\n            this.createDatabase(data);\n        }\n\n        // dataSources\n        for (const data of this.data.dataSources) {\n            this.createDataSource(data);\n        }\n\n        // actions\n        for (const data of this.data.actions) {\n            this.createAction(data);\n        }\n\n        // pageLinks\n        for (const data of this.data.pageLinks) {\n            this.createPageLink(data);\n        }\n    }\n    createDatabase(data) {\n        const database = new DatabaseEditor(data, this);\n        database.init();\n        this.databases.push(database);\n        return database;\n    }\n    createPageLink(data) {\n        const pageLink = new PageLinkEditor(data, this);\n        pageLink.init();\n        this.pageLinks.push(pageLink);\n        return pageLink;\n    }\n    removeDatabase(database) {\n        console.log('ApplicationEditor.removeDatabase', database.getName());\n        const i = this.databases.indexOf(database);\n        if (i === -1) throw new Error('no such database');\n        this.databases.splice(i, 1);\n    }\n\n    removePageLink(pageLink) {\n        console.log('ApplicationEditor.removePageLink', pageLink.getName());\n        const i = this.pageLinks.indexOf(pageLink);\n        if (i === -1) throw new Error('no such pageLink');\n        this.pageLinks.splice(i, 1);\n    }\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'save',\n            params    : {\n                attr : name,\n                value: value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async newPageAndPageLinkData(params) {\n        params['menu'] = (params['startup'] === 'true') ? 'Pages' : '';\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : '_new',\n            params    : params\n        });\n    }\n\n    async newPage(params) {\n        const {page: pageData, pageLink: pageLinkData} = await this.newPageAndPageLinkData(params);\n        const pageLink = this.createPageLink(pageLinkData);\n        return new PageEditor(pageData, pageLink);\n    }\n\n    async newDatabase(params) {\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : '_new',\n            params    : params\n        });\n        return this.createDatabase(data);\n    }\n\n    async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'getView',\n            params    : {\n                app : this.getName(),\n                view: view\n            }\n        });\n    }\n\n    async saveView(text, view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'saveView',\n            params    : {\n                app : this.getName(),\n                view: view,\n                text: text\n            }\n        });\n    }\n\n    async saveController(text) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'saveController',\n            params    : {\n                app : this.getName(),\n                text: text\n            }\n        });\n    }\n\n    async createView() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'createView',\n            params    : {\n                app: this.getName()\n            }\n        });\n    }\n\n    async createController() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'createController',\n            params    : {\n                app: this.getName()\n            }\n        });\n    }\n\n    async createModelBackJs() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Application',\n            action    : 'createModelBackJs',\n            params    : {\n                app: this.getName()\n            }\n        });\n    }\n\n    async newDataSource(params) {\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'DataSource',\n            action    : '_new',\n            params    : params\n        });\n        return this.createDataSource(data);\n    }\n\n    async newAction(params) {\n        // params['pageFileName'] = this.page.pageLink.getFileName();\n        // params['form']         = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : '_new',\n            params    : params\n        });\n        return this.createAction(data);\n    }\n\n}\n","class ColumnEditor extends Editor {\n\n    constructor(data, table) {\n        super(data, table);\n        this.table = table;\n    }\n\n    async setValue(name, value) {\n        //console.log('ColumnEditor.setValue', name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Column',\n            action    : 'save',\n            params    : {\n                database: this.table.database.getName(),\n                table   : this.table.getName(),\n                column  : this.getName(),\n                attr    : name,\n                value   : value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Column',\n            action    : 'delete',\n            params    : {\n                database: this.table.database.getName(),\n                table   : this.table.getName(),\n                column  : this.getName(),\n            }\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeColumn(this);\n    }\n\n}\n","class DataSourceEditor extends Editor {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.keyColumns = [];\n    }\n\n    init() {\n        for (const data of this.data.keyColumns) {\n            this.createKeyColumn(data);\n        }\n    }\n\n    createKeyColumn(data) {\n        const keyColumn = new KeyColumnEditor(data, this);\n        keyColumn.init();\n        this.keyColumns.push(keyColumn);\n        return keyColumn;\n    }\n    removeKeyColumn(keyColumn) {\n        console.log('DatabaseEditor.removeParam', keyColumn.getName());\n        const i = this.keyColumns.indexOf(keyColumn);\n        if (i === -1) throw new Error('no such keyColumn');\n        this.keyColumns.splice(i, 1);\n    }\n    static async create(parent, params) {\n        if (parent instanceof FormEditor) {\n            const form = parent;\n            params['page']  = form.page.pageLink.getFileName();\n            params['form']  = form.getName();\n        }\n        if (parent instanceof PageEditor) {\n            const page = parent;\n            params['page']  = page.pageLink.getFileName();\n        }\n        return await FrontHostApp.doHttpRequest({\n            controller: 'DataSource',\n            action    : '_new',\n            params    : params\n        });\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const args = {\n            controller: 'DataSource',\n            action    : 'save',\n            params    : {\n                dataSource: this.getName(),\n                attr      : name,\n                value     : value\n            }\n        };\n        if (this.parent instanceof PageEditor) {\n            args.params.pageFileName = this.parent.pageLink.getFileName();\n        }\n        if (this.parent instanceof FormEditor) {\n            args.params.form         = this.parent.getName();\n            args.params.pageFileName = this.parent.page.pageLink.getFileName();\n        }\n        const data = await FrontHostApp.doHttpRequest(args);\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        const args = {\n            controller: 'DataSource',\n            action    : 'delete',\n            params    : {\n                dataSource: this.getName()\n            }\n        };\n        if (this.parent instanceof PageEditor) {\n            args.params.page = this.parent.pageLink.getFileName();\n        }\n        if (this.parent instanceof FormEditor) {\n            args.params.form = this.parent.getName();\n            args.params.page = this.parent.page.pageLink.getFileName();\n        }\n        await FrontHostApp.doHttpRequest(args);\n    }\n\n    async createModelBackJs() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'DataSource',\n            action    : 'createModelBackJs',\n            params    : {\n                ...(this.parent instanceof PageEditor ? {\n                    page        : this.parent.getName(),\n                    pageFileName: this.parent.pageLink.getFileName()\n                } : {}),\n                ...(this.parent instanceof FormEditor ? {\n                    form        : this.parent.getName(),\n                    page        : this.parent.page.getName(),\n                    pageFileName: this.parent.page.pageLink.getFileName()\n                } : {}),\n                dataSource: this.getName(),\n            }\n        });\n    }\n\n    async delete() {\n        await this.deleteData();\n        this.parent.removeDataSource(this);\n    }\n\n    async moveUp() {\n        const args = {\n            controller: 'DataSource',\n            action    : 'moveUp',\n            params    : {\n                dataSource: this.getName()\n            }\n        };\n        if (this.parent instanceof PageEditor) {\n            args.params.page = this.parent.pageLink.getFileName();\n        }\n        if (this.parent instanceof FormEditor) {\n            args.params.form = this.parent.getName();\n            args.params.page = this.parent.page.pageLink.getFileName();\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    async moveDown() {\n        const args = {\n            controller: 'DataSource',\n            action    : 'moveDown',\n            params    : {\n                dataSource: this.getName()\n            }\n        };\n        if (this.parent instanceof PageEditor) {\n            args.params.page = this.parent.pageLink.getFileName();\n        }\n        if (this.parent instanceof FormEditor) {\n            args.params.form = this.parent.getName();\n            args.params.page = this.parent.page.pageLink.getFileName();\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    async newKeyColumnData(name) {\n        const args = {\n            controller: 'KeyColumn',\n            action    : '_new',\n            params    : {\n                dataSource: this.getName(),\n                class     : 'KeyColumn',\n                name      : name\n            }\n        };\n        if (this.parent instanceof FormEditor) {\n            args.params.page = this.parent.page.pageLink.getFileName();\n            args.params.form = this.parent.getName();\n        }\n        if (this.parent instanceof PageEditor) {\n            args.params.page = this.parent.pageLink.getFileName();\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n    async newKeyColumn(name) {\n        const data = await this.newKeyColumnData(name);\n        return this.createKeyColumn(data);\n    }\n    async getView(view) {\n        const args = {\n            controller: 'DataSource',\n            action    : 'getView',\n            params    : {\n                dataSource: (this instanceof DataSourceEditor) ? this.getName() : undefined,\n                view      : view\n            }\n        };\n        if (this.parent instanceof PageEditor) {\n            args.params.pageFileName = (this instanceof DataSourceEditor) ? this.parent.pageLink.getFileName() : undefined;\n        }\n        if (this.parent instanceof FormEditor) {\n            args.params.pageFileName = (this instanceof DataSourceEditor) ? this.parent.page.pageLink.getFileName() : undefined;\n            args.params.form         = (this instanceof DataSourceEditor) ? this.parent.getName()                   : undefined;\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    async saveController(text) {\n        const args = {\n            controller: 'DataSource',\n            action    : 'saveController',\n            params    : {\n                dataSource: this.getName(),\n                text      : text\n            }\n        };\n        if (this.parent instanceof PageEditor) {\n            args.params.pageFileName = this.parent.pageLink.getFileName();\n        }\n        if (this.parent instanceof FormEditor) {\n            args.params.pageFileName = this.parent.page.pageLink.getFileName();\n            args.params.form         = this.parent.getName();\n        }\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    async createController() {\n        const args = {\n            controller: 'DataSource',\n            action    : 'createController',\n            params    : {\n                page        : this.parent.page.getName(),\n                pageFileName: this.parent.page.pageLink.getFileName(),\n                form        : this.parent.getName(),\n                dataSource  : this.getName()\n            }\n        };\n        return await FrontHostApp.doHttpRequest(args);\n    }\n\n    getFullName() {\n        if (this.parent instanceof FormEditor) {\n            return [this.parent.parent.getName(), this.parent.getName(), this.getName()].join('.');\n        } else if (this.parent instanceof PageEditor) {\n            return [this.parent.getName(), this.getName()].join('.');\n        } else if (this.parent instanceof ApplicationEditor) {\n            return this.getName();\n        }\n    }\n\n}\n","class DatabaseEditor extends Editor {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.params = [];\n        this.tables = [];\n    }\n\n    init() {\n\n        // params\n        for (const data of this.data.params) {\n            this.createParam(data);\n        }\n\n        // tables\n        for (const data of this.data.tables) {\n            this.createTable(data);\n        }\n    }\n\n    createParam(data) {\n        const param = new ParamEditor(data, this);\n        param.init();\n        this.params.push(param);\n        return param;\n    }\n\n    createTable(data) {\n        const table = new TableEditor(data, this);\n        table.init();\n        this.tables.push(table);\n        return table;\n    }\n    removeParam(param) {\n        console.log('DatabaseEditor.removeParam', param.getName());\n        const i = this.params.indexOf(param);\n        if (i === -1) throw new Error('no such param');\n        this.params.splice(i, 1);\n    }\n    removeTable(table) {\n        console.log('DatabaseEditor.removeTable', table.getName());\n        const i = this.tables.indexOf(table);\n        if (i === -1) throw new Error('no such table');\n        this.tables.splice(i, 1);\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : 'save',\n            params    : {\n                database: this.getName(),\n                attr    : name,\n                value   : value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : 'delete',\n            params    : {\n                database: this.getName()\n            }\n        });\n    }\n\n    async delete() {\n        await this.deleteData();\n        this.parent.removeDatabase(this);\n    }\n\n    async newParam(name) {\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Param',\n            action    : '_new',\n            params    : {\n                database: this.getName(),\n                class   : 'Param',\n                name    : name\n            }\n        });\n        return this.createParam(data);\n    }\n\n    async newTable(params) {\n        if (!params.name) throw new Error('newTable: no name');\n        const data =  await FrontHostApp.doHttpRequest({\n            controller: 'Table',\n            action    : '_new',\n            params    : {\n                database: this.getName(),\n                class   : 'Table',\n                name    : params.name,\n                columns : params.columns\n            }\n        });\n        return this.createTable(data);\n    }\n\n    async getView(view) {\n        console.log('DatabaseEditor.getView', view);\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : 'getView',\n            params    : {\n                view    : view,\n                database: this.data !== undefined ? this.getName() : null\n            }\n        });\n    }\n\n    async getTableInfo(table) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Database',\n            action    : 'getTableInfo',\n            params    : {\n                database: this.data !== undefined ? this.getName() : null,\n                table   : table\n            }\n        });\n    }\n    moveUp() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Database',\n            action     : 'moveUp',\n            params    : {\n                database: this.getName()\n            }\n        });\n    }\n    moveDown() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Database',\n            action     : 'moveDown',\n            params    : {\n                database: this.getName()\n            }\n        });\n    }\n\n}\n","class FieldEditor extends Editor {\n\n    constructor(data, form) {\n        super(data, form);\n        this.form = form;\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'save',\n            params    : {\n                pageFileName: this.form.page.pageLink.getFileName(),\n                form        : this.form.getName(),\n                field       : this.getName(),\n                attr        : name,\n                value       : value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller : 'Field',\n            action     : 'delete',\n            params     : {\n                pageFileName:this.form.page.pageLink.getFileName(),\n                form        :this.form.getName(),\n                field       :this.getName()\n            }\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeField(this);\n    }\n    async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'getView',\n            params    : {\n                view : view,\n                page : this.data !== undefined ? this.form.page.getName() : null,\n                form : this.data !== undefined ? this.form.getName()      : null,\n                field: this.data !== undefined ? this.getName()           : null\n            }\n        });\n    }\n\n    async saveView(text, view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'saveView',\n            params    : {\n                page : this.form.page.getName(),\n                form : this.form.getName(),\n                field: this.getName(),\n                view : view,\n                text : text\n            }\n        });\n    }\n\n    async saveController(text) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'saveController',\n            params    : {\n                page : this.form.page.getName(),\n                form : this.form.getName(),\n                field: this.getName(),\n                text : text\n            }\n        });\n    }\n\n    async createView() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'createView',\n            params    : {\n                page : this.form.page.getName(),\n                form : this.form.getName(),\n                field: this.getName(),\n                class: this.getClassName()\n            }\n        });\n    }\n\n    async createStyle() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'createStyle',\n            params    : {\n                page : this.form.page.getName(),\n                form : this.form.getName(),\n                field: this.getName(),\n                class: this.getClassName()\n            }\n        });\n    }\n\n    async createController() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'createController',\n            params    : {\n                page : this.form.page.getName(),\n                form : this.form.getName(),\n                field: this.getName(),\n                class: this.getClassName()\n            }\n        });\n    }\n\n    async changeClass(params) {\n        params['page']  = this.form.page.getName();\n        params['form']  = this.form.getName();\n        params['field'] = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : 'changeClass',\n            params    : params\n        });\n        return this.data = data;\n    }\n\n    moveUp() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Field',\n            action     : 'moveUp',\n            params     : {\n                pageFileName: this.form.page.pageLink.getFileName(),\n                form        : this.form.getName(),\n                field       : this.getName()\n            }\n        });\n    }\n\n    moveDown() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Field',\n            action     : 'moveDown',\n            params     : {\n                pageFileName: this.form.page.pageLink.getFileName(),\n                form        : this.form.getName(),\n                field       : this.getName()\n            }\n        });\n    }\n\n}\n","class FormEditor extends Editor {\n\n    constructor(data, page) {\n        super(data, page);\n        this.page   = page;\n        this.dataSources = [];\n        this.fields      = [];\n        this.actions     = [];\n    }\n\n    init() {\n        // dataSources\n        for (const data of this.data.dataSources) {\n            this.createDataSource(data);\n        }\n\n        // actions\n        for (const data of this.data.actions) {\n            this.createAction(data);\n        }\n\n        // fields\n        for (const data of this.data.fields) {\n            this.createField(data);\n        }\n    }\n    createField(data) {\n        const field = new FieldEditor(data, this);\n        field.init();\n        this.fields.push(field);\n        return field;\n    }\n    removeField(field) {\n        console.log('FormEditor.removeField', field.getName());\n        const i = this.fields.indexOf(field);\n        if (i === -1) throw new Error('no such field');\n        this.fields.splice(i, 1);\n    }\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'save',\n            params    : {\n                pageFileName: this.page.pageLink.getFileName(),\n                form        : this.getName(),\n                attr        : name,\n                value       : value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'delete',\n            params    : {\n                pageFileName: this.page.pageLink.getFileName(),\n                form        : this.getName()\n            }\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeForm(this);\n    }\n    moveUp() {\n        const args = {\n            controller: 'Form',\n            action    : 'moveUp',\n            params    : {\n                pageFileName: this.page.pageLink.getFileName(),\n                form        : this.getName()\n            }\n        };\n        return FrontHostApp.doHttpRequest(args);\n    }\n\n    moveDown() {\n        const args = {\n            controller: 'Form',\n            action    : 'moveDown',\n            params    : {\n                pageFileName: this.page.pageLink.getFileName(),\n                form        : this.getName()\n            }\n        };\n        return FrontHostApp.doHttpRequest(args);\n    }\n\n    async newField(params) {\n        params['pageFileName'] = this.page.pageLink.getFileName();\n        params['form']         = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Field',\n            action    : '_new',\n            params    : params\n        });\n        return this.createField(data);\n    }\n\n    async newAction(params) {\n        params['pageFileName'] = this.page.pageLink.getFileName();\n        params['form']         = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : '_new',\n            params    : params\n        });\n        return this.createAction(data);\n    }\n\n    async newDataSource(params) {\n        params['page']  = this.page.pageLink.getFileName();\n        params['form']  = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'DataSource',\n            action    : '_new',\n            params    : params\n        });\n        return this.createDataSource(data);\n    }\n\n    async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'getView',\n            params    : {\n                view: view,\n                page: this.data !== undefined ? this.page.getName() : null,\n                form: this.data !== undefined ? this.getName()      : null\n            }\n        });\n    }\n\n    async saveView(text, view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'saveView',\n            params    : {\n                page: this.page.getName(),\n                form: this.getName(),\n                view: view,\n                text: text\n            }\n        });\n    }\n\n    async saveController(text) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'saveController',\n            params    : {\n                page: this.page.getName(),\n                form: this.getName(),\n                text: text\n            }\n        });\n    }\n\n    async createModelBackJs() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'createModelBackJs',\n            params    : {\n                page: this.page.getName(),\n                form: this.getName(),\n            }\n        });\n    }\n\n    async createView() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'createView',\n            params    : {\n                page : this.page.getName(),\n                form : this.getName(),\n                class: this.getClassName()\n            }\n        });\n    }\n\n    async createController() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'createController',\n            params    : {\n                page : this.page.getName(),\n                form : this.getName(),\n                class: this.getClassName()\n            }\n        });\n    }\n\n    async createStyle() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : 'createStyle',\n            params    : {\n                page : this.page.getName(),\n                form : this.getName(),\n                class: this.getClassName()\n            }\n        });\n    }\n\n}\n","class KeyColumnEditor extends Editor {\n\n    constructor(data, dataSource) {\n        super(data, dataSource);\n        this.dataSource = dataSource;\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'KeyColumn',\n            action    : 'save',\n            params    : {\n                form        : this.dataSource.parent.getName(),\n                pageFileName: this.dataSource.parent.page.pageLink.getFileName(),\n                dataSource  : this.dataSource.getName(),\n                keyColumn   : this.getName(),\n                attr        : name,\n                value       : value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'KeyColumn',\n            action    : 'delete',\n            params    : {\n                // page      : this.dataSource.parent.page.pageLink.getFileName(),\n                ...(this.getPage() ? {page: this.getPage().pageLink.getFileName()} : {}),\n                // form      : this.dataSource.parent.getName(),\n                ...(this.getForm() ? {form: this.getForm().getName()}: {}),\n                dataSource: this.dataSource.getName(),\n                keyColumn : this.getName()\n            }\n        });\n    }\n    getPage() {\n        if (this.dataSource.parent.constructor.name === 'FormEditor') {\n            return this.dataSource.parent.page;\n        }\n        if (this.dataSource.parent.constructor.name === 'PageEditor') {\n            return this.dataSource.parent;\n        }\n        return null;\n    }\n    getForm() {\n        if (this.dataSource.parent.constructor.name === 'FormEditor') {\n            return this.dataSource.parent;\n        }\n        return null;\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeKeyColumn(this);\n    }\n\n\n}\n","class PageEditor extends Editor {\n\n    constructor(data, pageLink) {\n        super(data);\n        this.pageLink    = pageLink;\n        this.dataSources = [];\n        this.actions     = [];\n        this.forms       = [];\n    }\n\n    init() {\n        // data sources\n        for (const data of this.data.dataSources) {\n            this.createDataSource(data);\n        }\n\n        // actions\n        for (const data of this.data.actions) {\n            this.createAction(data);\n        }\n\n        // forms\n        for (const data of this.data.forms) {\n            this.createForm(data);\n        }\n    }\n    createForm(data) {\n        const form = new FormEditor(data, this);\n        form.init();\n        this.forms.push(form);\n        return form;\n    }\n    removeForm(form) {\n        console.log('Page.removeForm', form.getName());\n        const i = this.forms.indexOf(form);\n        if (i === -1) throw new Error('no such form');\n        this.forms.splice(i, 1);\n    }\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'save',\n            params    : {\n                fileName: this.pageLink.getFileName(),\n                attr    : name,\n                value   : value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'delete',\n            params    : {\n                page: this.getName()\n            }\n        });\n    }\n\n    async delete() {\n        console.log('PageEditor.delete', this.getName());\n        await this.deleteData();\n        this.pageLink.remove();\n    }\n\n    async newForm(params) {\n        params['pageFileName'] = this.pageLink.getFileName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Form',\n            action    : '_new',\n            params    : params\n        });\n        return this.createForm(data);\n    }\n\n    async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'getView',\n            params    : {\n                view: view,\n                page: this.data !== undefined ? this.getName() : null\n            }\n        });\n    }\n\n    async saveView(text, view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'saveView',\n            params    : {\n                page: this.getName(),\n                view: view,\n                text: text\n            }\n        });\n    }\n\n    async saveController(text) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'saveController',\n            params    : {\n                page: this.getName(),\n                text: text\n            }\n        });\n    }\n\n    async createView() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'createView',\n            params    : {\n                page: this.getName()\n            }\n        });\n    }\n\n    async createController() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'createController',\n            params    : {\n                page: this.getName()\n            }\n        });\n    }\n    async createStyle() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'createStyle',\n            params    : {\n                page: this.getName()\n            }\n        });\n    }\n    async createModelBackJs() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'createModelBackJs',\n            params    : {\n                page: this.getName()\n            }\n        });\n    }\n\n    async newAction(params) {\n        params['pageFileName'] = this.pageLink.getFileName();\n        // params['form']         = this.getName();\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Action',\n            action    : '_new',\n            params    : params\n        });\n        return this.createAction(data);\n    }\n\n}\n","class PageLinkEditor extends Editor {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.application = parent;\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'PageLink',\n            action    : 'save',\n            params    : {\n                pageLink: this.getName(),\n                attr    : name,\n                value   : value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async moveUp() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'PageLink',\n            action    : 'moveUp',\n            params    : {\n                page: this.getName()\n            }\n        });\n    }\n\n    async moveDown() {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'PageLink',\n            action    : 'moveDown',\n            params    : {\n                page: this.getName()\n            }\n        });\n    }\n\n    getFileName() {\n        return this.data['@attributes'].fileName;\n    }\n    remove() {\n        console.log('PageLinkEditor.remove', this.getName());\n        this.parent.removePageLink(this);\n    }\n\n}\n","class ParamEditor extends Editor {\n\n    constructor(data, database) {\n        super(data, database);\n        this.database = database;\n    }\n\n    async setValue(name, value) {\n        //console.log(name + ' = ' + value);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Param',\n            action    : 'save',\n            params    : {\n                database: this.database.getName(),\n                param   : this.getName(),\n                attr    : name,\n                value   : value\n            }\n        });\n        this.setAttr(name, value);\n        return data;\n    }\n\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Param',\n            action    : 'delete',\n            params    : {\n                database: this.database.getName(),\n                param   : this.getName()\n            }\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeParam(this);\n    }\n}\n","class TableEditor extends Editor {\n    constructor(data, database) {\n        super(data, database);\n        this.database = database;\n        this.columns = [];\n    }\n\n    init() {\n        for (const data of this.data.columns) {\n            this.createColumn(data);\n        }\n    }\n\n    createColumn(data) {\n        const column = new ColumnEditor(data, this);\n        column.init();\n        this.columns.push(column);\n        return column;\n    }\n    removeColumn(column) {\n        console.log('TableEditor.removeColumn', column.getName());\n        const i = this.columns.indexOf(column);\n        if (i === -1) throw new Error('no such column');\n        this.columns.splice(i, 1);\n    }\n\n    async newColumn(name) {\n        if (!name) throw new Error(`newColumn: no name`);\n        const data = await FrontHostApp.doHttpRequest({\n            controller: 'Column',\n            action    : '_new',\n            params    : {\n                database: this.database.getName(),\n                table   : this.getName(),\n                name    : name\n            }\n        });\n        return this.createColumn(data);\n    }\n    async deleteData() {\n        await FrontHostApp.doHttpRequest({\n            controller: 'Table',\n            action    : 'delete',\n            params    : {\n                database: this.database.getName(),\n                table   : this.getName()\n            }\n        });\n    }\n    async delete() {\n        await this.deleteData();\n        this.parent.removeTable(this);\n    }\n\n    moveUp() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Table',\n            action     : 'moveUp',\n            params     : {\n                database: this.database.getName(),\n                table   : this.getName()\n            }\n        });\n    }\n\n    moveDown() {\n        return FrontHostApp.doHttpRequest({\n            controller : 'Table',\n            action     : 'moveDown',\n            params     : {\n                database: this.database.getName(),\n                table   : this.getName()\n            }\n        });\n    }\n\n}\n","class EditorFrontHostApp extends FrontHostApp {\n    constructor(data, runAppLink) {\n        console.log('EditorFrontHostApp.constructor', data);\n        if (!data) throw new Error('no data');\n        super();\n        this.data = data;\n        EditorFrontHostApp.editorApp = this;\n        this.runAppLink = runAppLink;\n        this.view = null;\n        this.actionList = null;\n        this.treeWidget2 = null;\n        this.pg = null;                 // property grid\n        this.items = null;              // treeWidget2 items\n        this.tabWidget = null;\n        this.documents = [];\n        this.modal = null;\n    }\n\n    async run() {\n        console.log('EditorFrontHostApp.run');\n\n        // app\n        const app = new ApplicationEditor(this.data.app);\n        app.init();\n        // console.log('app:', app);\n\n        // application controller\n        const applicationController = new ApplicationController(app, this);\n        applicationController.init();\n        this.items = [applicationController];\n\n        // view\n        this.view = Helper.createReactComponent(document.querySelector('.editor__root'), EditorFrontHostAppView, {ctrl: this});\n    }\n\n    deinit() {\n    }\n    onItemOpen2 = async item => {\n        console.log('EditorFrontHostApp.onItemOpen2', item.getTitle());\n        // console.log('parent:', item.view.parent);\n        if (item instanceof PageLinkController && !item.hasPage()) {\n            await item.loadPage();\n        }\n    }\n    onItemSelect2 = async item => {\n        console.log('EditorFrontHostApp.onItemSelect2', item ? item.getTitle() : null);\n        if (item instanceof ModelController) {\n            if (item instanceof PageLinkController && !item.hasPage()) {\n                await item.loadPage();\n            }\n            this.fillActions(item);\n            this.fillPropertyGrid(item);\n        } else {\n            this.clearActions();\n            this.endEdit();\n        }\n    }\n\n    fillPropertyGrid(ctrl) {\n        const propList = ctrl.getPropList();\n        this.beginEdit(propList['list'], propList['options']);\n    }\n\n    onPropertyGrid2Change = (name, value) => {\n        console.log('EditorFrontHostApp.onPropertyGrid2Change', name, value);\n        const controller = this.treeWidget2.getSelectedItem();\n        // console.log('controller', controller);\n        controller.setProperty(name, value);\n    }\n\n    beginEdit(obj, options) {\n        console.log('EditorFrontHostApp.beginEdit', obj, options);\n        this.pg.setState({object: {obj, options}});\n    }\n\n    endEdit() {\n        console.log('EditorFrontHostApp.endEdit');\n        this.pg.setState({object: null});\n    }\n\n    static async fetchPageData(fileName) {\n        console.log('EditorFrontHostApp.fetchPageData', fileName);\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Page',\n            action    : 'get',\n            params    : {fileName}\n        });\n    }\n\n    fillActions(item) {\n        // console.log('EditorFrontHostApp.fillActions');\n        this.actionList.setState({item});\n    }\n    clearActions() {\n        // console.log('EditorFrontHostApp.clearActions');\n        this.actionList.setState({item: null});\n    }\n\n    onItemDoubleClick2 = async item => {\n        console.log('EditorFrontHostApp.onItemDoubleClick2', item.getTitle());\n        const controller = item instanceof PageLinkController ? item.pageController : item;\n        if (!controller || !(controller instanceof DocumentController)) return;\n        await this.openDocument(controller);\n    }\n    async openDocument(controller) {\n        console.log('EditorFrontHostApp.openDocument', controller.getTitle());\n        let document = this.findDocument(controller);\n        if (!document) {\n            document = await controller.createDocument();\n            this.documents.push(document);\n            // console.log('document:', document);\n        }\n        this.tabWidget.state.active = this.documents.indexOf(document);\n        await this.view.rerender();\n    }\n    findDocument(controller) {\n        return this.documents.find(document => document.controller === controller) || null;\n    }\n    onDocumentClose = i => {\n        console.log('EditorFrontHostApp.onDocumentClose', i, this.tabWidget.state.active);\n        const document = this.documents[i];\n        const activeDocument = this.documents[this.tabWidget.state.active];\n        this.documents.splice(i, 1);\n        document.controller.onDocumentClose();\n        if (document === activeDocument) {\n            if (this.documents.length) {\n                if (this.tabWidget.state.active >= this.documents.length) {\n                    this.tabWidget.state.active = this.documents.length - 1;\n                }\n            } else {\n                this.tabWidget.state.active = null;\n            }\n        } else {\n            this.tabWidget.state.active = this.documents.indexOf(activeDocument);\n        }\n        this.view.rerender();\n    }\n    async openModal(modalController) {\n        console.log('EditorFrontHostApp.openModal');\n        this.modal = modalController;\n        await this.view.rerender();\n    }\n    async onModalClose() {\n        console.log('EditorFrontHostApp.onModalClose');\n        this.modal = null;\n        await this.view.rerender();\n    }\n    onActionClick = async actionName => {\n        console.log('EditorFrontHostApp.onActionClick', actionName);\n        const item = this.treeWidget2.getSelectedItem();\n        // console.log('item', item);\n        const controller = item instanceof PageLinkController ? item.pageController : item;\n        await controller.doAction(actionName);\n    }\n}\n\n","class FormWizard {\n    static create(params) {\n        console.log('FormWizard.create', params);\n        switch (params.model.database.getClassName()) {\n            case 'MySqlDatabase'     : return new MySqlFormWizard(params);\n            case 'PostgreSqlDatabase': return new PostgreSqlFormWizard(params);\n            default: throw new Error(`unknown database class: ${params.model.database.getClassName()}`);\n        }\n    }\n\n    constructor(params) {\n        console.log('FormWizard.constructor', params);\n        this.params        = params;\n        this.model         = params.model;\n        this.databaseName  = params.model.database.getName();\n        this.tableName     = params.model.getName();\n        this.tableColumns  = Object.keys(params.model.data.columns).map(name => params.model.data.columns[name]['@attributes']);\n    }\n\n    getDataSources() {\n        return [\n            {\n                class     : 'SqlDataSource',\n                name      : 'default',\n                database  : this.databaseName,\n                table     : this.tableName,\n                limit     : this.params.className === 'TableForm' ? '100' : '',\n                countQuery   : this.getCountQuery(),\n                singleQuery  : this.getSingleQuery(),\n                multipleQuery: this.getMultipleQuery()\n            }\n        ];\n    }\n\n    getFieldClass(column) {\n        if (column.type === 'date') return 'DateField';\n        if (column.type === 'boolean') return 'CheckBoxField';\n        if (this.params.className === 'RowForm') {\n            if (column.dbType === 'text') {\n                return 'TextAreaField';\n            }\n            if (column.dbType === 'json') {\n                return 'TextAreaField';\n            }\n        }\n        return 'TextBoxField';\n    }\n\n    getField(column) {\n        // console.log('FormWizard.getField', column);\n        let field = {\n            class: this.getFieldClass(column),\n            name : column.name,\n            caption: column.caption || column.name\n        };\n        if (column.key === 'true') {\n            if (column.auto === 'false') {\n                field.notNull = 'true';\n            }\n        } else {\n            if (column.nullable === 'false') {\n                field.notNull = 'true';\n                field.readOnly = 'false';\n            }\n        }\n        if (column.auto === 'true') {\n            field.readOnly = 'true';\n        }\n        if (column.type === 'date' && column.dbType === 'timestamp without time zone') {\n            field.timezone = 'false';\n        }\n        return field;\n    }\n\n    getFields() {\n        /*let fields = {};\n        this.getColumns().forEach(column => {\n            fields[column.name] = this.getField(column);\n        });\n        return fields;*/\n        return this.getColumns().map(column => this.getField(column));\n    }\n\n    getColumns() {\n        return this.tableColumns.filter(column => {\n            if (this.params.className === 'TableForm') {\n                if (column.dbType === 'text') return false;\n                if (column.dbType === 'bytea') return false;\n            }\n            return true;\n        });\n    }\n\n    getFormParams() {\n        return {\n            name       : this.params.formName,\n            caption    : this.params.formCaption,\n            class      : this.params.className,\n            dataSources: this.getDataSources(),\n            fields     : this.getFields()\n        };\n    }\n}\n","class MySqlFormWizard extends FormWizard {\n\n    getSingleQuery() {\n        const columns = this.tableColumns.map(column => column.name);\n        return 'select\\n{columns}\\nfrom `{table}`\\nwhere id = {key}'\n            .replace('{table}',   this.tableName)\n            .replace('{columns}', columns.map(column => {return '    `' + column + '`';}).join(',\\n'));\n    }\n\n    getMultipleQuery() {\n        const columns = this.tableColumns.map(column => column.name);\n        return 'select\\n{columns}\\nfrom `{table}`\\nlimit {offset}, {limit}'\n            .replace('{table}',   this.tableName)\n            .replace('{columns}', columns.map(column => {return '    `' + column + '`';}).join(',\\n'));\n    }\n\n    getCountQuery() {\n        console.log('MySqlFormWizard.getCountQuery');\n        return 'select count(*) from `{table}`'.replace('{table}', this.tableName);\n    }\n}\n","class PostgreSqlFormWizard extends FormWizard {\n\n    getSingleQuery() {\n        console.log('PostgreSqlFormWizard.getSingleQuery');\n        const columns = this.getColumns().map(column => column.name);\n        return 'select\\n{columns}\\nfrom \"{table}\"\\nwhere id = {key}'\n            .replace('{table}',   this.tableName)\n            .replace('{columns}', columns.map(column => `    \"${column}\"`).join(',\\n'));\n    }\n\n    getMultipleQuery() {\n        console.log('PostgreSqlFormWizard.getMultipleQuery');\n        const columns = this.getColumns().map(column => column.name);\n        const _columns = columns.map(column => `    \"${column}\"`).join(',\\n');\n        return `select\\n${_columns}\\nfrom \"${this.tableName}\"\\nlimit {limit}\\noffset {offset}`;\n    }\n\n    getCountQuery() {\n        console.log('PostgreSqlFormWizard.getCountQuery');\n        return `select count(*) from \"${this.tableName}\"`;\n    }\n}\n","class ModalController {\n    constructor(options) {\n        this.options = options;\n    }\n    onClose = async e => {\n        console.log('ModalController.onClose');\n        await this.close();\n    }\n    onCreate = async values => {\n        console.log('ModalController.onCreate', values);\n        await this.close();\n        if (this.options.onCreate) {\n            await this.options.onCreate(values);\n        }\n    }\n    async close() {\n        await EditorFrontHostApp.editorApp.onModalClose();\n    }\n    getViewClass() {\n        throw new Error('ModalController.getViewClass not implemented');\n    }\n}\n","class ChangeClassController extends ModalController {\n    getViewClass() {\n        return ChangeClassView;\n    }\n}\n","class NewActionController extends ModalController {\n    getViewClass() {\n        return NewActionView;\n    }\n}\n","class NewColumnController extends ModalController {\n    getViewClass() {\n        return NewColumnView;\n    }\n}\n","class NewDataSourceController extends ModalController {\n    getViewClass() {\n        return NewDataSourceView;\n    }\n}\n","class NewDatabaseController extends ModalController {\n    getViewClass() {\n        return NewDatabaseView;\n    }\n}","class NewFieldController extends ModalController {\n    getViewClass() {\n        return NewFieldView;\n    }\n}\n","class NewFormController extends ModalController {\n    getViewClass() {\n        return NewFormView;\n    }\n}\n","class NewFormFromTableController extends ModalController {\n    getViewClass() {\n        return NewFormFromTableView;\n    }\n}\n","class NewKeyColumnController extends ModalController {\n    getViewClass() {\n        return NewKeyColumnView;\n    }\n}","class NewPageController extends ModalController {\n    getViewClass() {\n        return NewPageView;\n    }\n}\n","class NewParamController extends ModalController {\n    getViewClass() {\n        return NewParamView;\n    }\n}","class NewTableController extends ModalController {\n    getViewClass() {\n        return NewTableView;\n    }\n}\n","class ModelController {\n    constructor(model, parent = null) {\n        // super();\n        this.model = model;\n        this.parent = parent;\n        this.view = null;\n    }\n    init() {\n    }\n    getTitle() {\n        return this.model.getName();\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n        };\n    }\n    getPropList() {\n        return {\n            list   : this.model.data['@attributes'],\n            options: {}\n        };\n    }\n    async setProperty(name, value) {\n        await this.model.setValue(name, value);\n    }\n    /*getObject(col, name) {\n        return this[col].find(obj => obj.model.getName() === name);\n    }*/\n    async doAction(name) {\n        throw new Error(`${this.constructor.name}.doAction('${name}') not implemented`);\n    }\n    getDocumentViewClass() {\n        console.log(`${this.constructor.name}.getDocumentViewClass`);\n        return null;\n    }\n    moveColItem(colName, item, offset) {\n        Helper.moveArrItem(this[colName], item, offset);\n    }\n}\n","class ActionController extends ModelController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    getActions() {\n        return [\n            {'action': 'moveUp'     , 'caption': 'Move Up'     },\n            {'action': 'moveDown'   , 'caption': 'Move Down'   },\n            {'action': 'delete', 'caption': 'Delete'}\n        ];\n    }\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('actions', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('actions', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n        }\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeAction(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n}\n","class ColumnController extends ModelController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    getActions() {\n        return [\n            {'action': 'delete', 'caption': 'Delete'}\n        ];\n    }\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n        }\n    }\n    static async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Column',\n            action    : 'getView',\n            params    : {\n                view: view\n            }\n        });\n    }\n    getPropList() {\n        const propList = super.getPropList();\n        propList.options['key']      = ['true', 'false'];\n        propList.options['auto']     = ['true', 'false'];\n        propList.options['nullable'] = ['true', 'false'];\n        propList.options['type']     = ['', 'string', 'number', 'boolean', 'object', 'date'];\n        /*propList.options['dbType']   = [\n            '',\n            'integer',\n            'character varying',\n            'boolean',\n            'timestamp with time zone',\n            'text',\n            'json',\n        ];*/\n        return propList;\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeColumn(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n}\n","class DocumentController extends ModelController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.document = null;\n    }\n    async createDocument() {\n        const document = {\n            controller: this,\n            view      : null,\n        };\n        return this.document = document;\n    }\n    onDocumentClose() {\n        console.log('DocumentController.onDocumentClose', this.getTitle());\n        this.document = null;\n    }\n}\n","class DataSourceController extends DocumentController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.keyColumns = [];\n        this.items = [\n            {\n                getTitle: () => 'Key Columns',\n                items: this.keyColumns\n            }\n        ];\n    }\n    getTitle() {\n        return `${this.model.getClassName()}: ${this.model.getName()}`;\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'brown'\n        };\n    }\n    init() {\n        this.model.keyColumns.forEach(keyColumn => this.createKeyColumn(keyColumn));\n    }\n    createKeyColumn(model) {\n        const keyColumn = new KeyColumnController(model, this);\n        keyColumn.init();\n        this.keyColumns.push(keyColumn);\n        return keyColumn;\n    }\n    removeKeyColumn(keyColumnController) {\n        console.log('DataSourceController.removeKeyColumn', keyColumnController.getTitle());\n        const i = this.keyColumns.indexOf(keyColumnController);\n        if (i === -1) throw new Error('no such keyColumnController');\n        this.keyColumns.splice(i, 1);\n    }\n    getActions() {\n        return [\n            {'action' : 'newItem', 'caption': 'New Key Column'},\n            {'action':  'moveUp', 'caption':   'Move Up'},\n            {'action':'moveDown', 'caption': 'Move Down'},\n            {'action' : 'delete', 'caption': 'Delete'}\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'newItem':\n                await this.actionNewKeyColumn();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('dataSources', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('dataSources', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n        }\n    }\n\n    async actionNewKeyColumn() {\n        await EditorFrontHostApp.editorApp.openModal(new NewKeyColumnController({onCreate: async values => {\n            const keyColumn = await this.model.newKeyColumn(values.name);\n            const keyColumnController = this.createKeyColumn(keyColumn);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(keyColumnController);\n            keyColumnController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    getPropList() {\n        const propList = {\n            list   : {},\n            options: {}\n        };\n\n        // list\n        for (const name in this.model.data['@attributes']) {\n            if (!['countQuery', 'singleQuery', 'multipleQuery'].includes(name)) {\n                propList.list[name] = this.model.data['@attributes'][name];\n            }\n        }\n\n        return propList;\n    }\n    getDocumentViewClass() {\n        if (this.model.getClassName() === 'SqlDataSource') return SqlDataSourceView;\n        return super.getDocumentViewClass();\n    }\n    async onSaveClick(name, value) {\n        // console.log('DataSourceController.onSaveClick', name, value);\n        await this.model.setValue(name, value);\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeDataSource(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n    onCreateModelBack = async e => {\n        const data = await this.model.createModelBackJs();\n    }\n}\n","class DatabaseController extends DocumentController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.tableName = null;\n        this.tableInfo = null;\n        this.params  = [];\n        this.tables = [];\n        this.items = [\n            {\n                getTitle: () => 'Params',\n                items: this.params\n            },\n            {\n                getTitle: () => 'Tables',\n                items: this.tables\n            }\n        ];\n    }\n    getTitle() {\n        return `${this.model.getClassName()}: ${this.model.getName()}`;\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'purple'\n        };\n    }\n    init() {\n        this.model.params.forEach(param => this.createParam(param));\n        this.model.tables.forEach(table => this.createTable2(table));\n    }\n    createParam(model) {\n        const param = new ParamController(model, this);\n        param.init();\n        this.params.push(param);\n        return param;\n    }\n    createTable2(model) {\n        const table = new TableController(model, this);\n        table.init();\n        this.tables.push(table);\n        return table;\n    }\n    removeParam(paramController) {\n        console.log('DatabaseController.removeParam', paramController.getTitle());\n        const i = this.params.indexOf(paramController);\n        if (i === -1) throw new Error('no such paramController');\n        this.params.splice(i, 1);\n    }\n    removeTable2(tableController) {\n        console.log('DatabaseController.removeTable2', tableController.getTitle());\n        const i = this.tables.indexOf(tableController);\n        if (i === -1) throw new Error('no such tableController');\n        this.tables.splice(i, 1);\n    }\n    getActions() {\n        return [\n            {'action': 'newParam', 'caption': 'New Param'},\n            {'action': 'newTable', 'caption': 'New Table'},\n            {'action': 'moveUp'  , 'caption': 'Move Up'  },\n            {'action': 'moveDown', 'caption': 'Move Down'},\n            {'action': 'delete'  , 'caption': 'Delete'   }\n        ];\n    }\n    async doAction(name) {\n        switch (name) {\n            case 'newParam':\n                await this.actionNewParam();\n                break;\n            case 'newTable':\n                await this.actionNewTable();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('databases', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('databases', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            default:\n                throw new Error(`unknown action: ${name}`);\n        }\n    }\n    async actionNewParam() {\n        await EditorFrontHostApp.editorApp.openModal(new NewParamController({onCreate: async values => {\n            const param = await this.model.newParam(values.name);\n            const paramController = this.createParam(param);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(paramController);\n            paramController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n    async actionNewTable() {\n        await EditorFrontHostApp.editorApp.openModal(new NewTableController({onCreate: async values => {\n            const table = await this.model.newTable({name: values.name});\n            const tableController = this.createTable2(table);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(tableController);\n            tableController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n    async createDocument() {\n        const document = await super.createDocument();\n        const result = await this.model.getView('DatabaseView/DatabaseView.html');\n        // console.log('data:', result.data);\n        document.treeWidgetItems = result.data.tables.sort().map(tableName => ({getTitle: () => tableName}))\n        return document;\n    }\n    onTableSelect2 = async item => {\n        console.log('DatabaseController.onTableSelect2', item.getTitle());\n        const tableName = item.getTitle();\n        this.tableName = tableName;\n        const data = await this.model.getTableInfo(tableName);\n        this.tableInfo = data.tableInfo;\n        this.document.view.rerender();\n        // console.log('tableInfo:', this.tableInfo);\n    }\n    onCreateTableClick = e => {\n        console.log('DatabaseController.onCreateTableClick');\n        this.newTableAction(this.tableName, this.tableInfo);\n    }\n    async newTableAction(tableName, tableInfo) {\n        console.log('DatabaseController.newTableAction', tableName, tableInfo);\n        const table = await this.model.newTable({\n            class  : 'Table',\n            name   : tableName,\n            columns: tableInfo.map(column => ({\n                class   : 'Column',\n                name    : column.name,\n                caption : column.name,\n                type    : column.type,\n                dbType  : column.dbType,\n                key     : column.key.toString(),\n                auto    : column.auto.toString(),\n                nullable: column.nullable.toString(),\n            }))\n        });\n        const tableController = this.createTable2(table);\n        await EditorFrontHostApp.editorApp.treeWidget2.select(tableController);\n        tableController.view.parent.open();\n        this.view.rerender();\n        // EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n    }\n    async delete() {\n        console.log('DatabaseController.delete', this.getTitle());\n        await this.model.delete();\n        this.parent.removeDatabase(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n    getDocumentViewClass() {\n        return DatabaseView;\n    }\n}\n","class TableController extends DocumentController {\n\n    constructor(model, parent) {\n        super(model, parent);\n        this.columns = [];\n        this.items = [\n            {\n                getTitle: () => 'Columns',\n                items: this.columns\n            }\n        ];\n    }\n\n    init() {\n        this.model.columns.forEach(column => this.createColumn(column));\n    }\n    createColumn(model) {\n        const column = new ColumnController(model, this);\n        column.init();\n        this.columns.push(column);\n        return column;\n    }\n    removeColumn(columnController) {\n        console.log('TableController.removeColumn', columnController.getTitle());\n        const i = this.columns.indexOf(columnController);\n        if (i === -1) throw new Error('no such columnController');\n        this.columns.splice(i, 1);\n    }\n\n    getActions() {\n        return [\n            {'action': 'newColumn', 'caption': 'New Column'},\n            {'action': 'moveUp'     , 'caption': 'Move Up'     },\n            {'action': 'moveDown'   , 'caption': 'Move Down'   },\n            {'action': 'delete', 'caption': 'Delete'},\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n            case 'newColumn':\n                await this.actionNewColumn();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('tables', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('tables', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            default:\n                throw new Error(`unknown action: ${name}`);\n        }\n    }\n\n    static async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Table',\n            action    : 'getView',\n            params    : {\n                view: view\n            }\n        });\n    }\n\n    async actionNewColumn() {\n        await EditorFrontHostApp.editorApp.openModal(new NewColumnController({onCreate: async values => {\n            const column = await this.model.newColumn(values.name);\n            const columnController = this.createColumn(column);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(columnController);\n            columnController.view.parent.open();\n            this.view.rerender();\n                EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n    onCreateFormButtonClick = async e => {\n        console.log('TableController.onCreateFormButtonClick');\n        await this.createFormAction();\n    }\n    static async getView(view) {\n        console.log('TableController.getView', view);\n        return FrontHostApp.doHttpRequest({\n            controller: 'Table',\n            action    : 'getView',\n            params    : {view : view}\n        });\n    }\n\n    async createFormAction() {\n        console.log('TableController.createFormAction');\n        await EditorFrontHostApp.editorApp.openModal(new NewFormFromTableController({\n            tableController: this,\n            onCreate: async values => {\n                const formWizard = FormWizard.create({\n                    model       : this.model,\n                    pageName    : values.page,\n                    className   : values.class,\n                    formName    : values.name,\n                    formCaption : values.caption || values.name,\n                });\n                const params = formWizard.getFormParams();\n                // console.log('params:', params);\n                const databaseController = this.parent;\n                const applicationController = databaseController.parent;\n                const pageLinkController = applicationController.findPageLink(values.page);\n                if (!pageLinkController.pageController) {\n                    await pageLinkController.loadPage();\n                }\n                const pageController = pageLinkController.pageController;\n                // console.log('pageController:', pageController);\n                const form = await pageController.model.newForm(params);\n                // console.log('form:', form);\n                const formController = pageController.createForm(form);\n                await EditorFrontHostApp.editorApp.treeWidget2.select(formController);\n                formController.view.parent.open();\n                pageLinkController.view.rerender();\n                EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n    async delete() {\n        console.log('TableController.delete', this.getTitle());\n        await this.model.delete();\n        this.parent.removeTable2(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n    getDocumentViewClass() {\n        return TableView;\n    }\n}\n","class VisualController extends DocumentController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.data = null;\n    }\n    async createDocument() {\n        console.log('VisualController.createDocument');\n        const document = await super.createDocument();\n        const result = await this.model.getView('VisualView.html');\n        this.data = result.data;\n        return document;\n    }\n    async onControllerSave(value) {\n        console.log('ApplicationController.onControllerSave'/*, value*/);\n        const result = await this.model.saveController(value);\n        this.data.js = result.js;\n        this.document.view.rerender();\n    }\n    onCreateCustomController = async e => {\n        console.log('ApplicationController.onCreateCustomController');\n        const data = await this.model.createController();\n        this.data.js = data.js;\n        this.document.view.rerender();\n    }\n    onCreateCustomView = async e => {\n        console.log('VisualController.onCreateCustomView');\n        const data = await this.model.createView();\n        this.data.jsx = data.jsx;\n        this.document.view.rerender();\n    }\n    onCreateCustomStyle = async e => {\n        console.log('VisualController.onCreateCustomStyle');\n        const data = await this.model.createStyle();\n        this.data.less = data.less;\n        this.document.view.rerender();\n    }\n    onCreateModelBack = async e => {\n        const data = await this.model.createModelBackJs();\n    }\n    createDataSource(model) {\n        const dataSource = new DataSourceController(model, this);\n        dataSource.init();\n        this.dataSources.push(dataSource);\n        return dataSource;\n    }\n    removeDataSource(dataSourceController) {\n        // console.log('VisualController.removeDataSource', dataSourceController.getTitle());\n        const i = this.dataSources.indexOf(dataSourceController);\n        if (i === -1) throw new Error('no such dataSourceController');\n        this.dataSources.splice(i, 1);\n    }\n    createAction(model) {\n        const action = new ActionController(model, this);\n        action.init();\n        this.actions.push(action);\n        return action;\n    }\n    removeAction(actionController) {\n        // console.log('VisualController.removeAction', actionController.getTitle());\n        const i = this.actions.indexOf(actionController);\n        if (i === -1) throw new Error('no such actionController');\n        this.actions.splice(i, 1);\n    }\n    async actionNewAction() {\n        console.log('VisualController.actionNewAction');\n        await EditorFrontHostApp.editorApp.openModal(new NewActionController({onCreate: async values => {\n            const action = await this.model.newAction({\n                name   : values.name,\n                caption: values.caption\n            });\n            const actionController = this.createAction(action);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(actionController);\n            actionController.view.parent.open();\n            if (this.pageLinkController) {\n                this.pageLinkController.view.rerender();\n            } else {\n                this.view.rerender();\n            }\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n}\n","class ApplicationController extends VisualController {\n\n    constructor(model, editorApp) {\n        super(model);\n        this.editorApp = editorApp;\n        this.databases   = [];\n        this.dataSources = [];\n        this.actions     = [];\n        this.pageLinks   = [];\n\n        // items\n        this.opened = true;\n        this.items = [\n            {getTitle: () => 'Databases'   , items: this.databases},\n            {getTitle: () => 'Data Sources', items: this.dataSources},\n            {getTitle: () => 'Actions'     , items: this.actions},\n            {getTitle: () => 'Pages'       , items: this.pageLinks, opened: true}\n        ];\n    }\n    init() {\n        this.model.databases.forEach(database => this.createDatabase(database));\n        this.model.dataSources.forEach(dataSource => this.createDataSource(dataSource));\n        this.model.actions.forEach(action => this.createAction(action));\n        this.model.pageLinks.forEach(pageLink => this.createPageLink(pageLink));\n    }\n\n    createDatabase(model) {\n        const database = new DatabaseController(model, this);\n        database.init();\n        this.databases.push(database);\n        return database;\n    }\n    createPageLink(model) {\n        const pageLink = new PageLinkController(model, this);\n        pageLink.init();\n        this.pageLinks.push(pageLink);\n        return pageLink;\n    }\n    removeDatabase(databaseController) {\n        console.log('ApplicationController.removeDatabase', databaseController.getTitle());\n        const i = this.databases.indexOf(databaseController);\n        if (i === -1) throw new Error('no such databaseController');\n        this.databases.splice(i, 1);\n    }\n    removePageLink(pageLinkController) {\n        const i = this.pageLinks.indexOf(pageLinkController);\n        if (i === -1) throw new Error('no such pageLinkController');\n        this.pageLinks.splice(i, 1);\n    }\n\n    getActions() {\n        return [\n            {'action': 'newDatabase'  , 'caption': 'New Database'   },\n            {'action': 'newDataSource', 'caption': 'New Data Source'},\n            {'action': 'newAction'    , 'caption': 'New Action'     },\n            {'action': 'newPage'      , 'caption': 'New Page'       },\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'newDatabase':\n                await this.newDatabaseAction();\n                break;\n            case 'newDataSource':\n                await this.newDataSourceAction();\n                break;\n            case 'newPage':\n                await this.newPageAction();\n                break;\n            case 'newAction':\n                await this.actionNewAction();\n                break;\n            default:\n                console.log(name);\n        }\n    }\n\n    async newDatabaseAction() {\n        console.log('ApplicationController.newDatabaseAction');\n        await EditorFrontHostApp.editorApp.openModal(new NewDatabaseController({onCreate: async values => {\n            // console.log('values: ', values);\n            const database = await this.model.newDatabase({\n                class : values.class,\n                name  : values.name,\n                params: [\n                    {class: 'Param', name: 'host'    , value: values.host    },\n                    {class: 'Param', name: 'database', value: values.database},\n                    {class: 'Param', name: 'user'    , value: values.user    },\n                    {class: 'Param', name: 'password', value: values.password}\n                ]\n            });\n            const databaseController = this.createDatabase(database);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(databaseController);\n            databaseController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    async newDataSourceAction() {\n        await EditorFrontHostApp.editorApp.openModal(new NewDataSourceController({onCreate: async values => {\n            const dataSource = await this.model.newDataSource({\n                name : values.name,\n                class: values.class\n            });\n            const dataSourceController = this.createDataSource(dataSource);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(dataSourceController);\n            dataSourceController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    async newPageAction() {\n        await EditorFrontHostApp.editorApp.openModal(new NewPageController({onCreate: async values => {\n            const page = await this.model.newPage({\n                name   : values.name,\n                caption: values.caption || values.name,\n                startup: values.startup\n            });\n            const pageLinkController = this.createPageLink(page.pageLink);\n            const pageController = new PageController(page, pageLinkController);\n            pageController.init();\n            pageLinkController.setPageController(pageController);\n            EditorFrontHostApp.editorApp.treeWidget2.select(pageLinkController);\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    getPropList() {\n        const propList = super.getPropList();\n        propList.options['authentication'] = ['true', 'false'];\n        propList.options['lang']           = ['en'  , 'ru'   ];\n        return propList;\n    }\n    findPageLink(name) {\n        return this.pageLinks.find(pageLink => pageLink.model.getName() === name);\n    }\n    getDocumentViewClass() {\n        return VisualView;\n    }\n}\n","class FieldController extends VisualController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    getTitle() {\n        return `${this.model.getClassName()}: ${this.model.getName()}`;\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'blue'\n        };\n    }\n    getActions() {\n        return [\n            {'action': 'changeClass', 'caption': 'Change Class'},\n            {'action': 'moveUp'     , 'caption': 'Move Up'     },\n            {'action': 'moveDown'   , 'caption': 'Move Down'   },\n            {'action': 'delete'     , 'caption': 'Delete'      }\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'changeClass':\n                await this.actionChangeClass();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('fields', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('fields', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n        }\n    }\n\n    async actionChangeClass() {\n        await EditorFrontHostApp.editorApp.openModal(new ChangeClassController({\n            fieldCtrl: this,\n            onCreate: async values => {\n                const data = await this.model.changeClass({class: values.class});\n                console.log(data);\n                EditorFrontHostApp.editorApp.fillPropertyGrid(this);\n                this.view.rerender();\n            }\n        }));\n    }\n\n    getPropList() {\n        const list = this.model.data['@attributes'];\n        const options = {};\n        options['visible']          = ['true', 'false'];\n        options['readOnly']         = ['true', 'false'];\n        options['notNull']          = ['true', 'false'];\n        options['param']            = ['true', 'false'];\n        options['validateOnChange'] = ['true', 'false'];\n        options['validateOnBlur']   = ['true', 'false'];\n        options['autoFocus']        = ['true', 'false'];\n        options['timezone']         = ['true', 'false'];\n        options['newRowMode']       = ['disabled', 'editPage', 'createPage'];\n        options['type']             = ['', 'string', 'number', 'boolean', 'object', 'date'];\n        return {list: list, options: options};\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeField(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n    getDocumentViewClass() {\n        return VisualView;\n    }\n}\n","class FormController extends VisualController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.dataSources = [];\n        this.actions     = [];\n        this.fields      = [];\n        this.items = [\n            {getTitle: () => 'Data Sources', items: this.dataSources},\n            {getTitle: () => 'Actions'     , items: this.actions},\n            {getTitle: () => 'Fields'      , items: this.fields}\n        ];\n    }\n    getTitle() {\n        return `${this.model.getClassName()}: ${this.model.getName()}`;\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'green',\n        };\n    }\n    init() {\n        this.model.dataSources.forEach(dataSource => this.createDataSource(dataSource));\n        this.model.fields.forEach(field => this.createField(field));\n        this.model.actions.forEach(action => this.createAction(action));\n    }\n    createField(model) {\n        const field = new FieldController(model, this);\n        field.init();\n        this.fields.push(field);\n        return field;\n    }\n\n\n    removeField(fieldController) {\n        console.log('FormController.removeField', fieldController.getTitle());\n        const i = this.fields.indexOf(fieldController);\n        if (i === -1) throw new Error('no such fieldController');\n        this.fields.splice(i, 1);\n    }\n\n\n    getActions() {\n        return [\n            {'action': 'newDataSource', 'caption': 'New Data Source'},\n            {'action': 'newField'     , 'caption': 'New Field'      },\n            {'action': 'newAction'    , 'caption': 'New Action'     },\n            {'action': 'moveUp'       , 'caption': 'Move Up'        },\n            {'action': 'moveDown'     , 'caption': 'Move Down'      },\n            {'action': 'delete'       , 'caption': 'Delete'         },\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'newDataSource':\n                await this.actionNewDataSource();\n                break;\n            case 'newField':\n                await this.actionNewField();\n                break;\n            case 'newAction':\n                await this.actionNewAction();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.moveUp();\n                this.parent.moveColItem('forms', this, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.moveDown();\n                this.parent.moveColItem('forms', this, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n        }\n    }\n\n    async actionNewDataSource() {\n        await EditorFrontHostApp.editorApp.openModal(new NewDataSourceController({onCreate: async values => {\n            const dataSource = await this.model.newDataSource({\n                name : values.name,\n                class: values.class\n            });\n            const dataSourceController = this.createDataSource(dataSource);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(dataSourceController);\n            dataSourceController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    async actionNewField() {\n        await EditorFrontHostApp.editorApp.openModal(new NewFieldController({onCreate: async values => {\n            const field = await this.model.newField({\n                class  : values.class,\n                name   : values.name,\n                caption: values.caption,\n                type   : values.type\n            });\n            const fieldController = this.createField(field);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(fieldController);\n            fieldController.view.parent.open();\n            this.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n\n\n    getPropList() {\n        return {\n            list   : this.model.data['@attributes'],\n            options: {\n                editMethod: [\n                    'disabled',\n                    'table',\n                    'form'\n                ],\n                newRowMode: [\n                    'disabled',\n                    'oneclick',\n                    'editform',\n                    'createform',\n                    'oneclick editform',\n                    'oneclick createform'\n                ],\n                deleteRowMode: [\n                    'disabled',\n                    'enabled'\n                ],\n                refreshButton: [\n                    'true',\n                    'false'\n                ],\n                visible: ['true', 'false'],\n                newMode: ['', 'true', 'false'],\n                backOnly : ['true', 'false'],\n            }\n        };\n    }\n\n    async setProperty(name, value) {\n        await this.model.setValue(name, value);\n    }\n\n    async delete() {\n        await this.model.delete();\n        this.parent.removeForm(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n    getDocumentViewClass() {\n        return VisualView;\n    }\n}\n","class PageController extends VisualController {\n\n    constructor(model, pageLinkController = null, options = {}) {\n        super(model);\n        this.options = options;\n        this.pageLinkController = pageLinkController;\n        this.dataSources = [];\n        this.actions     = [];\n        this.forms       = [];\n        this.items = [\n            {getTitle: () => 'Data Sources', items: this.dataSources},\n            {getTitle: () => 'Actions'     , items: this.actions},\n            {getTitle: () => 'Forms'       , items: this.forms}\n        ];\n    }\n\n    init() {\n        // console.log('PageController.init');\n        this.model.dataSources.forEach(dataSource => this.createDataSource(dataSource));\n        this.model.actions.forEach(action => this.createAction(action));\n        this.model.forms.forEach(form => this.createForm(form));\n    }\n\n    createForm(model) {\n        const form = new FormController(model, this);\n        form.init();\n        this.forms.push(form);\n        return form;\n    }\n    removeForm(formController) {\n        console.log('PageController.removeForm', formController.getTitle());\n        const i = this.forms.indexOf(formController);\n        if (i === -1) throw new Error('no such formController');\n        this.forms.splice(i, 1);\n    }\n\n    getActions() {\n        return [\n            {'action': 'newDataSource', 'caption': 'New Data Source'},\n            {'action': 'newAction'    , 'caption': 'New Action'     },\n            {'action': 'newForm'      , 'caption': 'New Form'       },\n            {'action': 'moveUp'       , 'caption': 'Move Up'        },\n            {'action': 'moveDown'     , 'caption': 'Move Down'      },\n            {'action': 'delete'       , 'caption': 'Delete'         },\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'newForm':\n                await this.actionNewForm();\n                break;\n            case 'newDataSource':\n                await this.newDataSourceAction();\n                break;\n            case 'newAction':\n                await this.actionNewAction();\n                break;\n            case 'delete':\n                await this.delete();\n                break;\n            case 'moveUp':\n                await this.model.pageLink.moveUp();\n                this.pageLinkController.parent.moveColItem('pageLinks', this.pageLinkController, -1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            case 'moveDown':\n                await this.model.pageLink.moveDown();\n                this.pageLinkController.parent.moveColItem('pageLinks', this.pageLinkController, 1);\n                EditorFrontHostApp.editorApp.treeWidget2.rerender();\n                break;\n            default:\n                console.log(name);\n        }\n    }\n\n    async newDataSourceAction() {\n        await EditorFrontHostApp.editorApp.openModal(new NewDataSourceController({onCreate: async values => {\n            const dataSourceData = await DataSourceEditor.create(this.model, {\n                name : values.name,\n                class: values.class\n            });\n            const dataSource = this.model.createDataSource(dataSourceData);\n            const dataSourceController = this.createDataSource(dataSource);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(dataSourceController);\n            dataSourceController.view.parent.open();\n            this.pageLinkController.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    async actionNewForm() {\n        await EditorFrontHostApp.editorApp.openModal(new NewFormController({onCreate: async values => {\n            const form = await this.model.newForm({\n                name   : values.name,\n                caption: values.caption || values.name,\n                class  : values.class\n            });\n            const formController = this.createForm(form);\n            await EditorFrontHostApp.editorApp.treeWidget2.select(formController);\n            formController.view.parent.open();\n            this.pageLinkController.view.rerender();\n            EditorFrontHostApp.editorApp.treeWidget2.scrollToSelected();\n        }}));\n    }\n\n    getPropList() {\n        const propList = super.getPropList();\n        propList.list['menu']    = this.getPageLink().getAttr('menu');\n        propList.list['startup'] = this.getPageLink().getAttr('startup');\n        propList.options['startup'] = ['true', 'false'];\n        return propList;\n    }\n\n    setProperty(name, value) {\n        if (name === 'startup' || name === 'menu') {\n            this.getPageLink().setValue(name, value);\n        } else  {\n            ModelController.prototype.setProperty.call(this, name, value);\n        }\n    }\n\n    getPageLink() {\n        return this.model.pageLink;\n    }\n\n    async delete() {\n        await this.model.delete();\n        this.pageLinkController.parent.removePageLink(this.pageLinkController);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n\n    getDocumentViewClass() {\n        return VisualView;\n    }\n}\n","class KeyColumnController extends ModelController {\n\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n\n    getActions() {\n        return [\n            {'action':'delete', 'caption':'Delete'}\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n        }\n    }\n\n    static async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'KeyColumn',\n            action    : 'getView',\n            params    : {\n                view: view\n            }\n        });\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeKeyColumn(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n}\n","class PageLinkController extends ModelController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.node = true;\n        this.pageController = null;\n        this.items = null;\n    }\n    getTitle() {\n        if (this.pageController) return this.pageController.getTitle();\n        return super.getTitle();\n    }\n    getStyle() {\n        return {\n            // fontWeight: 'bold',\n            color: 'red'\n        };\n    }\n    hasPage() {\n        return this.pageController != null;\n    }\n    async loadPage() {\n        console.log('PageLinkController.loadPage', this.getTitle());\n        if (this.pageController) throw new Error('page already loaded');\n        const pageLink = this.model;\n        const pageData = await EditorFrontHostApp.fetchPageData(pageLink.getFileName());\n\n        // page\n        const page = new PageEditor(pageData, pageLink);\n        page.init();\n\n        // pageController\n        const pageController = new PageController(page, this);\n        pageController.init();\n        this.setPageController(pageController);\n        // console.log('pageController:', pageController);\n\n        this.view.rerender();\n    }\n    getActions() {\n        return this.pageController.getActions();\n    }\n    getPropList() {\n        return this.pageController.getPropList();\n    }\n    async setProperty(name, value) {\n        this.pageController.setProperty(name, value);\n    }\n    setPageController(pageController) {\n        if (this.pageController) throw new Error('pageLinkController already has pageController');\n        this.pageController = pageController;\n        this.items = pageController.items;\n    }\n    remove() {\n        console.log('PageLinkController.remove', this.getTitle());\n        this.parent.removePageLink(this);\n    }\n}\n","class ParamController extends ModelController {\n\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n\n    getActions() {\n        return [\n            {'action': 'delete', 'caption': 'Delete'}\n        ];\n    }\n\n    async doAction(name) {\n        switch (name) {\n            case 'delete':\n                await this.delete();\n                break;\n        }\n    }\n\n    static async getView(view) {\n        return await FrontHostApp.doHttpRequest({\n            controller: 'Param',\n            action    : 'getView',\n            params    : {\n                view: view\n            }\n        });\n    }\n    async delete() {\n        await this.model.delete();\n        this.parent.removeParam(this);\n        EditorFrontHostApp.editorApp.treeWidget2.select(null);\n        EditorFrontHostApp.editorApp.treeWidget2.rerender();\n    }\n}\n"]}