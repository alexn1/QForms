import { ModelController } from '../ModelController';
import { FrontHostApp } from '../../../../common';
import { PageController } from '../PageController/PageController';
import { Application } from '../../../Model/Application/Application';
export declare class ApplicationController extends ModelController<Application> {
    frontHostApp: FrontHostApp;
    lastId: number;
    activePage: PageController;
    modals: any[];
    statusbar: any;
    homePageName: string | null;
    webSocketClient: any;
    view: any;
    constructor(model: Application, frontHostApp: FrontHostApp);
    static create(model: Application, frontHostApp: FrontHostApp): ApplicationController;
    static isDebugMode(): boolean;
    init(): void;
    deinit(): void;
    getViewClass(): any;
    createView(rootElement: any): void;
    onRequest: (e: any) => Promise<void>;
    createVersionNotificationIfNotExists(): void;
    getGlobalParams(): {};
    createPage(pageData: any, options: any): PageController;
    openPage(options: any): Promise<PageController>;
    addModal(ctrl: any): void;
    removeModal(ctrl: any): void;
    getNextId(): number;
    getNewId(): string;
    addPage(pc: any): void;
    findPageControllerByPageNameAndKey(pageName: any, key: any): PageController | null;
    onPageSelect(pc: any): void;
    closePage(pageController: PageController): Promise<void>;
    onActionClick(name: any): Promise<any>;
    getMenuItemsProp(): {
        name: string;
        title: string;
        items: any;
    }[];
    onStatusbarCreate: (statusbar: any) => void;
    onLogout: () => Promise<void>;
    onMenuItemClick: (menu: any, type: any, name: any) => Promise<void>;
    getActivePageName(): any;
    onWindowPopState(e: any): Promise<void>;
    getTitle(): string;
    invalidate(): void;
    alert(options: any): Promise<any>;
    confirm(options: any): Promise<any>;
    getRootPath(): string;
    openModal(ctrl: any): Promise<void>;
    closeModal(ctrl: any): Promise<void>;
    getHostApp(): FrontHostApp;
    connect(): Promise<void>;
    rpc(name: any, params: any): Promise<any>;
    getDomain(): any;
    getBaseUrl(): string;
}
