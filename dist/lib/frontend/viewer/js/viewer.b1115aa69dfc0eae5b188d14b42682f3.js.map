{"version":3,"sources":["EventEmitter.js","LoginFrontHostApp.js","ViewerFrontHostApp.js","WebSocketClient.js","Controller/Controller.js","Controller/AlertController/AlertController.js","Controller/ConfirmController/ConfirmController.js","Controller/LoginController/LoginController.js","Controller/ModalController/ModalController.js","Controller/ModalController/ImageDialogController/ImageDialogController.js","Controller/ModelController/ModelController.js","Controller/ModelController/ApplicationController/ApplicationController.js","Controller/ModelController/FieldController/FieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxFieldController/RowFormCheckBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormComboBoxFieldController/RowFormComboBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateFieldController/RowFormDateFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateTimeFieldController/RowFormDateTimeFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFileFieldController/RowFormFileFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormImageFieldController/RowFormImageFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormLinkFieldController/RowFormLinkFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPasswordFieldController/RowFormPasswordFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPhoneFieldController/RowFormPhoneFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextAreaFieldController/RowFormTextAreaFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextBoxFieldController/RowFormTextBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTimeFieldController/RowFormTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormCheckBoxFieldController/TableFormCheckBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormComboBoxFieldController/TableFormComboBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateFieldController/TableFormDateFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateTimeFieldController/TableFormDateTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormLinkFieldController/TableFormLinkFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormPhoneFieldController/TableFormPhoneFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextAreaFieldController/TableFormTextAreaFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextBoxFieldController/TableFormTextBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTimeFieldController/TableFormTimeFieldController.js","Controller/ModelController/FormController/FormController.js","Controller/ModelController/FormController/RowFormController/RowFormController.js","Controller/ModelController/FormController/TableFormController/TableFormController.js","Controller/ModelController/PageController/PageController.js","Model/Model.js","Model/Application/Application.js","Model/Column/Column.js","Model/DataSource/DataSource.js","Model/DataSource/SqlDataSource/SqlDataSource.js","Model/Database/Database.js","Model/Field/Field.js","Model/Field/CheckBoxField/CheckBoxField.js","Model/Field/ComboBoxField/ComboBoxField.js","Model/Field/DateField/DateField.js","Model/Field/DateTimeField/DateTimeField.js","Model/Field/FileField/FileField.js","Model/Field/ImageField/ImageField.js","Model/Field/LabelField/LabelField.js","Model/Field/LinkField/LinkField.js","Model/Field/PasswordField/PasswordField.js","Model/Field/PhoneField/PhoneField.js","Model/Field/TextAreaField/TextAreaField.js","Model/Field/TextBoxField/TextBoxField.js","Model/Field/TimeField/TimeField.js","Model/Form/Form.js","Model/Form/RowForm/RowForm.js","Model/Form/TableForm/TableForm.js","Model/Page/Page.js","Model/Table/Table.js"],"names":["EventEmitter","constructor","this","list","on","name","cb","push","off","i","indexOf","Error","splice","emit","e","length","result","Promise","allSettled","map","status","reason","LoginFrontHostApp","FrontHostApp","data","console","log","super","run","loginController","LoginController","create","rootElement","document","querySelector","getViewClassCssBlockName","Helper","createReactComponent","getViewClass","ctrl","getText","text","getData","ViewerFrontHostApp","options","applicationController","application","Application","init","ApplicationController","rootElementName","createView","connect","err","logError","onWindowPopState","error","values","type","source","message","stack","href","window","location","platformVersion","versions","platform","appVersion","app","logErrorUrl","fetch","method","headers","Content-Type","body","JSON","stringify","catch","alert","resolve","reject","root","childElementCount","alertCtrl","AlertController","onClose","ReactDOM","unmountComponentAtNode","confirm","ConfirmController","QForms","WebSocketClient","protocol","url","host","encodeURIComponent","route","uuid","userId","webSocket","refreshTimeoutId","RECONNECT_TIMEOUT","REFRESH_TIMEOUT","WebSocket","onclose","code","onopen","bind","onmessage","onMessage","startRefreshTimeout","onRefreshTimeout","send","setTimeout","resetRefreshTimeout","clearTimeout","reconnect","async","getApp","getHostApp","parse","packet","getView","disableRerender","getModel","emitResult","enableRerender","rerender","Controller","view","onViewCreate","AlertView","close","onOkButtonClick","onCloseClick","onKeyDown","key","ConfirmView","onYesClick","frontHostApp","CustomClass","getClassByName","Class","LoginView","getFrontHostApp","ModalController","id","getId","closeModal","ImageDialogController","src","ImageDialogView","getSrc","ModelController","model","parent","deinited","deinit","getFullName","getParent","getTitle","getCaption","isAttr","viewClassName","getAttr","eval","lastId","activePage","modals","statusbar","homePageName","webSocketClient","getName","getSearchObj","search","split","reduce","acc","item","kv","isDebugMode","onRequest","pageData","pages","createPage","modal","params","getGlobalParams","title","ApplicationView","setLastQueryTime","time","remoteAppVersion","createVersionNotificationIfNotExists","getCssBlockName","div","createElement","innerHTML","versionNotification","className","append","undefined","pageModel","Page","pc","PageController","getNextId","openPage","pageController","findPageControllerByPageNameAndKey","onPageSelect","request","action","page","newMode","activeElement","focus","isModal","addModal","addPage","removeModal","getNewId","closePage","pageName","getKey","onActionClick","getMenuItemsProp","menu","Object","keys","items","caption","getUser","getDomain","login","onStatusbarCreate","onLogout","getRootPath","onMenuItemClick","history","pushState","createLink","getActivePageName","state","invalidate","filter","forEach","yesButton","yes","noButton","no","openModal","nodeEnv","user","FieldController","getPage","form","getForm","GeneralClass","getClassName","valueToString","value","Date","toISOString","toString","stringToValue","stringValue","fieldType","getType","trim","date","invalidDate","num","Number","isNaN","notNumber","getViewStyle","row","isVisible","isAutoFocus","getAutocomplete","getFormat","RowFormFieldController","parseError","changed","getRow","getValue","setValue","refill","resetErrors","refreshChanged","copyValueToModel","_onChange","widgetValue","putValue","onChange","fireEvent","setValueFromWidget","validateOnChange","validate","isValid","onFieldChange","onBlur","validateOnBlur","getValueForWidget","isChanged","getError","calcChangedState","getPlaceholder","getWidget","isNotNull","required","isEditable","getMode","isReadOnly","isParseError","getErrorMessage","hasColumn","fieldRawValue","valueToRaw","dsRawValue","getRawValue","let","original","modified","getDefaultDataSource","getRowWithChanges","substr","setError","RowFormCheckBoxFieldController","RowFormCheckBoxFieldView","RowFormComboBoxFieldController","dataSource","getComboBoxDataSource","onListInsert","onListUpdate","onListDelete","getItems","getRows","getValueValue","getDisplayValue","RowFormComboBoxFieldView","onEditButtonClick","itemEditPage","onCreateButtonClick","newRowMode","itemCreateForm","createPageName","onInsert","inserts","decodeValue","onItemSelect","button","preventDefault","selectedKey","selectMode","onSelect","RowFormDateFieldController","RowFormDateFieldView","RowFormDateTimeFieldController","args","widget2","defaultValue","parseError2","error2","RowFormDateTimeFieldView","getValueForTime","getHours","getMinutes","h","m","resetErrors2","TimeBox","splitTime","setHours","onView2Create","input","getElement","setSelectionRange","onChange2","setValueFromView2","validate2","onBlur2","getPlaceholder2","getStringValue","getDefaultValue","setDefaultValue","getIntegerValue","setValue2","getError2","isParseError2","setError2","getErrorMessage2","isValid2","join","RowFormFileFieldController","RowFormFileFieldView","RowFormImageFieldController","RowFormImageFieldView","RowFormLinkFieldController","RowFormLinkFieldView","onClick","RowFormPasswordFieldController","RowFormPasswordFieldView","RowFormPhoneFieldController","RowFormPhoneFieldView","RowFormTextAreaFieldController","RowFormTextAreaFieldView","RowFormTextBoxFieldController","RowFormTextBoxFieldView","RowFormTimeFieldController","RowFormTimeFieldView","TableFormFieldController","TableFormCheckBoxFieldController","TableFormCheckBoxFieldView","TableFormComboBoxFieldController","TableFormComboBoxFieldView","rawValue","cbRow","findRowByRawValue","TableFormDateFieldController","TableFormDateFieldView","formatDate","TableFormDateTimeFieldController","TableFormDateTimeFieldView","TableFormLinkFieldController","TableFormLinkFieldView","TableFormPhoneFieldController","TableFormPhoneFieldView","TableFormTextAreaFieldController","TableFormTextAreaFieldView","TableFormTextBoxFieldController","TableFormTextBoxFieldView","TableFormTimeFieldController","TableFormTimeFieldView","FormController","customClassName","fields","field","onFormChange","getUpdated","updated","now","getField","getSelectedRowKey","RowFormController","mode","hasNew","valid","onModelRefresh","onModelInsert","onModelUpdate","calcState","onFormInsert","onFormUpdate","clearFieldsError","onSaveClick","update","onDiscardClick","changedFields","discard","onFormDiscard","onRefreshClick","refresh","onEditClick","onCancelClick","RowFormView","getActiveRow","withChanges","isActionEnabled","isViewMode","isEditMode","TableFormController","grid","TableFormView","onModelDelete","onGridCreate","onNewClick","new","onDeleteClick","getActiveRowKey","areYouSure","delete","onGridCellDblClick","getOptions","selectRow","edit","onGridLinkClick","onGridDeleteKeyDown","fillDefaultValues","insert","database","table","DataSource","keyToParams","setActiveRowKey","updates","newKey","deletes","onGridSelectionChange","isRowSelected","onFrameChanged","frame","parseInt","setFrame","onNextClick","getFrame","onPreviousClick","canPrev","canNext","ds","getFramesCount","forms","onSaveAndCloseClick","onClosePageClick","onOpenPageClick","link","createOpenInNewLink","open","hasRowFormWithDefaultSqlDataSource","formController","getParams","PageView","pathname","encodeURI","find","arr","keyPart","selectedRowKey","onSelectClick","onResetClick","Model","class","getCol","hasOwnProperty","getDataSource","dataSources","createDataSources","deinitDataSources","hasActions","actions","databases","theme","Database","addDatabase","logout","start","doHttpRequest2","remotePlatformVersion","getDatabase","domain","getVirtualPath","virtualPath","rpc","errorMessage","promises","getNodeEnv","Column","includes","rows","rowsByKey","news","changes","Map","setRows","getTable","onTableInsert","onTableUpdate","onTableDelete","onTableRefresh","fillRowsByKey","addRow","getRowKey","addRows","getRowsLength","column","discardRowColumn","has","get","changeRowColumn","newValue","set","size","isRowColumnChanged","getKeyValues","keyColumns","removeRow","newRow","getSingleRow","Form","getRowByIndex","clear","paramName","getChangesByKey","hasNewRows","copyNewValues","newValues","updateRow","columnName","getColumn","onDataSourceInsert","onDataSourceDelete","onDataSourceUpdate","reuslt","sourceRow","isSurrogate","moveRow","offset","moveArrItem","event","onDataSourceRefresh","SqlDataSource","count","lastFrame","insertEx","updateEx","getPageParams","select","getLimit","fill","more","hasMore","Array","Math","ceil","getCount","getLastFrame","tables","Table","addTable","Field","replaceThis","replace","fillDefaultValue","js","templateToJsString","valueToPageParams","isParam","addParam","RowForm","rawToValue","encodeValue","readOnly","notNull","isNullable","getWidth","width","param","hasDefaultSqlDataSource","CheckBoxField","ComboBoxField","displayColumn","valueColumn","dataSourceName","DateField","raw","addMinutes","getTimezoneOffset","v","getTime","DateTimeField","FileField","ImageField","LabelField","LinkField","PasswordField","PhoneField","TextAreaField","getCols","cols","TextBoxField","TimeField","decodeRow","isNewMode","createRow","fillParams","TableForm","onCreate","createForms","deinitForms","FormClass","hasRowFormWithDefaultDs","hasRowForm","hasTableForm","keyParams","columns","addColumn","emitInsert","emitUpdate","emitDelete","emitRefresh"],"mappings":"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","file":"viewer.b1115aa69dfc0eae5b188d14b42682f3.js","sourcesContent":["class EventEmitter {\n    constructor() {\n        this.list = {};\n    }\n    on(name, cb) {\n        // console.log('EventEmitter.on', name);\n        if (!this.list[name]) {\n            this.list[name] = [];\n        }\n        this.list[name].push(cb);\n    }\n    off(name, cb) {\n        // console.log('EventEmitter.off', name);\n        const i = this.list[name].indexOf(cb);\n        if (i === -1) {\n            throw new Error(`cannot find cb for ${name}`);\n        }\n        // console.log(i);\n        this.list[name].splice(i, 1);\n    }\n    async emit(name, e) {\n        // console.log('EventEmitter.emit', name, e);\n        if (this.list[name] && this.list[name].length) {\n            const results = await Promise.allSettled(this.list[name].map(cb => cb(e)));\n            // console.log('results:', results);\n            for (const result of results) {\n                if (result.status === 'rejected') {\n                    throw result.reason;\n                }\n            }\n        }\n    }\n}\n","class LoginFrontHostApp extends FrontHostApp {\n    constructor(data) {\n        console.log('LoginFrontHostApp.constructor', data);\n        super();\n        this.data = data;\n    }\n    async run() {\n        console.log('LoginFrontHostApp.run');\n        const loginController = LoginController.create(this);\n        const rootElement = document.querySelector(`.${loginController.getViewClassCssBlockName()}__root`);\n        const loginView = Helper.createReactComponent(rootElement, loginController.getViewClass(), {ctrl: loginController});\n    }\n    getText() {\n        return this.data.text;\n    }\n    getData() {\n        return this.data;\n    }\n}\n","class ViewerFrontHostApp extends FrontHostApp {\n    constructor(options = {}) {\n        if (!options.data) throw new Error('no data');\n        super();\n        this.options = options;\n        this.applicationController = null;\n    }\n    async run() {\n        console.log('ViewerFrontHostApp.run', this.getData());\n\n        // application\n        const application = new Application(this.getData());\n        application.init();\n\n        // applicationController\n        const applicationController = this.applicationController = ApplicationController.create(application, this);\n        applicationController.init();\n\n        // view\n        const rootElementName = `.${applicationController.getViewClass().name}__root`;\n        const rootElement = document.querySelector(rootElementName);\n        if (!rootElement) {\n            throw new Error(`no root element: ${rootElementName}`);\n        }\n        applicationController.createView(rootElement);\n\n        // connect\n        try {\n            await applicationController.connect();\n        } catch (err) {\n            this.logError(err);\n        }\n    }\n    async onWindowPopState(e) {\n        // console.log('ViewerFrontHostApp.onWindowPopState', e.state);\n        await this.applicationController.onWindowPopState(e);\n    }\n    logError(err) {\n        console.error('FrontHostApp.logError', err);\n        const values = {\n            type   : 'error',\n            source : 'client',\n            message: err.message,\n            stack  : err.stack,\n            data   : {\n                href           : window.location.href,\n                platformVersion: this.getData().versions.platform,\n                appVersion     : this.getData().versions.app,\n            }\n        };\n        console.log(`POST ${this.getData().logErrorUrl}`, values);\n        fetch(this.getData().logErrorUrl, {\n            method : 'POST',\n            headers: {'Content-Type': 'application/json;charset=utf-8'},\n            body   : JSON.stringify(values)\n        }).catch(err => {\n            console.error(err.message);\n        });\n    }\n    getData() {\n        if (!this.options.data) throw new Error('no data');\n        return this.options.data;\n    }\n    alert(options) {\n        console.log('ViewerFrontHostApp.alert', options);\n        return new Promise((resolve, reject) => {\n            try {\n                const root = document.querySelector('.alert-root');\n                if (root.childElementCount === 0) {\n                    const ctrl = this.alertCtrl = new AlertController({\n                        ...options,\n                        onClose: result => {\n                            this.alertCtrl = null;\n                            ReactDOM.unmountComponentAtNode(root);\n                            resolve(result);\n                        }});\n                    // console.log('ctrl:', ctrl);\n                    const view = Helper.createReactComponent(root, ctrl.getViewClass(), {ctrl});\n                    // console.log('view', view);\n                } else {\n                    reject(new Error('alert already exists'));\n                }\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n    confirm(options) {\n        console.log('ViewerFrontHostApp.confirm', options);\n        return new Promise((resolve, reject) => {\n            try {\n                const root = document.querySelector('.alert-root');\n                if (root.childElementCount === 0) {\n                    const ctrl = this.alertCtrl = new ConfirmController({\n                        ...options,\n                        onClose: result => {\n                            this.alertCtrl = null;\n                            ReactDOM.unmountComponentAtNode(root);\n                            resolve(result);\n                        }});\n                    // console.log('ctrl:', ctrl);\n                    const view = Helper.createReactComponent(root, ctrl.getViewClass(), {ctrl});\n                    // console.log('view', view);\n                } else {\n                    reject(new Error('confirm already exists'));\n                }\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n}\n\nwindow.QForms.ViewerFrontHostApp = ViewerFrontHostApp;\n","class WebSocketClient {\n    constructor(options = {}) {\n        this.options = options;\n        if (!options.applicationController) throw new Error('no options.applicationController');\n        if (!options.protocol) throw new Error('no options.protocol');\n        this.url = `${options.protocol}://${window.location.host}/?route=${encodeURIComponent(options.route)}&uuid=${encodeURIComponent(options.uuid)}&userId=${encodeURIComponent(options.userId)}`;\n        this.webSocket         = null;\n        this.refreshTimeoutId  = null;\n        this.RECONNECT_TIMEOUT = 10;        // sec\n        this.REFRESH_TIMEOUT   = 60*60;     // sec\n    }\n    connect() {\n        console.log('WebSocketClient.connect', this.url);\n        return new Promise((resolve, reject) => {\n            this.webSocket = new WebSocket(this.url);\n            this.webSocket.onclose = async e => {\n                this.webSocket = null;\n                reject(new Error(`Connection failed ${e.code}`));\n            };\n            this.webSocket.onopen = e => {\n                this.webSocket.onclose   = this.onClose.bind(this);\n                this.webSocket.onmessage = this.onMessage.bind(this);\n                this.startRefreshTimeout();\n                resolve(e);\n            };\n        });\n    }\n    async onRefreshTimeout() {\n        // console.log('WebSocketClient.onRefreshTimeout');\n        this.refreshTimeoutId = null;\n        this.send('ping');\n        this.startRefreshTimeout();\n    }\n    send(data) {\n        console.log('WebSocketClient.send', data);\n        this.webSocket.send(data);\n    }\n    startRefreshTimeout() {\n        this.refreshTimeoutId = setTimeout(this.onRefreshTimeout.bind(this), this.REFRESH_TIMEOUT * 1000);\n    }\n    resetRefreshTimeout() {\n        if (this.refreshTimeoutId) {\n            clearTimeout(this.refreshTimeoutId);\n            this.refreshTimeoutId = null;\n        }\n    }\n    async reconnect() {\n        console.log('WebSocketClient.reconnect');\n        try {\n            await this.connect();\n        } catch (err) {\n            console.error(err);\n            console.log(`waiting ${this.RECONNECT_TIMEOUT} sec for socket reconnect...`);\n            setTimeout(async () => await this.reconnect(), this.RECONNECT_TIMEOUT * 1000);\n        }\n    }\n\n    async onClose(e) {\n        console.error('WebSocketClient.onClose', e);\n        this.getApp().getHostApp().logError(new Error('websocket close'));\n        this.resetRefreshTimeout();\n        this.webSocket.onclose = null;\n        this.webSocket.onmessage = null;\n        this.webSocket = null;\n        await this.reconnect();\n    }\n    async onMessage(e) {\n        console.log('WebSocketClient.onMessage', JSON.parse(e.data));\n        const packet = JSON.parse(e.data);\n        if (packet.type === 'result') {\n            this.getApp().getView().disableRerender();\n            await this.getApp().getModel().emitResult(packet.data);\n            this.getApp().getView().enableRerender();\n            this.getApp().getView().rerender();\n        }\n    }\n    getApp() {\n        return this.options.applicationController;\n    }\n}\n","class Controller extends EventEmitter {\n    constructor() {\n        super();\n        this.view = null;\n    }\n    onViewCreate = view => {\n        // console.log('Controller.onViewCreate');\n        this.view = view;\n    }\n    async rerender() {\n        if (this.view) {\n            return await this.view.rerender();\n        }\n        console.error(`${this.constructor.name}.rerender no view`);\n    }\n    getView() {\n        return this.view;\n    }\n    getViewClass() {\n        throw new Error(`${this.constructor.name}.getViewClass not implemented`);\n    }\n}\n","class AlertController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return AlertView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onOkButtonClick = async e => {\n        this.close(true);\n    }\n    onCloseClick = async e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class ConfirmController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return ConfirmView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onYesClick = e => {\n        this.close(true);\n    }\n    onCloseClick = e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class LoginController extends Controller {\n    constructor(frontHostApp) {\n        super();\n        console.log(`${this.constructor.name}.constructor`);\n        this.frontHostApp = frontHostApp;\n    }\n    static create(frontHostApp) {\n        const data = frontHostApp.getData();\n        if (!data.name) throw new Error('no app name');\n        const CustomClass = FrontHostApp.getClassByName(`${data.name}LoginController`);\n        const Class = CustomClass ? CustomClass : LoginController;\n        return new Class(frontHostApp);\n    }\n    getViewClass() {\n        return LoginView;\n    }\n    getText() {\n        return this.frontHostApp.getText();\n    }\n    getFrontHostApp() {\n        return this.frontHostApp;\n    }\n    getViewClassCssBlockName() {\n        return this.getViewClass().name;\n    }\n}\n","class ModalController extends Controller {\n    constructor(options = {}) {\n        super();\n        if (!options.app) throw new Error('no app');\n        if (!options.id) throw new Error('no id');\n        this.options = options;\n    }\n    getId() {\n        return this.options.id;\n    }\n    getApp() {\n        return this.options.app;\n    }\n    async close() {\n        await this.getApp().closeModal(this);\n        if (this.options.onClose) {\n            this.options.onClose();\n        }\n    }\n}\n","class ImageDialogController extends ModalController {\n    constructor(options) {\n        // console.log('ImageDialogController.constructor', options);\n        super(options);\n        if (!options.src) throw new Error('no src');\n    }\n    getViewClass() {\n        console.log('ImageDialogController.getViewClass');\n        return ImageDialogView;\n    }\n    getSrc() {\n        return this.options.src;\n    }\n    onCloseClick = async e => {\n        await this.close();\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            await this.close();\n        }\n    }\n}\n","class ModelController extends Controller {\n    constructor(model, parent) {\n        super();\n        this.model    = model;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.model.getFullName()}: controller already deinited`);\n        this.deinited = true;\n    }\n    getModel() {\n        return this.model;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getTitle() {\n        return this.getModel().getCaption();\n    }\n    getViewClass() {\n        // console.log(`${this.constructor.name}.getViewClass`, this.getModel().getAttr('viewClass'));\n        const model = this.getModel();\n        if (!model.isAttr('viewClass')) throw new Error(`${this.constructor.name} not supports view`);\n        const viewClassName = model.getAttr('viewClass');\n        return viewClassName ? eval(viewClassName) : null;\n    }\n}\n\nwindow.QForms.ModelController = ModelController;\n","class ApplicationController extends ModelController {\n    constructor(model, frontHostApp) {\n        // console.log('ApplicationController.constructor', model, view);\n        super(model, null);\n        this.frontHostApp = frontHostApp;\n        this.lastId = 0;\n        this.activePage = null;     // active non modal page\n        this.modals = [];\n        this.statusbar  = null;\n        this.homePageName = null;\n        this.webSocketClient = null;\n    }\n    static create(model, frontHostApp) {\n        // console.log('ApplicationController.create', 'debug:', ApplicationController.isDebugMode());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}ApplicationController`);\n        const Class = CustomClass ? CustomClass : ApplicationController;\n        return new Class(model, frontHostApp);\n    }\n    static getSearchObj() {\n        // console.log('ApplicationController.getSearchObj:', window.location);\n        if (!window.location.search.split('?')[1]) return {};\n        return window.location.search.split('?')[1].split('&').reduce((acc, item) => {\n            const kv = item.split('=');\n            acc[kv[0]] = kv[1];\n            return acc;\n        }, {});\n    }\n    static isDebugMode() {\n        return ApplicationController.getSearchObj()['debug'] === '1';\n    }\n    init() {\n        // console.log('ApplicationController.init');\n        super.init();\n        // this.model.on('logout' , this.onLogout);\n        this.model.on('request', this.onRequest);\n        const pageData = this.model.data.pages[0];\n        this.activePage = pageData ? this.createPage(pageData, {\n            modal : false,\n            params: this.getGlobalParams()\n        }) : null;\n        document.title = this.getTitle();\n        this.homePageName = this.activePage.getModel().getName();\n    }\n    deinit() {\n        // this.model.off('logout', this.onLogout);\n        this.model.off('request', this.onRequest);\n        super.deinit();\n    }\n    getViewClass() {\n        return super.getViewClass() || ApplicationView;\n    }\n    createView(rootElement) {\n        // console.log('ApplicationController.createView');\n        this.view = Helper.createReactComponent(rootElement, this.getViewClass(), {ctrl: this});\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(this.model.getAttr('time'));\n        }\n    }\n    onRequest = async e => {\n        console.log('onRequest', e);\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(e.time);\n        }\n        // console.log('e.remoteAppVersion', e.remoteAppVersion);\n        // console.log('this.getModel().getData().versions.app', this.getModel().getData().versions.app);\n        if (this.getModel().getData().versions.app !== e.remoteAppVersion) {\n            this.createVersionNotificationIfNotExists();\n        }\n    }\n    createVersionNotificationIfNotExists() {\n        // console.log('ApplicationController.createVersionNotificationIfNotExists');\n        if (!document.querySelector(`.${this.getView().getCssBlockName()}__version-notification`)) {\n            const div = document.createElement('div');\n            div.innerHTML = this.getModel().getText().application.versionNotification;\n            div.className = `${this.getView().getCssBlockName()}__version-notification`;\n            document.querySelector(`.${this.getView().getCssBlockName()}__body`).append(div);\n        } else {\n            // console.log(`version notification already exists`);\n        }\n    }\n    getGlobalParams() {\n        return {\n            // foo: 'bar'\n        };\n    }\n    // options\n    // - modal      : boolean,\n    // - newMode    : boolean,\n    // - selectMode : boolean,\n    // - selectedKey: string,\n    // - onCreate   : function,\n    // - onSelect   : function,\n    // - onClose    : function,\n    // - params     : object,\n    createPage(pageData, options) {\n        if (options.modal === undefined) throw new Error('no options.modal');\n\n        // model\n        const pageModel = new Page(pageData, this.model, options);\n        pageModel.init();\n\n        // controller\n        const pc = PageController.create(pageModel, this, `c${this.getNextId()}`);\n        pc.init();\n\n        return pc;\n    }\n    async openPage(options) {\n        console.log('ApplicationController.openPage', options);\n        if (!options.name) throw new Error('no name');\n        if (options.key) throw new Error('openPage: key param is deprecated');\n\n        // if this page with this key is already opened, then show it\n        const pageController = this.findPageControllerByPageNameAndKey(options.name, null);\n        // console.log('pageController:', pageController);\n        if (pageController) {\n            this.onPageSelect(pageController);\n            return pageController;\n        }\n\n        const {page: pageData} = await this.model.request({\n            action : 'page',\n            page   : options.name,\n            newMode: !!options.newMode,\n            params : options.params || {}\n        });\n\n        // modal by default\n        if (options.modal === undefined) {\n            options.modal = true;\n        }\n        if (!options.onClose) {\n            const activeElement = document.activeElement;\n            options.onClose = () => {\n                if (activeElement) activeElement.focus();\n            };\n        }\n        const pc = this.createPage(pageData, options);\n        // console.log('pc:', pc);\n\n        // show\n        pc.isModal() ? this.addModal(pc) : this.addPage(pc);\n        await this.rerender();\n\n        return pc;\n    }\n    addModal(ctrl) {\n        this.modals.push(ctrl);\n    }\n    removeModal(ctrl) {\n        // console.log('ApplicationController.removeModal', ctrl);\n        const i = this.modals.indexOf(ctrl);\n        if (i === -1) throw new Error(`cannot find modal: ${ctrl.getId()}`);\n        this.modals.splice(i, 1);\n    }\n    getNextId() {\n        this.lastId++;\n        return this.lastId;\n    }\n    getNewId() {\n        return `c${this.getNextId()}`;\n    }\n    addPage(pc) {\n        if (this.activePage) {\n            this.closePage(this.activePage);\n        }\n        this.activePage = pc;\n        document.title = this.getTitle();\n    }\n    findPageControllerByPageNameAndKey(pageName, key) {\n        if (this.activePage && this.activePage.model.getName() === pageName && this.activePage.model.getKey() === key) {\n            return this.activePage;\n        }\n        return null;\n    }\n    onPageSelect(pc) {\n        console.log('ApplicationController.onPageSelect', pc.model.getName());\n    }\n    async closePage(pageController) {\n        console.log('ApplicationController.closePage', pageController.model.getFullName());\n        if (this.modals.indexOf(pageController) > -1) {\n            this.modals.splice(this.modals.indexOf(pageController), 1);\n        } else if (this.activePage === pageController) {\n            this.activePage = null;\n            document.title = '';\n        } else  {\n            throw new Error('page not found');\n        }\n        await this.rerender();\n        pageController.deinit();\n        pageController.model.deinit();\n    }\n    async onActionClick(name) {\n        console.log('ApplicationController.onActionClick', name);\n    }\n    getMenuItemsProp() {\n        // console.log('ApplicationController.getMenuItemsProp');\n        return [\n            // pages & actions\n            ...(this.model.data.menu ? Object.keys(this.model.data.menu).map(key => ({\n                name : key,\n                title: key,\n                items: this.model.data.menu[key].map(item => ({\n                    type : item.type,\n                    name : item.page || item.action,\n                    title: item.caption\n                }))\n            })) : []),\n            // user\n            ...(this.model.getUser() ? [{\n                name : 'user',\n                title: `${this.model.getDomain()}/${this.model.getUser().login}`,\n                items: [\n                    {\n                        type : 'custom',\n                        name : 'logout',\n                        title: 'Logout'\n                    }\n                ]\n            }] : [])\n        ];\n    }\n    onStatusbarCreate = statusbar => {\n        this.statusbar = statusbar;\n    }\n    onLogout = async () => {\n        console.log('ApplicationController.onLogout');\n        const result = await this.model.request({action: 'logout'});\n        location.href = this.getRootPath();\n    }\n    onMenuItemClick = async (menu, type, name) => {\n        console.log('ApplicationController.onMenuItemClick', menu, type, name);\n        if (type === 'page') {\n            await this.openPage({name: name, modal: false});\n            history.pushState({pageName: name}, '', PageController.createLink({page: name}));\n        } else if (type === 'action') {\n            try {\n                const result = await this.onActionClick(name);\n                if (!result) {\n                    throw new Error(`no handler for action '${name}'`);\n                }\n            } catch (err) {\n                await this.alert({message: err.message});\n            }\n        } else if (type === 'custom' && name === 'logout') {\n            await this.onLogout();\n        } else {\n            throw new Error(`unknown menu type/name: ${type}/${name}`);\n        }\n    }\n    /*getFocusCtrl() {\n        if (this.modals.length > 0) {\n            return this.modals[this.modals.length - 1];\n        }\n        return this.activePage;\n    }*/\n    getActivePageName() {\n        if (this.activePage) {\n            return this.activePage.getModel().getName();\n        }\n        return null;\n    }\n    async onWindowPopState(e) {\n        console.log('ApplicationController.onWindowPopState', e.state);\n        await this.openPage({\n            name : e.state ? e.state.pageName : this.homePageName,\n            modal: false\n        });\n    }\n    getTitle() {\n        // console.log('ApplicationController.getTitle', this.activePage);\n        if (this.activePage) {\n            return `${this.activePage.getTitle()} - ${this.getModel().getCaption()}`;\n        }\n        return this.getModel().getCaption();\n    }\n    invalidate() {\n        if (this.activePage) this.activePage.invalidate();\n        this.modals.filter(ctrl => ctrl instanceof PageController).forEach(page => page.invalidate());\n    }\n    async alert(options) {\n        /*if (!options.title) {\n            options.title = this.getModel().getText().application.error;\n        }*/\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.alert(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    async confirm(options) {\n        if (!options.title) {\n            options.title = this.getModel().getText().application.confirm;\n        }\n        if (!options.yesButton) {\n            options.yesButton = this.getModel().getText().confirm.yes;\n        }\n        if (!options.noButton) {\n            options.noButton = this.getModel().getText().confirm.no;\n        }\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.confirm(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    getRootPath() {\n        return '/';\n    }\n    async openModal(ctrl) {\n        this.addModal(ctrl);\n        await this.rerender();\n    }\n    async closeModal(ctrl) {\n        this.removeModal(ctrl);\n        await this.rerender();\n    }\n    getHostApp() {\n        return this.frontHostApp;\n    }\n    async connect() {\n        const data = this.getModel().getData();\n        this.webSocketClient = new WebSocketClient({\n            applicationController: this,\n            protocol             : data.nodeEnv === 'development' ? 'ws' : 'wss',\n            route                : data.route,\n            uuid                 : data.uuid,\n            userId               : data.user ? data.user.id : null,\n        });\n        await this.webSocketClient.connect();\n    }\n}\n\nwindow.QForms.ApplicationController = ApplicationController;\n","class FieldController extends ModelController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    static create(model, parent) {\n        // console.log('FieldController.create', model.getFullName(), parent.model.getClassName());\n        const page = model.getPage();\n        const form = model.getForm();\n        const CustomClass = FrontHostApp.getClassByName(`${page.getName()}${form.getName()}${model.getName()}FieldController`);\n        const GeneralClass = FrontHostApp.getClassByName(`${parent.model.getClassName()}${model.getClassName()}Controller`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    valueToString(value) {\n        // console.log('Field.valueToString', this.model.getFullName(), typeof value, value);\n        switch (typeof value) {\n            case 'string':\n                return value;\n            case 'object':\n                if (value === null) return '';\n                if (value instanceof Date) return value.toISOString();\n                return JSON.stringify(value, null, 4);\n            case 'number':\n            case 'boolean':\n                return value.toString();\n            case 'undefined':\n                return '';\n            default: throw new Error(`${this.model.getFullName()}: unknown value type: ${typeof value}, value: ${value}`);\n        }\n    }\n    stringToValue(stringValue) {\n        // console.log('FieldController.stringToValue', this.model.getFullName(), stringValue);\n        // if (stringValue === undefined) return undefined;\n        // if (stringValue === null) return null;\n        const fieldType = this.model.getType();\n        // console.log('fieldType:', fieldType);\n        if (stringValue.trim() === '') return null;\n        if (fieldType === 'object' || fieldType === 'boolean') {\n            return JSON.parse(stringValue);\n        } else if (fieldType === 'date') {\n            const date = new Date(stringValue);\n            if (date.toString() === 'Invalid Date') throw new Error(`${this.getApp().getModel().getText().error.invalidDate}: ${stringValue}`);\n            return date;\n        } else if (fieldType === 'number') {\n            const num = Number(stringValue);\n            if (isNaN(num)) throw new Error(this.getApp().getModel().getText().error.notNumber);\n            return num;\n        }\n        return stringValue;\n    }\n    getViewStyle(row) {\n        return null;\n    }\n    async openPage(options) {\n        return await this.getParent().openPage(options);\n    }\n    getForm() {\n        return this.parent;\n    }\n    getPage() {\n        return this.parent.parent;\n    }\n    getApp() {\n        return this.parent.parent.parent;\n    }\n    isVisible() {\n        return this.getModel().getAttr('visible') === 'true';\n    }\n    isAutoFocus() {\n        return this.getModel().getAttr('autoFocus') === 'true';\n    }\n    getAutocomplete() {\n        return this.getModel().getAttr('autocomplete') || null;\n    }\n    getFormat() {\n        return this.getModel().getAttr('format');\n    }\n}\nwindow.QForms.FieldController = FieldController;\n","class RowFormFieldController extends FieldController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            value     : null,\n            parseError: null,\n            error     : null,\n            changed   : false,\n        };\n    }\n    init() {\n        const row = this.getRow();\n        const value = this.model.getValue(row);\n        this.setValue(value);\n        // console.log(this.model.getFullName(), value);\n    }\n    refill() {\n        // console.log('RowFormFieldController.refill', this.model.getFullName());\n        if (!this.view) return;\n        const value = this.model.getValue(this.getRow());\n        this.setValue(value);\n        this.resetErrors();\n        this.refreshChanged();\n    }\n    getRow() {\n        return this.model.getForm().getRow();\n    }\n    copyValueToModel() {\n        // console.log('RowFormFieldController.copyValueToModel', this.model.getFullName());\n        this.model.setValue(this.getRow(), this.getValue());\n    }\n    _onChange(widgetValue) {\n\n    }\n    putValue(widgetValue) {\n        // console.log('RowFormFieldController.putValue', widgetValue);\n        this.onChange(widgetValue, false);\n    }\n    onChange = async (widgetValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onChange', widgetValue);\n        this._onChange(widgetValue);\n        this.resetErrors();\n        try {\n            this.setValueFromWidget(widgetValue);\n        } catch (err) {\n            console.error(`${this.model.getFullName()}: cannot parse view value: ${err.message}`);\n            this.state.parseError = err.message;\n        }\n\n        if (this.model.validateOnChange()) {\n            this.validate();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    onBlur = (widgetValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onBlur', this.model.getFullName());\n        if (this.model.validateOnBlur()) {\n            console.log('validateOnBlur');\n            this.validate();\n            if (this.isValid()) {\n                this.model.setValue(this.getRow(), this.getValue());\n            }\n            this.refreshChanged();\n            if (fireEvent) {\n                try {\n                    this.emit('change', {value: widgetValue});\n                } catch (err) {\n                    console.error('unhandled change event error:', this.model.getFullName(), err);\n                }\n                this.parent.onFieldChange({source: this});\n            }\n        }\n    }\n    getValueForWidget() {\n        const value = this.getValue();\n        // console.log('value:', this.model.getFullName(), value, typeof value);\n        return this.valueToString(value);\n    }\n    setValueFromWidget(widgetValue) {\n        // console.log('RowFormFieldController.setValueFromWidget', this.model.getFullName(), typeof widgetValue, widgetValue);\n        if (typeof widgetValue !== 'string') throw new Error(`${this.model.getFullName()}: widgetValue must be string, but got ${typeof widgetValue}`);\n        const value = this.stringToValue(widgetValue);\n        // console.log('value:', value);\n        this.setValue(value);\n    }\n    setValue(value) {\n        // console.log('RowFormFieldController.setValue', this.model.getFullName(), value);\n        this.state.value = value;\n    }\n    getValue() {\n        return this.state.value;\n    }\n    isChanged() {\n        // console.log('RowFormFieldController.isChanged', this.model.getFullName(), this.state);\n        return this.state.changed;\n    }\n    isValid() {\n        return this.state.parseError === null && this.state.error === null;\n    }\n    validate() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        if (this.isVisible()) {\n            this.state.error = this.getError();\n        }\n    }\n    refreshChanged() {\n        this.state.changed = this.calcChangedState(this.getRow());\n    }\n    getPlaceholder() {\n        // console.log('RowFormFieldController.getPlaceholder', this.model.getFullName(), this.model.getAttr('placeholder'));\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        if (ApplicationController.isDebugMode()) {\n            const value = this.getValue();\n            if (value === undefined) return 'undefined';\n            if (value === null) return 'null';\n            if (value === '') return 'empty string';\n        }\n    }\n    getError() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.view && this.view.getWidget()) {\n            try {\n                const widgetValue = this.view.getWidget().getValue();\n            } catch (err) {\n                return `can't parse value: ${err.message}`;\n            }\n        }\n\n        // null validator\n        const value = this.getValue();\n        if (this.model.isNotNull() && (value === null || value === undefined)) {\n            return this.getModel().getApp().getText().form.required;\n        }\n        return null;\n    }\n    isEditable() {\n        return this.parent.getMode() === 'edit' && !this.model.isReadOnly();\n    }\n    isParseError() {\n        return this.state.parseError !== null;\n    }\n    calcChangedState(row) {\n        // console.log('RowFormFieldController.calcChangedState', this.model.getFullName());\n        if (!row) throw new Error('FieldController: no row');\n        if (this.isParseError()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: parse error: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (!this.isValid()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: not valid: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (this.model.hasColumn()) {\n            const fieldRawValue = this.model.valueToRaw(this.getValue());\n            const dsRawValue = this.model.getRawValue(row);\n            if (fieldRawValue !== dsRawValue) {\n                console.log(`FIELD CHANGED ${this.model.getFullName()}`, dsRawValue, fieldRawValue);\n                return true;\n            }\n        }\n        if (this.model.isChanged(row)) {\n            let original = row[this.model.getAttr('column')];\n            let modified = this.model.getDefaultDataSource().getRowWithChanges(row)[this.model.getAttr('column')];\n            if (original) original = original.substr(0, 100);\n            if (modified) modified = modified.substr(0, 100);\n            console.log(`MODEL CHANGED ${this.model.getFullName()}:`, original, modified);\n            return true;\n        }\n        return false;\n    }\n    setError(error) {\n        this.state.error = error;\n    }\n    resetErrors() {\n        this.setError(null);\n        this.state.parseError = null;\n    }\n    getErrorMessage() {\n        if (this.state.parseError) {\n            return this.state.parseError;\n        }\n        return this.state.error;\n    }\n}\nwindow.QForms.RowFormFieldController = RowFormFieldController;\n","class RowFormCheckBoxFieldController extends RowFormFieldController {\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n\n    getViewClass() {\n        return super.getViewClass() || RowFormCheckBoxFieldView;\n    }\n}\n\nwindow.QForms.RowFormCheckBoxFieldController = RowFormCheckBoxFieldController;\n","class RowFormComboBoxFieldController extends RowFormFieldController {\n    init() {\n        // console.log('RowFormComboBoxFieldController.init', this.getModel().getFullName());\n        super.init();\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.on('insert', this.onListInsert);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListDelete);\n    }\n    deinit() {\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.off('insert', this.onListInsert);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListDelete);\n        super.deinit();\n    }\n\n    getItems() {\n        try {\n            return this.getRows().map(row => ({\n                value: this.model.getValueValue(row).toString(),\n                title: this.model.getDisplayValue(row).toString()\n            }));\n        } catch (err) {\n            err.message = `${this.getModel().getFullName()}: ${err.message}`;\n            throw err;\n        }\n    }\n    getRows() {\n        return this.model.getComboBoxDataSource().getRows();\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormComboBoxFieldView;\n    }\n    getPlaceholder() {\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        return ApplicationController.isDebugMode() ? '[null]' : null;\n    }\n    onEditButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onEditButtonClick');\n        const itemEditPage = this.getModel().getAttr('itemEditPage');\n        const value = this.getValue();\n        // console.log('itemEditPage', itemEditPage);\n        // console.log('value:', value);\n        if (itemEditPage && value) {\n            await this.openPage({\n                name: itemEditPage,\n                params: {\n                    key: value\n                }\n            });\n        }\n    }\n    onCreateButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onCreateButtonClick');\n        const newRowMode = this.getModel().getAttr('newRowMode');\n        const itemCreateForm = this.getModel().getAttr('itemCreateForm');\n        if (!itemCreateForm) throw new Error('no itemCreateForm');\n\n        let createPageName;\n        if (newRowMode === 'editPage') {\n            createPageName = this.getModel().getAttr('itemEditPage');\n        } else if (newRowMode === 'createPage') {\n            createPageName = this.getModel().getAttr('itemCreatePage');\n        } else {\n            throw new Error(`wrong newRowMode value: ${newRowMode}`);\n        }\n\n        // page\n        const pc = await this.openPage({\n            name: createPageName,\n            newMode: true\n        });\n\n        // form\n        const form = pc.getModel().getForm(itemCreateForm);\n        const onInsert = async e => {\n            form.off('insert', onInsert);\n            const [key] = e.inserts;\n            const [id] = Helper.decodeValue(key);\n            // console.log('id:', id);\n            await this.onChange(id.toString());\n        }\n        form.on('insert', onInsert);\n    }\n    onListInsert = async e => {\n        console.log('RowFormComboBoxFieldController.onListInsert');\n        await this.rerender();\n    }\n    onListUpdate = async e => {\n        // console.log('RowFormComboBoxFieldController.onListUpdate');\n        await this.rerender();\n    }\n    onListDelete = async e => {\n        await this.rerender();\n    }\n    onItemSelect = async e => {\n        // console.log('RowFormComboBoxFieldController.onItemSelect');\n        if (e.button === 0) {\n            e.preventDefault();\n            const id = this.getValue();\n            const selectedKey = id ? JSON.stringify([id]) : null;\n            await this.openPage({\n                name       : this.getModel().getAttr('itemSelectPage'),\n                selectMode : true,\n                selectedKey: selectedKey,\n                onSelect   : async key => {\n                    if (key) {\n                        const [id] = Helper.decodeValue(key);\n                        // console.log('id:', id);\n                        if (this.getValue() !== id) {\n                            await this.getView().onChange(id.toString());\n                        }\n                    } else {\n                        if (this.getValue() !== null) {\n                            await this.getView().onChange('');\n                        }\n                    }\n                }\n            });\n        }\n    }\n}\n\nwindow.QForms.RowFormComboBoxFieldController = RowFormComboBoxFieldController;\n","class RowFormDateFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormDateFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n}\nwindow.QForms.RowFormDateFieldController = RowFormDateFieldController;\n","class RowFormDateTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.widget2 = null;\n        this.defaultValue = 0;\n        this.state.parseError2 = null;\n        this.state.error2 = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormDateTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    getValueForTime() {\n        // console.log('RowFormDateTimeFieldController.getValueForTime', this.model.getFullName(), this.defaultValue, TimeBox.getStringValue(this.defaultValue));\n        const date = this.getValue();\n        if (date) {\n            const value = date.getHours() * 60 + date.getMinutes();\n            // console.log('value:', value);\n            if (value !== this.defaultValue) {\n                // console.log('not equal to default value', value, this.defaultValue);\n                return value;\n            }\n        }\n        return null;\n    }\n    setValueFromWidget(widgetValue) {\n        if (widgetValue === null) {\n            this.state.parseError2 = null;\n            this.resetErrors2();\n            if (this.widget2) this.widget2.setValue(null);\n        } else {\n            const [h, m] = TimeBox.splitTime(this.defaultValue);\n            widgetValue.setHours(h, m);\n        }\n        this.setValue(widgetValue);\n    }\n    onView2Create = widget2 => {\n        // console.log('RowFormDateTimeFieldController.onView2Create', widget2);\n        this.widget2 = widget2;\n    };\n    _onChange(widgetValue) {\n        // console.log('RowFormDateTimeFieldController._onChange', this.widget2);\n        if (widgetValue !== null) {\n            setTimeout(() => {\n                const input = this.widget2.getElement();\n                input.focus();\n                input.setSelectionRange(0, input.value.length);\n            }, 0);\n        }\n    }\n    onChange2 = (widgetValue, fireEvent = true) => {\n        // console.log('RowFormDateTimeFieldController.onChange2', widgetValue);\n        this.resetErrors2();\n        try {\n            this.setValueFromView2(widgetValue);\n        } catch (err) {\n            console.log(`${this.model.getFullName()}: cannot parse time: ${err.message}`);\n            this.state.parseError2 = err.message;\n        }\n        if (!this.state.parseError2) {\n            this.validate2();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    };\n    onBlur2 = (widgetValue, fireEvent = false) => {\n        console.log('RowFormDateTimeFieldController.onBlur2', widgetValue);\n        if (!this.isEditable()) return;\n        this.validate2();\n        if (this.isValid()) {\n            this.copyValueToModel();\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n        }\n        this.parent.onFieldChange({source: this});\n    };\n    getPlaceholder2() {\n        return TimeBox.getStringValue(this.defaultValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue(defaultValue) {\n        // console.log('RowFormDateTimeFieldController.setDefaultValue', this.widget2 ? this.widget2.getValue() : null);\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24 * 60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n        if (this.widget2 && this.widget2.getValue() === null && this.state.value) {\n            this.setValue2(null);\n        }\n    }\n    setValueFromView2(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error('wrong time');\n        this.setValue2(widgetValue);\n    }\n    setValue2(widgetValue) {\n        const value = widgetValue !== null ? widgetValue : this.defaultValue;\n        const [h, m] = TimeBox.splitTime(value);\n        this.state.value.setHours(h, m);\n    }\n    validate2() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        this.state.error2 = this.getError2();\n    }\n    getError2() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.widget2) {\n            try {\n                const widgetValue = this.widget2.getValue();\n            } catch (err) {\n                return `can't parse time: ${err.message}`;\n            }\n        }\n\n        return null;\n    }\n    isParseError2() {\n        return this.state.parseError2 !== null;\n    }\n    resetErrors2() {\n        this.setError2(null);\n        this.state.parseError2 = null;\n    }\n    setError2(error2) {\n        this.state.error2 = error2;\n    }\n    getErrorMessage2() {\n        if (this.state.parseError2) {\n            return this.state.parseError2;\n        }\n        return this.state.error2;\n    }\n    isValid2() {\n        return this.state.parseError2 === null && this.state.error2 === null;\n    }\n    refill() {\n        // console.log('RowFormDateTimeFieldController.refill');\n        if (!this.widget2) return;\n        super.refill();\n        this.widget2.setValue(this.getValueForTime());\n        this.resetErrors2();\n        this.refreshChanged();\n    }\n    isParseError() {\n        return super.isParseError() || this.isParseError2();\n    }\n    isValid() {\n        return super.isValid() && this.isValid2();\n    }\n    getErrorMessage() {\n        if (super.getErrorMessage() === null && this.getErrorMessage2() === null) return null;\n        return [\n            ...(super.getErrorMessage() ? [super.getErrorMessage()] : []),\n            ...(this.getErrorMessage2() ? [this.getErrorMessage2()] : [])\n        ].join(', ');\n    }\n}\nwindow.QForms.RowFormDateTimeFieldController = RowFormDateTimeFieldController;\n","class RowFormFileFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormFileFieldView;\n    }\n}\nwindow.QForms.RowFormFileFieldController = RowFormFileFieldController;\n","class RowFormImageFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormImageFieldView;\n    }\n}\nwindow.QForms.RowFormImageFieldController = RowFormImageFieldController;\n","class RowFormLinkFieldController extends  RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('RowFormLinkFieldController.onClick', e);\n        this.emit({source: this});\n    }\n}\nwindow.QForms.RowFormLinkFieldController = RowFormLinkFieldController;\n","class RowFormPasswordFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPasswordFieldView;\n    }\n}\nwindow.QForms.RowFormPasswordFieldController = RowFormPasswordFieldController;\n","class RowFormPhoneFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPhoneFieldView;\n    }\n}\nwindow.QForms.RowFormPhoneFieldController = RowFormPhoneFieldController;\n","class RowFormTextAreaFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextAreaFieldView;\n    }\n}\nwindow.QForms.RowFormTextAreaFieldController = RowFormTextAreaFieldController;\n","class RowFormTextBoxFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextBoxFieldView;\n    }\n}\nwindow.QForms.RowFormTextBoxFieldController = RowFormTextBoxFieldController;\n","class RowFormTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.defaultValue = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error('wrong time');\n        this.setValue(widgetValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue(defaultValue) {\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24*60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n    }\n    getPlaceholder() {\n        // console.log('CarReservefromTimeController.getPlaceholder', this.defaultValue);\n        if (this.defaultValue !== null) return TimeBox.getStringValue(this.defaultValue);\n        return super.getPlaceholder();\n    }\n}\nwindow.QForms.RowFormTimeFieldController = RowFormTimeFieldController;\n","class TableFormFieldController extends FieldController {\n    getValueForWidget(row) {\n        // console.log('TableFormFieldController.getValueForWidget');\n        return this.valueToString(this.model.getValue(row));\n    }\n}\nwindow.QForms.TableFormFieldController = TableFormFieldController;\n","class TableFormCheckBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormCheckBoxFieldView;\n    }\n    getValueForWidget(row) {\n        return this.model.getValue(row);\n    }\n}\nwindow.QForms.TableFormCheckBoxFieldController = TableFormCheckBoxFieldController;\n","class TableFormComboBoxFieldController extends TableFormFieldController {\n\n    init() {\n        super.init();\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.on('insert', this.onListUpdate);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListUpdate);\n    }\n\n    deinit() {\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.off('insert', this.onListUpdate);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListUpdate);\n        super.deinit();\n    }\n\n    getViewClass() {\n        return super.getViewClass() || TableFormComboBoxFieldView;\n    }\n\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        const rawValue = this.model.valueToRaw(value);\n        if (rawValue === undefined || rawValue === 'null') return '';\n        const cbRow = this.model.findRowByRawValue(rawValue);\n        if (cbRow) {\n            return this.valueToString(this.model.getDisplayValue(cbRow));\n        }\n        return `[no row for id: ${rawValue}]`;\n    }\n\n    onListUpdate = async e => {\n        // console.log('TableFormComboBoxFieldController.onListUpdate', this.getModel().getFullName());\n        this.getForm().invalidate();\n        await this.getForm().rerender();\n    }\n\n}\nwindow.QForms.TableFormComboBoxFieldController = TableFormComboBoxFieldController;\n","class TableFormDateFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateFieldController = TableFormDateFieldController;\n","class TableFormDateTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateTimeFieldController = TableFormDateTimeFieldController;\n","class TableFormLinkFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('TableFormLinkFieldController.onClick', e);\n        e.preventDefault();\n        this.emit('click', {source: this});\n    }\n}\nwindow.QForms.TableFormLinkFieldController = TableFormLinkFieldController;\n","class TableFormPhoneFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormPhoneFieldView;\n    }\n}\n","class TableFormTextAreaFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextAreaFieldView;\n    }\n}\nwindow.QForms.TableFormTextAreaFieldController = TableFormTextAreaFieldController;\n","class TableFormTextBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextBoxFieldView;\n    }\n    /*beginEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'text';\n        view.firstElementChild.contentEditable = true;\n        const range = document.createRange();\n        range.selectNodeContents(view.firstElementChild);\n        window.getSelection().removeAllRanges();\n        window.getSelection().addRange(range);\n        view.firstElementChild.focus();\n        return true;\n    }*/\n\n    /*endEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'none';\n        view.firstElementChild.contentEditable = false;\n    }*/\n}\nwindow.QForms.TableFormTextBoxFieldController = TableFormTextBoxFieldController;\n","class TableFormTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        return TimeBox.getStringValue(value);\n    }\n}\nwindow.QForms.TableFormTimeFieldController = TableFormTimeFieldController;\n","class FormController extends ModelController {\n    static create(model, parent) {\n        // console.log('FormController.create', model.getFullName());\n        const page = model.getPage();\n        const customClassName = `${page.getName()}${model.getName()}FormController`;\n        const CustomClass = FrontHostApp.getClassByName(customClassName);\n        const GeneralClass = FrontHostApp.getClassByName(`${model.getClassName()}Controller`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    constructor(model, parent) {\n        super(model, parent);\n        this.fields = {};\n    }\n    init() {\n        for (const field of this.model.fields) {\n            const ctrl = this.fields[field.getName()] = FieldController.create(field, this);\n            ctrl.init();\n        }\n    }\n    deinit() {\n        // console.log('FormController.deinit:', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].deinit();\n        }\n        super.deinit();\n    }\n    isValid() {\n        return true;\n    }\n    async openPage(options) {\n        return await this.getPage().openPage(options);\n    }\n    getPage() {\n        return this.parent;\n    }\n    isChanged() {\n        return false;\n    }\n    async onFieldChange(e) {\n        // console.log('FormController.onFieldChange', this.model.getFullName());\n        await this.getPage().onFormChange(e);\n    }\n    getUpdated() {\n        return this.state.updated;\n    }\n    invalidate() {\n        this.state.updated = Date.now();\n    }\n    async onActionClick(name, row) {\n        console.log('FormController.onActionClick', name, row);\n    }\n    getField(name) {\n        return this.fields[name];\n    }\n    getApp() {\n        return this.parent.parent;\n    }\n    getSelectedRowKey() {\n        return null;\n    }\n    isAutoFocus() {\n        for (const name in this.fields) {\n            if (this.fields[name].isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nwindow.QForms.FormController = FormController;\n","class RowFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now(),\n            mode   : 'edit',\n            hasNew : false,\n            changed: false,\n            valid  : true\n        };\n    }\n\n    init() {\n        super.init();\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('insert' , this.onModelInsert);\n        this.model.on('update' , this.onModelUpdate);\n        if (this.model.getDefaultDataSource().getClassName() === 'SqlDataSource') {\n            this.state.mode = 'view';\n        }\n        this.calcState();\n        if (this.state.hasNew) {\n            this.state.mode = 'edit';\n        }\n    }\n\n    deinit() {\n        // console.log('RowFormController.deinit', this.model.getFullName());\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('insert' , this.onModelInsert);\n        this.model.off('update' , this.onModelUpdate);\n        super.deinit();\n    }\n\n    calcState() {\n        this.state.hasNew  = this.model.hasNew();\n        this.state.changed = this.isChanged();\n        this.state.valid   = this.isValid();\n        // console.log('hasNew:', hasNew);\n        // console.log('changed:', changed);\n        // console.log('valid:', valid);\n    }\n\n    refill() {\n        console.log('RowFormController.refill', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].refill();\n        }\n    }\n\n    onModelRefresh = async e => {\n        console.log('RowFormController.onModelRefresh', this.model.getFullName());\n        if (!this.view) return;\n        this.refill();\n        this.invalidate();\n        this.rerender();\n    }\n\n    onModelInsert = async e => {\n        console.log('RowFormController.onModelInsert', this.model.getFullName());\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormInsert(e);\n    }\n\n    onModelUpdate = async e => {\n        console.log('RowFormController.onModelUpdate', this.model.getFullName(), e);\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormUpdate(e);\n    }\n\n    isValid() {\n        // console.log('RowFormController.isValid', this.model.getFullName());\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (!field.isValid()) return false;\n        }\n        return true;\n    }\n    validate() {\n        // console.log('RowFormController.validate', this.getModel().getFullName());\n        for (const name in this.fields) {\n            this.fields[name].validate();\n        }\n        this.invalidate();\n    }\n    clearFieldsError() {\n        for (const name in this.fields) {\n            this.fields[name].setError(null);\n        }\n    }\n    onSaveClick = async () => {\n        console.log('RowFormController.onSaveClick');\n        this.validate();\n        this.calcState();\n        if (this.isValid()) {\n            this.state.mode = 'view';\n            try {\n                this.getApp().getView().disableRerender();\n                await this.model.update();\n                console.log('form model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n                await this.getApp().getView().rerender();\n            }\n        } else {\n            console.error(`cannot update invalid row form: ${this.model.getFullName()}`);\n            await this.rerender();\n        }\n    }\n\n    onDiscardClick = () => {\n        console.log('RowFormController.onDiscardClick', this.model.getFullName());\n        const changedFields = [];\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row) || !field.isValid()) {\n                changedFields.push(name);\n            }\n        }\n        // console.log('changedFields:', changedFields);\n        this.model.discard(changedFields);\n\n        // refill changed fields\n        changedFields.forEach(name => {\n            this.fields[name].refill();\n        });\n\n        // ui\n        this.calcState();\n        this.state.mode = 'view';\n        this.rerender();\n\n        // event\n        this.parent.onFormDiscard(this);\n    }\n\n    onRefreshClick = async () => {\n        // console.log('RowFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n    }\n\n    isChanged() {\n        // console.log('RowFormController.isChanged', this.model.getFullName());\n        if (this.model.isChanged()) return true;\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row)) return true;\n        }\n        return false;\n    }\n\n    async onFieldChange(e) {\n        // console.log('RowFormController.onFieldChange', this.model.getFullName());\n        this.calcState();\n        this.invalidate();\n        await super.onFieldChange(e);\n    }\n\n    onEditClick = e => {\n        console.log('RowFormController.onEditClick');\n        this.state.mode = 'edit';\n        this.rerender();\n    }\n    onCancelClick = e => {\n        console.log('RowFormController.onCancelClick');\n        this.state.mode = 'view';\n        this.rerender();\n    }\n    getViewClass() {\n        // console.log('RowFormController.getViewClass', this.model.getFullName());\n        return super.getViewClass() || RowFormView;\n    }\n    getActiveRow(withChanges) {\n        return this.model.getRow(withChanges);\n    }\n    getMode() {\n        return this.state.mode;\n    }\n    isActionEnabled(name) {\n        return this.isViewMode();\n    }\n    isEditMode() {\n        return this.getMode() === 'edit';\n    }\n    isViewMode() {\n        return this.getMode() === 'view';\n    }\n}\nwindow.QForms.RowFormController = RowFormController;\n","class TableFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now()\n        };\n        this.grid = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || TableFormView;\n    }\n    init() {\n        super.init();\n        // this.parent.on('hide', this.onHidePage);\n        // this.parent.on('show', this.onShowPage);\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('update' , this.onModelUpdate);\n        this.model.on('delete' , this.onModelDelete);\n        this.model.on('insert' , this.onModelInsert);\n    }\n    deinit() {\n        // this.parent.off('hide', this.onHidePage);\n        // this.parent.off('show', this.onShowPage);\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('update' , this.onModelUpdate);\n        this.model.off('delete' , this.onModelDelete);\n        this.model.off('insert' , this.onModelInsert);\n        super.deinit();\n    }\n    onGridCreate = grid => {\n        this.grid = grid;\n    }\n    onNewClick = async e => {\n        console.log('TableFormController.onNewClick');\n        await this.new();\n    }\n    onRefreshClick = async e => {\n        console.log('TableFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n        // console.error('refresh error handler:', err.message);\n        // alert(err.message);\n    }\n    onDeleteClick = async e => {\n        console.log('TableFormController.onDeleteClick', this.model.getFullName(), this.grid.getActiveRowKey());\n        const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n        if (result) {\n            await this.model.getDefaultDataSource().delete(this.grid.getActiveRowKey());\n        }\n    }\n    onGridCellDblClick = async (row, key) => {\n        // console.log('TableFormController.onGridCellDblClick', row);\n        // const bodyCell = e.bodyCell;\n        // const row = bodyCell.bodyRow.dbRow;\n        // console.log('row:', row);\n        // const key = this.model.getDefaultDataSource().getRowKey(row);\n        // console.log('key:', key);\n        switch (this.model.getAttr('editMethod')) {\n            // case 'table':\n            //     this.grid.gridColumns[bodyCell.qFieldName].beginEdit(bodyCell);\n            // break;\n            case 'form':\n                if (this.getPage().getModel().getOptions().selectMode) {\n                    await this.getPage().selectRow(key);\n                } else {\n                    await this.edit(key);\n                }\n            break;\n        }\n    }\n    onGridLinkClick = async key => {\n        console.log('TableFormController.onGridLinkClick', key);\n        await this.edit(key);\n    }\n    onGridDeleteKeyDown = async (row, key) => {\n        console.log('TableFormController.onGridDeleteKeyDown', row, key);\n        if (this.getModel().getAttr('deleteRowMode') !== 'disabled') {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n            if (result) {\n                await this.model.getDefaultDataSource().delete(key);\n            }\n        }\n    }\n    /*onHidePage = async () => {\n        this.grid.saveScroll();\n    }*/\n    /*onShowPage = async () => {\n        console.log('TableFormController.onShowPage', this.model.getFullName());\n        if (!this.grid.isHidden()) {\n            this.grid.restoreScroll();\n            this.grid.focus();\n            // console.log('document.activeElement:', document.activeElement);\n        }\n    }*/\n    async new() {\n        if (this.model.getAttr('newRowMode') === 'oneclick') {\n            const row = {};\n            this.model.fillDefaultValues(row);\n            await this.model.getDefaultDataSource().insert(row);\n        } else if (this.model.getAttr('newRowMode') === 'editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemEditPage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemCreatePage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemCreatePage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        }\n    }\n    async edit(key) {\n        // console.log('TableForm.edit', this.model.getFullName(), key);\n        if (!this.model.getAttr('itemEditPage')) {\n            throw new Error(`${this.model.getFullName()}: itemEditPage is empty`);\n        }\n        try {\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } catch (err) {\n            // console.error(`${this.model.getFullName()}: edit form error handler:`, err);\n            // alert(`${this.model.getFullName()}: ${err.message}`);\n            err.message = `${this.model.getFullName()} edit: ${err.message}`;\n            throw err;\n        }\n    }\n    onModelRefresh = async e => {\n        console.log('TableFormController.onModelRefresh', this.model.getFullName(), e);\n        if (!this.view) return;\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelInsert = async e => {\n        console.log('TableFormController.onModelInsert', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid && e.source) {\n            for (const key of e.inserts) {\n                this.grid.setActiveRowKey(key);\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelUpdate = async e => {\n        console.log('TableFormController.onModelUpdate', this.model.getFullName(), e, this.view);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key in e.updates) {\n                if (this.grid.getActiveRowKey() === key) {\n                    const newKey = e.updates[key];\n                    if (key !== newKey) {\n                        this.grid.setActiveRowKey(newKey);\n                    }\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelDelete = async e => {\n        console.log('TableFormController.onModelDelete', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key of e.deletes) {\n                if (this.grid.getActiveRowKey() === key) {\n                    this.grid.setActiveRowKey(null);\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n\n    onGridSelectionChange = async key => {\n        // console.log('TableFormController.onGridSelectionChange', key);\n        this.invalidate();\n        await this.getPage().rerender();\n    }\n    getActiveRow() {\n        const key = this.grid.getActiveRowKey();\n        if (!key) throw new Error(`${this.model.getFullName()}: no active row key`);\n        return this.model.getDefaultDataSource().getRow(key);\n    }\n    isRowSelected = () => {\n        // console.log('TableFormController.isRowSelected');\n        return !!this.grid && !!this.grid.getActiveRowKey();\n    }\n    onFrameChanged = async value => {\n        // console.log('TableFormController.onFrameChanged', parseInt(value));\n        const frame = parseInt(value);\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n    onNextClick = async () => {\n        console.log('TableFormController.onNextClick');\n        const frame = this.model.getDefaultDataSource().getFrame() + 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n\n    onPreviousClick = async () => {\n        console.log('TableFormController.onPreviousClick');\n        const frame = this.model.getDefaultDataSource().getFrame() - 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        this.rerender();\n    }\n    canPrev() {\n        return this.model.getDefaultDataSource().getFrame() > 1;\n    }\n    canNext() {\n        const ds = this.model.getDefaultDataSource();\n        return ds.getFrame() < ds.getFramesCount();\n    }\n    getSelectedRowKey() {\n        return this.grid ? this.grid.getActiveRowKey() : null;\n    }\n    isActionEnabled(name) {\n        return this.isRowSelected();\n    }\n}\nwindow.QForms.TableFormController = TableFormController;\n","class PageController extends ModelController {\n    constructor(model, parent, id) {\n        //console.log('PageController.constructor', model);\n        super(model, parent);\n        if (!id) throw new Error('no id');\n        this.id = id;\n        this.forms = [];\n    }\n\n    static create(model, parent, id, options) {\n        // console.log('PageController.create', model.getName());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}PageController`);\n        const Class = CustomClass ? CustomClass : PageController;\n        return new Class(model, parent, id, options);\n    }\n\n    init() {\n        for (const form of this.model.forms) {\n            const ctrl = FormController.create(form, this);\n            ctrl.init();\n            this.forms.push(ctrl);\n        }\n    }\n\n    deinit() {\n        console.log('PageController.deinit: ' + this.model.getFullName());\n        for (const form of this.forms) {\n            form.deinit();\n        }\n        super.deinit();\n    }\n\n    onSaveAndCloseClick = async () => {\n        console.log('PageController.onSaveAndCloseClick');\n        this.validate();\n        if (this.isValid()) {\n            try {\n                this.getApp().getView().disableRerender();\n                await this.getModel().update();\n                console.log('page model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n            }\n            await this.getApp().closePage(this);\n            if (this.getModel().getOptions().onClose) {\n                this.getModel().getOptions().onClose();\n            }\n        } else {\n            await this.rerender();\n        }\n    }\n\n    onClosePageClick = async e => {\n        console.log('PageController.onClosePageClick', this.getModel().getFullName());\n        await this.close();\n    }\n\n    onOpenPageClick = async e => {\n        const name = this.getModel().getName();\n        const key = this.getModel().getKey();\n        const link = this.createOpenInNewLink(name, key);\n        // console.log('link', link);\n        window.open(link, '_blank');\n    }\n    createOpenInNewLink(name, key) {\n        return PageController.createLink({\n            page: name,\n            ...DataSource.keyToParams(key)\n        });\n    }\n    async close() {\n        // console.log('PageController.close', this.model.getFullName());\n        const changed = this.isChanged();\n        // console.log('changed:', changed);\n        // const valid = this.isValid();\n        // console.log('valid:', valid);\n        if (this.model.hasRowFormWithDefaultSqlDataSource() && changed) {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure})\n            if (!result) return;\n        }\n        await this.getApp().closePage(this);\n        if (this.getModel().getOptions().onClose) {\n            this.getModel().getOptions().onClose();\n        }\n    }\n    validate() {\n        for (const form of this.forms) {\n            if (form instanceof RowFormController) {\n                form.validate();\n            }\n        }\n    }\n    isValid() {\n        // console.log('PageController.isValid', this.model.getFullName());\n        for (const form of this.forms) {\n            if (!form.isValid()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async onFormChange(e) {\n        // console.log('PageController.onFormChange', this.model.getFullName());\n        this.rerender();\n    }\n    onFormDiscard(formController) {\n        console.log('PageController.onFormDiscard', this.model.getFullName());\n        this.rerender();\n    }\n\n    onFormUpdate(e) {\n        console.log('PageController.onFormUpdate:', this.model.getFullName(), e);\n        this.rerender();\n    }\n\n    onFormInsert(e) {\n        console.log('PageController.onFormInsert:', this.model.getFullName());\n        // console.log('hasNew:', this.model.hasNew());\n        for (const form of this.forms) {\n            form.invalidate();\n        }\n        this.rerender();\n    }\n\n    async openPage(options) {\n        if (!options.params) {\n            options.params = {};\n        }\n        const params =  this.getModel().getParams();\n        for (const name in params) {\n            if (!options.params[name]) {\n                options.params[name] = params[name];\n            }\n        }\n        return await this.getApp().openPage(options);\n    }\n\n    isChanged() {\n        // console.log('PageController.isChanged', this.model.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged()) {\n                // console.log(`FORM CHANGED: ${form.model.getFullName()}`);\n                return true;\n            }\n        }\n        return false;\n    }\n    getApp() {\n        return this.parent;\n    }\n    getViewClass() {\n        return super.getViewClass() || PageView;\n    }\n    static createLink(params = null) {\n        // const query = window.location.search.split('?')[1];\n        // console.log('query:', query);\n        if (params) {\n            return [\n                window.location.pathname,\n                [\n                    // ...(query ? query.split('&') : []),\n                    ...(ApplicationController.isDebugMode() ? ['debug=1'] : []),\n                    ...Object.keys(params).map(name => `${name}=${encodeURI(params[name])}`)\n                ].join('&')\n            ].join('?');\n        }\n        return window.location.pathname;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.model.getName() === name);\n    }\n    async onActionClick(name) {\n        console.log('PageController.onActionClick', name);\n    }\n    onKeyDown = async e => {\n        // console.log('PageController.onKeyDown', this.getModel().getFullName(), e);\n        if (e.key === 'Escape') {\n            if (this.isModal()) {\n                await this.close();\n            }\n        }\n    }\n    getTitle() {\n        const model = this.getModel();\n        const key = model.getKey();\n        let keyPart;\n        if (key) {\n            const arr = JSON.parse(key);\n            if (arr.length === 1 && typeof arr[0] === 'number') {\n                keyPart = `#${arr[0]}`;\n            } else {\n                keyPart = `${key}`;\n            }\n        }\n        return [\n            model.getCaption(),\n            ...(ApplicationController.isDebugMode() ? [`(${this.getId()})`] : []),\n            ...(keyPart ? [keyPart] : [])\n        ].join(' ');\n    }\n    getSelectedRowKey() {\n        for (const form of this.forms) {\n            const selectedRowKey = form.getSelectedRowKey();\n            if (selectedRowKey) return selectedRowKey;\n        }\n        return null;\n    }\n    onSelectClick = async e => {\n        console.log('PageController.onSelectClick');\n        await this.selectRow(this.getSelectedRowKey());\n    }\n    onResetClick = async e => {\n        console.log('PageController.onResetClick');\n        await this.selectRow(null);\n    }\n    async selectRow(key) {\n        console.log('PageController.selectRow', key);\n        await this.close();\n        await this.getModel().getOptions().onSelect(key);\n    }\n    invalidate() {\n        this.forms.forEach(form => form.invalidate());\n    }\n    getId() {\n        return this.id;\n    }\n    isModal() {\n        return this.getModel().isModal();\n    }\n    isAutoFocus() {\n        for (const form of this.forms) {\n            if (form.isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nwindow.QForms.PageController = PageController;\n","class Model extends EventEmitter {\n    constructor(data, parent) {\n        if (!data.name) throw new Error(`${data.class} no name`);\n        super();\n        this.data     = data;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.getFullName()}: model already deinited`);\n        this.deinited = true;\n    }\n    static getAttr(data, name) {\n        return data[name];\n    }\n    static getCol(data, name) {\n        return data[name];\n    }\n    static getName(data) {\n        return Model.getAttr(data, 'name');\n    }\n    static getClassName(data) {\n        return Model.getAttr(data, 'class');\n    }\n    isAttr(name) {\n        // return this.data[name] !== undefined;\n        return this.data.hasOwnProperty(name);\n    }\n    getAttr(name) {\n        return this.data[name];\n    }\n    getCol(name) {\n        return this.data[name];\n    }\n    getClassName() {\n        return this.getAttr('class');\n    }\n    getName() {\n        return this.getAttr('name');\n    }\n    getFullName() {\n        if (this.parent) {\n            return `${this.parent.getFullName()}.${this.getName()}`;\n        }\n        return this.getName();\n    }\n    getCaption() {\n        return this.getAttr('caption');\n    }\n    getDataSource(name) {\n        return this.dataSources.find(dataSource => dataSource.getName() === name);\n    }\n    createDataSources() {\n        for (const data of this.data.dataSources) {\n            try {\n                const Class = FrontHostApp.getClassByName(data.class);\n                const dataSource = new Class(data, this);\n                dataSource.init();\n                this.dataSources.push(dataSource);\n            } catch (err) {\n                err.message = `${this.getFullName()}.${data.name}: ${err.message}`;\n                throw err;\n            }\n        }\n    }\n    deinitDataSources() {\n        for (const dataSource of this.dataSources) {\n            dataSource.deinit();\n        }\n    }\n    hasActions() {\n        return this.data.actions.length > 0;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getData() {\n        return this.data;\n    }\n}\nwindow.QForms.Model = Model;\n","class Application extends Model {\n    constructor(data) {\n        super(data);\n        this.databases   = [];\n        this.dataSources = [];\n    }\n\n    init() {\n        // console.log('Application.init');\n        if (!this.data.theme) throw new Error('no theme attr');\n\n        // databases\n        for (const data of this.data.databases) {\n            const database = new Database(data, this);\n            database.init();\n            this.addDatabase(database);\n        }\n\n        // data sources\n        this.createDataSources();\n    }\n\n    deinit() {\n        this.deinitDataSources();\n        // TODO: add deinit on opened pages\n        super.deinit();\n    }\n\n    addDatabase(database) {\n        this.databases.push(database);\n    }\n\n    async logout() {\n        const data = await this.request({\n            'action': 'logout'\n        });\n        this.emit('logout', {source: this});\n    }\n\n    async request(options) {\n        // console.warn('Application.request', data);\n        const start = Date.now();\n        const [headers, body] = await FrontHostApp.doHttpRequest2(options);\n        if (!headers['qforms-platform-version']) throw new Error('no qforms-platform-version header');\n        if (!headers['qforms-app-version']) throw new Error('no qforms-app-version header');\n        this.emit('request', {\n            time: Date.now() - start,\n            remotePlatformVersion: headers['qforms-platform-version'],\n            remoteAppVersion: headers['qforms-app-version']\n        });\n        return body;\n    }\n\n    getDatabase(name) {\n        // console.log('Application.getDatabase', name);\n        const database = this.databases.find(database => database.getName() === name);\n        if (!database) throw new Error(`no database: ${name}`);\n        return database;\n    }\n\n    getText() {\n        return this.data.text;\n    }\n    getUser() {\n        return this.data.user;\n    }\n    getDomain() {\n        return this.data.domain;\n    }\n    getVirtualPath() {\n        return this.data.virtualPath;\n    }\n    async rpc(name, params) {\n        console.log('Application.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.request({\n            uuid  : this.getAttr('uuid'),\n            action: 'rpc',\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    emitResult(result, source = null) {\n        console.log('Application.emitResult', result, source);\n        const promises = [];\n        for (const database in result) {\n            promises.push(...this.getDatabase(database).emitResult(result[database], source));\n        }\n        // console.log('promises:', promises);\n        return Promise.allSettled(promises);\n    }\n    getNodeEnv() {\n        return this.data.nodeEnv;\n    }\n}\nwindow.QForms.Application = Application;\n","class Column  extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        if (!this.getAttr('type')) throw new Error(`column ${this.getFullName()}: no type`);\n        if (!['string', 'number', 'boolean', 'object', 'date'].includes(this.getAttr('type'))) {\n            throw new Error(`${this.getFullName()}: wrong column type: ${this.getAttr('type')}`);\n        }\n    }\n    init() {\n        // console.log('Column.init', this.getFullName());\n    }\n    getType() {\n        return this.getAttr('type');\n    }\n}\nwindow.QForms.Column = Column;\n","class DataSource extends Model {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.rows      = null;\n        this.rowsByKey = null;\t\t\t\t\t\t// for row search by key\n        this.news      = [];                        // new rows\n        this.changes   = new Map();\n    }\n\n    init() {\n        // console.log('DataSource.init', this.getFullName(), this.getClassName());\n        this.setRows(this.data.rows);\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.on('insert' , this.onTableInsert);\n            table.on('update' , this.onTableUpdate);\n            table.on('delete' , this.onTableDelete);\n            table.on('refresh', this.onTableRefresh);\n        }\n    }\n\n    deinit() {\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.off('insert' , this.onTableInsert);\n            table.off('update' , this.onTableUpdate);\n            table.off('delete' , this.onTableDelete);\n            table.off('refresh', this.onTableRefresh);\n        }\n        super.deinit();\n    }\n\n    setRows(rows) {\n        this.rows = rows;\n        this.fillRowsByKey();\n    }\n\n    addRow(row) {\n        this.rows.push(row);\n        const key = this.getRowKey(row);\n        this.rowsByKey[key] = row;\n    }\n\n    addRows(rows) {\n        for (let i = 0; i < rows.length; i++) {\n            this.rows.push(rows[i]);\n        }\n        this.fillRowsByKey();\n    }\n\n    getRowsLength() {\n        return this.rows.length;\n    }\n\n    fillRowsByKey() {\n        // console.log('DataSource.fillRowsByKey', this.getFullName())\n        this.rowsByKey = {};\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            const key = this.getRowKey(row);\n            this.rowsByKey[key] = row;\n        }\n        // console.log('this.rowsByKey:', this.getFullName(), this.rowsByKey);\n    }\n\n    // deinit() {\n    //     console.log('DataSource.deinit', this.getFullName());\n    //     super.deinit();\n    // }\n\n    getType(column) {\n        // console.log('DataSource.getType', this.getClassName(), column);\n        throw new Error('DataSource column type not implemented');\n    }\n\n    discardRowColumn(row, column) {\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            delete this.changes.get(row)[column];\n        }\n    }\n\n    changeRowColumn(row, column, newValue) {\n        if (!this.changes.has(row)) this.changes.set(row, {});\n        this.changes.get(row)[column] = newValue;\n    }\n\n    setValue(row, column, value) {\n        // console.log('DataSource.setValue', this.getFullName(), column, value, typeof value);\n        if (value === undefined) throw new Error(`${this.getFullName()}: undefined is wrong value for data source`);\n        if (typeof value === 'object' && value !== null) {\n            throw new Error(`setValue: ${this.getFullName()}.${column}: object must be in JSON format`);\n        }\n        if (row[column] !== value) {\n            this.changeRowColumn(row, column, value);\n            if (row[column] === undefined && value === null) {  // workaround for new rows\n                this.discardRowColumn(row, column);\n            }\n        } else {\n            this.discardRowColumn(row, column);\n        }\n        if (this.changes.has(row) && !Object.keys(this.changes.get(row)).length) this.changes.delete(row);\n        // console.log('changes:', this.changes);\n    }\n\n    isChanged() {\n        // console.log('DataSource.isChanged', this.getFullName(), this.changes.size);\n        return !!this.changes.size;\n    }\n\n    hasNew() {\n        return !!this.news.length;\n    }\n\n    isRowColumnChanged(row, column) {\n        // console.log('DataSource.isRowColumnChanged', this.getFullName());\n        return row[column] !== this.getValue(row, column);\n    }\n\n    getValue(row, column) {\n        // console.log('DataSource.getValue', column);\n        let value;\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            value = this.changes.get(row)[column];\n        } else {\n            value = row[column];\n        }\n        if (value !== undefined && typeof value !== 'string') {\n            throw new Error(`getValue: ${this.getFullName()}.${column}: object must be in JSON format, value: ${value}`);\n        }\n        // console.log('DataSource.getValue:', value);\n        return value;\n    }\n\n    getKeyValues(row) {\n        return this.data.keyColumns.reduce((key, column) => {\n            key[column] = JSON.parse(row[column]);\n            return key;\n        }, {});\n    }\n\n    getRowKey(row) {\n        // console.log('DataSource.getRowKey', row);\n        const arr = [];\n        for (const column of this.data.keyColumns) {\n            if (row[column] === undefined) return null;\n            if (row[column] === null) throw new Error('wrong value null for data source value');\n            try {\n                const value = JSON.parse(row[column]);\n                arr.push(value);\n            } catch (err) {\n                console.log('getRowKey: cannot parse: ', row[column]);\n                throw err;\n            }\n        }\n        return JSON.stringify(arr);\n    }\n\n    removeRow(key) {\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key} to remove`);\n        const i = this.rows.indexOf(row);\n        if (i === -1) throw new Error(`${this.getFullName()}: no row with i ${i} to remove`);\n        this.rows.splice(i, 1);\n        delete this.rowsByKey[key];\n    }\n\n    newRow(row) {\n        console.log('DataSource.newRow', this.getFullName(), row);\n        if (this.rows.length > 0) {\n            throw new Error('rows can be added to empty data sources only in new mode');\n        }\n        this.news.push(row);\n    }\n\n    getSingleRow(withChanges = false) {\n        if (this.news[0]) return this.news[0];\n        const row = this.rows[0];\n        if (!row) throw new Error('no single row');\n        if (withChanges) return this.getRowWithChanges(row);\n        return row;\n    }\n\n    getForm() {\n        return this.parent instanceof Form ? this.parent : null;\n    }\n\n    getPage() {\n        if (this.parent instanceof Page) return this.parent;\n        if (this.parent instanceof Form) return this.parent.getPage();\n        return null;\n    }\n\n    getApp() {\n        if (this.parent instanceof Application) return this.parent;\n        return this.parent.getApp();\n    }\n\n    /*getNamespace() {\n        if (this.parent instanceof Form) {\n            return this.parent.getPage().getName() + '.' + this.parent.getName() + '.' + this.getName();\n        }\n        if (this.parent instanceof Page) {\n            return this.parent.getName() + '.' + this.getName();\n        }\n        return this.getName();\n    }*/\n\n    getRow(key) {\n        return this.rowsByKey[key] || null;\n    }\n\n    /*getRowByKey(key) {\n        return this.rowsByKey[key] || null;\n    }*/\n\n    getRows() {\n        return this.rows;\n    }\n\n    getRowByIndex(i) {\n        return this.rows[i];\n    }\n\n    discard() {\n        console.log('DataSource.discard', this.getFullName());\n        if (!this.isChanged()) throw new Error(`no changes in data source ${this.getFullName()}`);\n        this.changes.clear();\n    }\n\n    static keyToParams(key, paramName = 'key') {\n        if (typeof key !== 'string') throw new Error('key not string');\n        const params = {};\n        const arr = JSON.parse(key);\n        if (arr.length === 1) {\n            params[paramName] = arr[0];\n        } else  if (arr.length > 1) {\n            for (let i = 0; i < arr.length; i++) {\n                params[`${paramName}${i + 1}`] = arr[i];\n            }\n        } else {\n            throw new Error(`invalid key: ${key}`);\n        }\n        return params;\n    }\n\n    getChangesByKey() {\n        const changes = {};\n        for (const row of this.changes.keys()) {\n            changes[this.getRowKey(row)] = this.changes.get(row);\n        }\n        return changes;\n    }\n\n    getRowWithChanges(row) {\n        if (this.changes.has(row)) {\n            return {...row, ...this.changes.get(row)};\n        }\n        return row;\n    }\n\n    hasNewRows() {\n        return this.news.length > 0;\n    }\n\n    static copyNewValues(row, newValues) {\n        for (const name in newValues) {\n            row[name] = newValues[name];\n        }\n    }\n\n    updateRow(key, newValues) {\n        console.log('DataSource.updateRow', this.getFullName(), key, newValues);\n        if (!key) throw new Error('no key');\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key}`);\n        const newKey = this.getRowKey(newValues);\n        DataSource.copyNewValues(row, newValues);// copy new values to original row object\n        if (key !== newKey) {\n            delete this.rowsByKey[key];\n            this.rowsByKey[newKey] = row;\n        }\n        // console.log(`key: ${key} to ${newKey}`);\n        // console.log('this.rowsByKey:', this.rowsByKey);\n        // console.log('this.data.rows:', this.data.rows);\n    }\n\n    getTable() {\n        if (!this.getAttr('table')) throw new Error(`${this.getFullName()}: table attr empty`);\n        return this.getDatabase().getTable(this.getAttr('table'));\n    }\n\n    getDatabase() {\n        // console.log('DataSource.getDatabase', this.getFullName(), this.getAttr('database'));\n        if (!this.getAttr('database')) throw new Error(`${this.getFullName()}: database attr empty`);\n        return this.getApp().getDatabase(this.getAttr('database'));\n    }\n\n    getType(columnName) {\n        // console.log('DataSource.getType', columnName);\n        const type = this.getTable().getColumn(columnName).getType();\n        // console.log('type:', type);\n        return type;\n    }\n\n    async insert() {\n        console.log('DataSource.insert', this.news);\n        if (!this.news.length) throw new Error('no new rows to insert');\n        const inserts = [];\n        for (const row of this.news) {\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            DataSource.copyNewValues(row, newValues);\n            // console.log('row:', row);\n            const key = this.getRowKey(row);\n            if (!key) throw new Error('invalid insert row, no key');\n            // console.log('key:', key);\n            inserts.push(key);\n        }\n        this.changes.clear();\n        for (const row of this.news) {\n            this.addRow(row);\n        }\n        this.news = [];\n        console.log('rows:', this.getRows());\n        console.log('inserts:', inserts);\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert({source: this, inserts});\n        }\n        this.emit('insert', {source: this, inserts});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {insert: inserts}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async delete(key) {\n        console.log('DataSource.delete', key);\n        if (!key) throw new Error('no key');\n        this.removeRow(key);\n\n        // events\n        const deletes = [key];\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete({source: this, deletes});\n        }\n        this.emit('delete', {source: this, deletes});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {delete: deletes}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async update() {\n        console.log('DataSource.update', this.getFullName());\n        if (this.news.length) {\n            await this.insert();\n            return;\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n        const changes = this.getChangesByKey();\n        // console.log('changes:', changes);\n\n        // apply changes to rows\n        const updates = {};\n        for (const key in changes) {\n            // console.log('key:', key);\n            const row = this.getRow(key);\n            // console.log('row:', row);\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            const newKey = this.getRowKey(newValues);\n            // console.log('newKey:', newKey);\n            this.updateRow(key, newValues);\n            updates[key] = newKey;\n        }\n        this.changes.clear();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate({source: this, updates});\n        }\n        this.emit('update', {source: this, updates});\n\n        const database = this.getAttr('database');\n        const table    = this.getAttr('table');\n        if (database && table) {\n            const reuslt = {[database]: {\n                    [table]: {\n                        update: updates\n                    }\n                }};\n            await this.getApp().emitResult(reuslt, this);\n            return reuslt;\n        }\n        return null;\n    }\n\n    onTableInsert = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableInsert', this.getFullName(), e);\n        if (!e.inserts.length) throw new Error(`${this.getFullName()}: no inserts`);\n\n        for (const key of e.inserts) {\n            if (this.getRow(key)) {\n                console.log('rows:', this.rows);\n                console.log('rowsByKey:', this.rowsByKey);\n                throw new Error(`${this.getFullName()}: row already in this data source: ${key}`);\n            }\n            const newValues = e.source.getRow(key);\n            const newRow = {};\n            DataSource.copyNewValues(newRow, newValues);\n            // console.log('newRow:', newRow);\n            this.addRow(newRow);\n        }\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableUpdate = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableUpdate', this.getFullName(), e);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n        for (const key in e.updates) {\n            if (this.getRow(key)) {\n                const newKey = e.updates[key];\n                const sourceRow = e.source.getRow(newKey);\n                this.updateRow(key, sourceRow);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableDelete = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableDelete', this.getFullName(), e);\n        if (!e.deletes.length) throw new Error(`${this.getFullName()}: no deletes`);\n        for (const key of e.deletes) {\n            if (this.getRow(key)) {\n                this.removeRow(key);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        throw new Error('DataSource.onTableRefresh: not implemented');\n    }\n\n    isSurrogate() {\n        return this.isAttr('database');\n    }\n\n    moveRow(row, offset) {\n        console.log('DataSource.moveRow');\n        Helper.moveArrItem(this.rows, row, offset);\n\n        // refresh event\n        const event = {source: this};\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh(event);\n        }\n        this.emit('refresh', event);\n    }\n\n}\nwindow.QForms.DataSource = DataSource;\n","class SqlDataSource extends DataSource {\n    constructor(data, parent) {\n        super(data, parent);\n        this.frame  = 1;\n        this.count  = data.count !== undefined ? data.count : null;\n        this.lastFrame = 1;\n    }\n\n    /*init() {\n        super.init();\n    }*/\n\n    /*deinit() {\n        super.deinit();\n    }*/\n\n    async insert(row) {\n        console.log('SqlDataSource.insert', row);\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to insert');\n\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: 'insert',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            row   : this.getRowWithChanges(row),\n        });\n\n        // key & values\n        const [key] = Object.keys(result[database][table].insertEx);\n        if (!key) throw new Error('no inserted row key');\n        const values = result[database][table].insertEx[key];\n        for (const column in values) {\n            row[column] = values[column];\n        }\n        // console.log('key:', key);\n        // console.log('row:', row);\n\n        // clear news & changes\n        this.news.splice(this.news.indexOf(row), 1);\n        // console.log('this.news:', this.news);\n        this.changes.clear();\n\n        // add new row to rows\n        this.addRow(row);\n\n        // events\n        const event = {source : this, inserts: result[database][table].insert};\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(event);\n        }\n        this.emit('insert', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    async update() {\n        console.log('SqlDataSource.update', this.getFullName());\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to update');\n        if (this.news[0]) {\n            return await this.insert(this.news[0]);\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n\n        // specific to SqlDataSource\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action : 'update',\n            page   : this.getForm().getPage().getName(),\n            form   : this.getForm().getName(),\n            changes: this.getChangesByKey(),\n        });\n\n\n        const [key] = Object.keys(result[database][table].updateEx);\n        if (!key) throw new Error('no updated row');\n        const newValues = result[database][table].updateEx[key];\n        // const newKey = this.getRowKey(newValues);\n\n        this.changes.clear();\n        this.updateRow(key, newValues);\n\n        // events\n        const event = {source: this, updates: result[database][table].update};\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(event);\n        }\n        this.emit('update', event);\n        await this.getApp().emitResult(result, this);\n        return result;\n    }\n\n    async delete(key) {\n        console.log('SqlDataSource.delete:', this.getFullName(), key);\n        if (!key) throw new Error('no key');\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (!table) {\n            throw new Error(`no table in SqlDataSource: ${this.getFullName()}`);\n        }\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: '_delete',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            params: {key},\n        });\n        await this.refill();\n\n        // events\n        const event = {source: this, deletes: result[database][table].delete};\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(event);\n        }\n        this.emit('delete', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    onTableUpdate = async e => {\n        console.log('SqlDataSource.onTableUpdate', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        // console.log('updates:', e.updates);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableInsert = async (e) => {\n        console.log('SqlDataSource.onTableInsert', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableInsert`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableDelete = async (e) => {\n        console.log('SqlDataSource.onTableDelete', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self delete', this.getFullName());\n            return;\n        }\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        console.log('SqlDataSource.onTableRefresh', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source) throw new Error('refresh is foreign result so source must be null');\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('refresh', e);\n    }\n\n    getPageParams() {\n        const page = this.getPage();\n        return page ? page.getParams() : {};\n    }\n\n    async refresh() {\n        console.log('SqlDataSource.refresh', this.getFullName());\n        await this.refill();\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh({source: this});\n        }\n    }\n\n    async refill() {\n        if (this.isChanged()) throw new Error(`cannot refill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame : this.frame} : {});\n        this.count = data.count;\n        this.setRows(data.rows);\n        this.lastFrame = 1;\n    }\n\n    async fill(frame) {\n        if (this.isChanged()) throw new Error(`cannot fill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame} : {});\n        this.count = data.count;\n        this.addRows(data.rows);\n    }\n\n    async more() {\n        if (!this.hasMore()) throw new Error(`${this.getFullName()}: no more rows`);\n        this.lastFrame++;\n        await this.fill(this.lastFrame);\n    }\n\n    async select(params = {}) {\n        console.log('SqlDataSource.select', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action        : 'select',\n            page          : page ? page.getName()           : null,\n            form          : form ? form.getName()           : null,\n            ds            : this.getName(),\n            params        : {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!(data.rows instanceof Array)) throw new Error('rows must be array');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }\n\n    /*async selectSingle(params = {}) {\n        console.log('SqlDataSource.selectSingle', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action: 'selectSingle',\n            page  : page ? page.getName()           : null,\n            form  : form ? form.getName()           : null,\n            ds    : this.getName(),\n            params: {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!data.row) throw new Error('selectSingle must return row');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }*/\n\n    getFramesCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        if (this.count === 0) return 1;\n        if (this.getLimit()) return Math.ceil(this.count / this.getLimit());\n        return 1;\n    }\n    getLimit() {\n        if (this.getAttr('limit')) return parseInt(this.getAttr('limit'));\n        return null;\n    }\n    getCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        return this.count;\n    }\n    getFrame() {\n        return this.frame;\n    }\n    getLastFrame() {\n        return this.lastFrame;\n    }\n    setFrame(frame) {\n        this.frame = frame;\n    }\n    hasMore() {\n        return this.lastFrame < this.getFramesCount();\n    }\n}\nwindow.QForms.SqlDataSource = SqlDataSource;\n","class Database extends Model {\n    constructor(...args) {\n        super(...args);\n        this.tables = [];\n    }\n\n    init() {\n        // console.log('Database.init', this.getName());\n        for (const data of this.data.tables) {\n            const table = new Table(data, this);\n            table.init();\n            this.addTable(table);\n        }\n    }\n\n    addTable(table) {\n        this.tables.push(table);\n    }\n\n    getTable(name) {\n        const table = this.tables.find(table => table.getName() === name);\n        if (!table) throw new Error(`${this.getFullName()}: no table with name: ${name}`);\n        return table;\n    }\n\n    emitResult(result, source = null) {\n        console.log('Database.emitResult');\n        const promises = [];\n        for (const table in result) {\n            promises.push(...this.getTable(table).emitResult(result[table], source));\n        }\n        return promises;\n    }\n}\nwindow.QForms.Database = Database;\n","class Field extends Model {\n    // constructor(data, parent) {\n    //     super(data, parent);\n    // }\n\n    init() {\n    }\n\n    replaceThis(value) {\n        return value.replace(/\\{([@\\w\\.]+)\\}/g, (text, name) => {\n            if (name.indexOf('.') === -1) return text;\n            let arr = name.split('.');\n            if (arr[0] === 'this') arr[0] = this.getPage().getName();\n            return `{${arr.join('.')}}`;\n        });\n    }\n\n    fillDefaultValue(row) {\n        // console.log('Field.fillDefaultValue', this.getFullName());\n        const column = this.getAttr('column');\n        if (!column) return;\n        const defaultValue = this.replaceThis(this.getAttr('defaultValue'));\n        const js = Helper.templateToJsString(defaultValue, this.getPage().getParams());\n        if (typeof js !== 'string') throw new Error(`${this.getFullName()}: defaultValue must be templated to js string`);\n        // console.log('js', this.getFullName(), js);\n        try {\n            const value = eval(js);\n            if (value !== undefined) {\n                row[column] = this.valueToRaw(value);\n            }\n        } catch (err) {\n            throw new Error(`[${this.getFullName()}] fillDefaultValue: ${err.toString()}`);\n        }\n    }\n\n    valueToPageParams(row) {\n        // console.log('Field.valueToPageParams', this.getFullName());\n        if (this.isParam()) {\n            this.getPage().addParam(this.getFullName(), this.getValue(row));\n        }\n    }\n\n    isChanged(row) {\n        // console.log('Field.isChanged', this.getFullName());\n        if (!this.getAttr('column')) throw new Error(`${this.getFullName()}: field has no column`);\n        return this.getDefaultDataSource().isRowColumnChanged(row, this.getAttr('column'));\n    }\n\n    hasColumn() {\n        return !!this.getAttr('column');\n    }\n\n    getValue(row) {\n        // console.log('Field.getValue', this.getFullName());\n        if (!row && this.parent instanceof RowForm) {\n            row = this.parent.getRow();\n        }\n        if (!row) {\n            console.log(`${this.getFullName()}: need row`);\n        }\n        let rawValue;\n        if (this.getAttr('column')) {\n            rawValue = this.getRawValue(row);\n        } else if (this.getAttr('value')) {\n            const js = this.getAttr('value');\n            try {\n                rawValue = eval(js);\n            } catch (err) {\n                throw new Error(`${this.getFullName()}: value eval error: ${err.message}`);\n            }\n        } else {\n            throw new Error(`${this.getFullName()}: no column and no value in field`);\n        }\n\n        // use rawValue\n        if (rawValue === undefined) return undefined;\n        if (rawValue === null) throw new Error(`[${this.getFullName()}]: null is wrong raw value`);\n        try {\n            return this.rawToValue(rawValue);\n        } catch (err) {\n            console.log('raw value decode error:', this.getFullName(), rawValue);\n            throw err;\n        }\n    }\n\n    setValue(row, value) {\n        // console.log('Field.setValue', this.getFullName(), value);\n        if (!this.getAttr('column')) throw new Error(`field has no column: ${this.getFullName()}`);\n        const rawValue = this.valueToRaw(value);\n        this.getForm().getDefaultDataSource().setValue(row, this.getAttr('column'), rawValue);\n        this.valueToPageParams(row);\n    }\n\n    rawToValue(rawValue) {\n        return Helper.decodeValue(rawValue);\n    }\n\n    valueToRaw(value) {\n        return Helper.encodeValue(value);\n    }\n\n    getRawValue(row) {\n        if (!this.hasColumn()) throw new Error(`${this.getFullName()}: no column`);\n        return this.getForm().getDefaultDataSource().getValue(row, this.getAttr('column'));\n    }\n\n    getDefaultDataSource() {\n        return this.getForm().getDefaultDataSource();\n    }\n\n    getType() {\n        if (this.getAttr('type')) {\n            return this.getAttr('type');\n        }\n        if (this.getAttr('column')) {\n            const dataSource = this.getDefaultDataSource();\n            if (dataSource.isSurrogate()) {\n                return dataSource.getType(this.getAttr('column'));\n            }\n            throw new Error('field type empty');\n        }\n        throw new Error('field type and column empty');\n    }\n\n    getForm() {\n        return this.parent;\n    }\n\n    getPage() {\n        return this.parent.parent;\n    }\n\n    getApp() {\n        return this.parent.parent.parent;\n    }\n\n    isReadOnly() {\n        return this.data.readOnly === 'true';\n    }\n    isNotNull() {\n        return this.data.notNull === 'true';\n    }\n    isNullable() {\n        return this.data.notNull === 'false';\n    }\n    getWidth() {\n        const width = parseInt(this.data.width);\n        if (isNaN(width)) return null;\n        if (width === 0) return 100;\n        return width;\n    }\n    getFullName() {\n        return `${this.getPage().getName()}.${this.getForm().getName()}.${this.getName()}`;\n    }\n    isParam() {\n        return this.data.param === 'true';\n    }\n    validateOnChange() {\n        if (this.data.validateOnChange !== undefined) {\n            return this.data.validateOnChange === 'true';\n        }\n        return true;\n    }\n    validateOnBlur() {\n        if (this.data.validateOnBlur !== undefined) {\n            return this.data.validateOnBlur === 'true';\n        }\n        return false;\n    }\n    getCaption() {\n        const caption = this.getAttr('caption');\n        if (caption === '') {\n            const columnName = this.getAttr('column');\n            if (columnName && this.parent.hasDefaultSqlDataSource()) {\n                const ds = this.parent.getDataSource('default');\n                if (ds.getAttr('table')) {\n                    const column = ds.getTable().getColumn(columnName);\n                    return column.getCaption();\n                }\n            }\n        }\n        return caption;\n    }\n}\nwindow.QForms.Field = Field;\n","class CheckBoxField extends Field {\n\n}\nwindow.QForms.CheckBoxField = CheckBoxField;\n","class ComboBoxField extends Field {\n\n    getDisplayValue(row) {\n        let value = null;\n        if (row[this.data.displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[this.data.displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[this.data.displayColumn]);\n                throw err;\n            }\n        } else {\n            value = this.data.displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        if (!row[this.data.valueColumn]) {\n            throw new Error('no valueColumn in ComboBox data source');\n        }\n        return Helper.decodeValue(row[this.data.valueColumn]);\n    }\n\n    getComboBoxDataSource() {\n        const name = this.data.dataSourceName;\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        }\n        if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        }\n        if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        throw new Error(`${this.getFullName()}: no data source: ${name}`);\n    }\n\n    findRowByRawValue(rawValue) {\n        return this.getComboBoxDataSource().getRows().find(row => row[this.data.valueColumn] === rawValue);\n    }\n}\nwindow.QForms.ComboBoxField = ComboBoxField;\n","class DateField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n\n    rawToValue(raw) {\n        // console.log('DateField.rawToValue', this.getFullName(), raw);\n        const value = Helper.decodeValue(raw);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addMinutes(value, value.getTimezoneOffset());\n        }\n        // console.log('DateField.rawToValue:', raw, value);\n        return value;\n    }\n\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = new Date(value.getTime());\n            Helper.addMinutes(v, -v.getTimezoneOffset());\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateField = DateField;\n","class DateTimeField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n    rawToValue(rawValue) {\n        const value = Helper.decodeValue(rawValue);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addMinutes(value, value.getTimezoneOffset());\n        }\n        // console.log('DateTimeField.rawToValue:', value);\n        return value;\n    }\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = new Date(value.getTime());\n            Helper.addMinutes(v, -v.getTimezoneOffset());\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateTimeField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateTimeField = DateTimeField;\n","class FileField extends Field {\n}\nwindow.QForms.FileField = FileField;\n","class ImageField extends Field {\n}\nwindow.QForms.ImageField = ImageField;\n","class LabelField extends Field {\n}\nwindow.QForms.LabelField = LabelField;\n","class LinkField extends Field {\n}\nwindow.QForms.LinkField = LinkField;\n","class PasswordField extends Field {\n\n}\nwindow.QForms.PasswordField = PasswordField;\n","class PhoneField extends Field {\n}\nwindow.QForms.PhoneField = PhoneField;\n","class TextAreaField extends Field {\n    getRows() {\n        return this.data.rows;\n    }\n    getCols() {\n        return this.data.cols;\n    }\n}\nwindow.QForms.TextAreaField = TextAreaField;\n","class TextBoxField extends Field {\n\n}\nwindow.QForms.TextBoxField = TextBoxField;\n","class TimeField extends Field {\n\n}\nwindow.QForms.TimeField = TimeField;\n","class Form extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.dataSources = [];\n        this.fields      = [];\n    }\n\n    init() {\n        // data sources\n        this.createDataSources();\n\n        // fields\n        for (const data of this.data.fields) {\n            const Class = FrontHostApp.getClassByName(data.class);\n            const field = new Class(data, this);\n            field.init();\n            this.fields.push(field);\n        }\n    }\n\n    deinit() {\n        // console.log('Form.deinit:', this.getFullName());\n        this.deinitDataSources();\n        for (const field of this.fields) {\n            field.deinit();\n        }\n        super.deinit();\n    }\n\n    fillDefaultValues(row) {\n        for (const field of this.fields) {\n            field.fillDefaultValue(row);\n        }\n    }\n\n    onDataSourceRefresh(e) {\n        // console.log('Form.onDataSourceRefresh', this.getFullName());\n        this.emit('refresh', e);\n    }\n\n    onDataSourceInsert(e) {\n        // console.log('Form.onDataSourceInsert', this.getFullName());\n        this.parent.onFormInsert(e);\n        this.emit('insert', e);\n    }\n\n    onDataSourceUpdate(e) {\n        // console.log('Form.onDataSourceUpdate', this.getFullName());\n        this.emit('update', e);\n    }\n\n    onDataSourceDelete(e) {\n        // console.log('Form.onDataSourceDelete', this.getFullName());\n        this.emit('delete', e);\n    }\n\n    async update() {\n        console.log('Form.update', this.getFullName(), this.isChanged());\n        if (this.getPage().deinited) throw new Error('page already deinited');\n        if (!this.isChanged() && !this.getDefaultDataSource().hasNewRows()) throw new Error(`form model not changed or does not have new rows: ${this.getFullName()}`);\n        await this.getDefaultDataSource().update();\n    }\n\n    isChanged() {\n        // console.log('Form.isChanged', this.getFullName());\n        return this.getDefaultDataSource().isChanged();\n    }\n\n    hasNew() {\n        // console.log('Form.hasNew', this.getFullName());\n        return this.getDefaultDataSource().hasNew();\n    }\n\n    async rpc(name, params) {\n        console.log('Form.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getPage().getName(),\n            form  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n\n    getKey() {\n        return null;\n    }\n\n    getDefaultDataSource() {\n        const dataSource = this.getDataSource('default');\n        if (!dataSource) throw new Error(`${this.getFullName()}: no default data source`);\n        return dataSource;\n    }\n\n    getPage() {\n        return this.parent;\n    }\n\n    getApp() {\n        return this.parent.parent;\n    }\n    async refresh() {\n        await this.getDefaultDataSource().refresh();\n    }\n    getField(name) {\n        return this.fields.find(field => field.getName() === name);\n    }\n    hasDefaultSqlDataSource() {\n        return this.getDefaultDataSource().getClassName() === 'SqlDataSource';\n    }\n    decodeRow(row) {\n        const values = {};\n        for (const field of this.fields) {\n            const column = field.getAttr('column');\n            if (column) {\n                values[column] = field.getValue(row);\n            }\n        }\n        return values;\n    }\n}\nwindow.QForms.Form = Form;\n","class RowForm extends Form {\n    init() {\n        super.init();\n        if (this.isNewMode()) {\n            this.getDefaultDataSource().newRow(this.createRow());\n        }\n        this.fillParams(this.getRow()); // dump row values to page params\n    }\n\n    isNewMode() {\n        const newMode = this.getAttr('newMode');\n        if (newMode ===  'true') return  true;\n        if (newMode === 'false') return false;\n        return this.getPage().isNewMode();\n    }\n\n    fillParams(row) {\n        for (const field of this.fields) {\n            field.valueToPageParams(row);\n        }\n    }\n\n    onDataSourceUpdate(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceUpdate(e);\n    }\n\n    onDataSourceInsert(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceInsert(e);\n    }\n\n    getRow(withChanges) {\n        return this.getDefaultDataSource().getSingleRow(withChanges);\n    }\n\n    getKey() {\n        // console.log('RowForm.getKey', this.getFullName());\n        const dataSource = this.getDefaultDataSource();\n        if (dataSource.getClassName() === 'SqlDataSource') {\n            const row = this.getRow();\n            return dataSource.getRowKey(row);\n        }\n        return null;\n    }\n\n    createRow() {\n        const row = {};\n        this.fillDefaultValues(row);\n        return row;\n    }\n\n    discard(fields) {\n        console.log('RowForm.discard', fields);\n        if (this.getDefaultDataSource().isChanged()) {\n            this.getDefaultDataSource().discard();\n            fields.forEach(name => {\n                this.getField(name).valueToPageParams(this.getRow())\n            });\n        }\n    }\n\n}\nwindow.QForms.RowForm = RowForm;\n","class TableForm extends Form {\n\n}\nwindow.QForms.TableForm = TableForm;\n","class Page extends Model {\n    constructor(data, parent, options) {\n        // console.log('Page.constructor', options);\n        // if (!options.id) throw new Error('no page id');\n        super(data, parent);\n        this.options     = options; // {id, modal, newMode, selectMode, params}\n        this.dataSources = [];\n        this.forms       = [];\n        this.params      = {};\n        if (options.onCreate) {\n            options.onCreate(this);\n        }\n    }\n\n    init() {\n        this.createDataSources();\n        this.createForms();\n        console.log('page options:', this.options);\n        console.log('page params:', this.getParams());\n    }\n\n    deinit() {\n        // console.log('Page.deinit', this.getFullName());\n        if (this.deinited) throw new Error(`page ${this.getFullName()} is already deinited`);\n        this.deinitDataSources();\n        this.deinitForms();\n        super.deinit();\n    }\n\n    getOptions() {\n        return this.options;\n    }\n\n    createForms() {\n        // forms\n        for (const data of this.data.forms) {\n            const FormClass = FrontHostApp.getClassByName(Model.getClassName(data));\n            const form = new FormClass(data, this);\n            form.init();\n            this.forms.push(form);\n        }\n    }\n\n    deinitForms() {\n        for (const form of this.forms) {\n            form.deinit();\n        }\n    }\n\n    /*getId() {\n        return this.options.id;\n    }*/\n\n    getParams() {\n        return {\n            ...(this.options.params || {}),\n            ...this.params,\n        };\n    }\n\n    addParam(name, value) {\n        // console.log('Page.addParam', name);\n        this.params[name] = value !== undefined ? value : null;\n    }\n\n    async update() {\n        console.log('Page.update', this.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged() || form.hasNew()) {\n                await form.update();\n            }\n        }\n    }\n\n    discard() {\n        console.log('Page.discard', this.getFullName());\n        for (const form of this.forms) {\n            form.discard();\n        }\n    }\n\n    getKey() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') {\n                return form.getKey();\n            }\n        }\n        return null;\n    }\n\n    hasRowFormWithDefaultDs() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.getDefaultDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowFormWithDefaultSqlDataSource() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.hasDefaultSqlDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') return true;\n        }\n        return false;\n    }\n\n    hasTableForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'TableForm') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isNewMode() {\n        return !!this.options.newMode;\n    }\n\n    hasNew() {\n        for (const form of this.forms) {\n            if (form.hasNew()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getApp() {\n        return this.parent;\n    }\n\n    isModal() {\n        return !!this.options.modal;\n    }\n\n    onFormInsert(e) {\n        console.log('Page.onFormInsert', e);\n        for (const key of e.inserts) {\n            const keyParams = DataSource.keyToParams(key);// key params to page params\n            for (const name in keyParams) {\n                this.addParam(name, keyParams[name]);\n            }\n        }\n    }\n    async rpc(name, params) {\n        // console.log('Page.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result =  await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.getName() === name);\n    }\n}\nwindow.QForms.Page = Page;\n","class Table extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.columns = [];\n    }\n    init() {\n        // console.log('Table.init', this.getFullName());\n        for (const data of this.data.columns) {\n            const column = new Column(data, this);\n            column.init();\n            this.addColumn(column);\n        }\n    }\n    addColumn(column) {\n        this.columns.push(column);\n    }\n    getColumn(name) {\n        const column = this.columns.find(column => column.getName() === name);\n        if (!column) throw new Error(`table ${this.getFullName()}: no column ${name}`);\n        return column;\n    }\n    emitResult(result, source = null) {\n        console.log('Table.emitResult');\n        return [\n            ...(result.insert  ? [this.emitInsert(source, result.insert)] : []),\n            ...(result.update  ? [this.emitUpdate(source, result.update)] : []),\n            ...(result.delete  ? [this.emitDelete(source, result.delete)] : []),\n            ...(result.refresh ? [this.emitRefresh(source              )] : [])\n        ];\n    }\n    emitInsert(source, inserts) {\n        return this.emit('insert', {source, inserts});\n    }\n    emitUpdate(source, updates) {\n        return this.emit('update', {source, updates});\n    }\n    emitDelete(source, deletes) {\n        return this.emit('delete', {source, deletes});\n    }\n    emitRefresh(source) {\n        return this.emit('refresh', {source});\n    }\n}\nwindow.QForms.Table = Table;\n"]}