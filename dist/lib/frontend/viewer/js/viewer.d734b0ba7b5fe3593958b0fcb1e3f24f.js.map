{"version":3,"sources":["EventEmitter.js","LoginFrontHostApp.js","ViewerFrontHostApp.js","WebSocketClient.js","Controller/Controller.js","Controller/AlertController/AlertController.js","Controller/ConfirmController/ConfirmController.js","Controller/LoginController/LoginController.js","Controller/ModalController/ModalController.js","Controller/ModalController/ImageDialogController/ImageDialogController.js","Controller/ModelController/ModelController.js","Controller/ModelController/ApplicationController/ApplicationController.js","Controller/ModelController/FieldController/FieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxFieldController/RowFormCheckBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormComboBoxFieldController/RowFormComboBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateFieldController/RowFormDateFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateTimeFieldController/RowFormDateTimeFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFileFieldController/RowFormFileFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormImageFieldController/RowFormImageFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormLinkFieldController/RowFormLinkFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPasswordFieldController/RowFormPasswordFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPhoneFieldController/RowFormPhoneFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextAreaFieldController/RowFormTextAreaFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextBoxFieldController/RowFormTextBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTimeFieldController/RowFormTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormCheckBoxFieldController/TableFormCheckBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormComboBoxFieldController/TableFormComboBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateFieldController/TableFormDateFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateTimeFieldController/TableFormDateTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormLinkFieldController/TableFormLinkFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormPhoneFieldController/TableFormPhoneFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextAreaFieldController/TableFormTextAreaFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextBoxFieldController/TableFormTextBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTimeFieldController/TableFormTimeFieldController.js","Controller/ModelController/FormController/FormController.js","Controller/ModelController/FormController/RowFormController/RowFormController.js","Controller/ModelController/FormController/TableFormController/TableFormController.js","Controller/ModelController/PageController/PageController.js","Model/Model.js","Model/Application/Application.js","Model/Column/Column.js","Model/DataSource/DataSource.js","Model/DataSource/SqlDataSource/SqlDataSource.js","Model/Database/Database.js","Model/Field/Field.js","Model/Field/CheckBoxField/CheckBoxField.js","Model/Field/ComboBoxField/ComboBoxField.js","Model/Field/DateField/DateField.js","Model/Field/DateTimeField/DateTimeField.js","Model/Field/FileField/FileField.js","Model/Field/ImageField/ImageField.js","Model/Field/LabelField/LabelField.js","Model/Field/LinkField/LinkField.js","Model/Field/PasswordField/PasswordField.js","Model/Field/PhoneField/PhoneField.js","Model/Field/TextAreaField/TextAreaField.js","Model/Field/TextBoxField/TextBoxField.js","Model/Field/TimeField/TimeField.js","Model/Form/Form.js","Model/Form/RowForm/RowForm.js","Model/Form/TableForm/TableForm.js","Model/Page/Page.js","Model/Table/Table.js"],"names":["EventEmitter","constructor","this","list","on","name","cb","push","off","i","indexOf","Error","splice","emit","e","length","result","Promise","allSettled","map","status","reason","LoginFrontHostApp","FrontHostApp","data","console","log","super","run","loginController","LoginController","create","rootElement","document","querySelector","getViewClassCssBlockName","Helper","createReactComponent","getViewClass","ctrl","getText","text","getData","ViewerFrontHostApp","options","applicationController","application","Application","init","ApplicationController","rootElementName","createView","connect","err","logError","onWindowPopState","error","values","type","source","message","stack","href","window","location","platformVersion","versions","platform","appVersion","app","logErrorUrl","fetch","method","headers","Content-Type","body","JSON","stringify","catch","alert","resolve","reject","root","childElementCount","alertCtrl","AlertController","onClose","ReactDOM","unmountComponentAtNode","confirm","ConfirmController","QForms","WebSocketClient","protocol","url","host","createUriParamsString","webSocket","refreshTimeoutId","RECONNECT_TIMEOUT","REFRESH_TIMEOUT","params","route","uuid","userId","version","getApp","getModel","Object","keys","key","encodeURIComponent","join","WebSocket","onclose","code","onopen","bind","onmessage","onMessage","startRefreshTimeout","onRefreshTimeout","send","setTimeout","resetRefreshTimeout","clearTimeout","reconnect","async","getHostApp","parse","packet","getView","disableRerender","emitResult","enableRerender","rerender","Controller","view","onViewCreate","AlertView","close","onOkButtonClick","onCloseClick","onKeyDown","ConfirmView","onYesClick","frontHostApp","CustomClass","getClassByName","Class","LoginView","getFrontHostApp","ModalController","id","getId","closeModal","ImageDialogController","src","ImageDialogView","getSrc","ModelController","model","parent","deinited","deinit","getFullName","getParent","getTitle","getCaption","isAttr","viewClassName","getAttr","eval","lastId","activePage","modals","statusbar","homePageName","webSocketClient","getName","getSearchObj","search","split","reduce","acc","item","kv","isDebugMode","onRequest","pageData","pages","createPage","modal","getGlobalParams","title","ApplicationView","setLastQueryTime","time","remoteAppVersion","createVersionNotificationIfNotExists","div","createElement","innerHTML","versionNotification","className","getCssBlockName","append","undefined","pageModel","Page","pc","PageController","getNextId","openPage","pageController","findPageControllerByPageNameAndKey","onPageSelect","request","action","page","newMode","activeElement","focus","isModal","addModal","addPage","removeModal","getNewId","closePage","pageName","getKey","onActionClick","getMenuItemsProp","menu","items","caption","getUser","getDomain","login","onStatusbarCreate","onLogout","getRootPath","onMenuItemClick","history","pushState","createLink","getActivePageName","state","invalidate","filter","forEach","yesButton","yes","noButton","no","openModal","nodeEnv","user","rpc","errorMessage","titleStyle","color","FieldController","getPage","form","getForm","GeneralClass","getClassName","valueToString","value","Date","toISOString","toString","stringToValue","stringValue","fieldType","getType","trim","date","invalidDate","num","Number","isNaN","notNumber","getViewStyle","row","isVisible","isAutoFocus","getAutocomplete","getFormat","RowFormFieldController","parseError","changed","getRow","getValue","setValue","refill","resetErrors","refreshChanged","copyValueToModel","_onChange","widgetValue","putValue","onChange","fireEvent","setValueFromWidget","validateOnChange","validate","isValid","onFieldChange","onBlur","validateOnBlur","getValueForWidget","isChanged","getError","calcChangedState","getPlaceholder","getWidget","isNotNull","required","isEditable","getMode","isReadOnly","isParseError","getErrorMessage","hasColumn","fieldRawValue","valueToRaw","dsRawValue","getRawValue","let","original","modified","getDefaultDataSource","getRowWithChanges","substr","setError","RowFormCheckBoxFieldController","RowFormCheckBoxFieldView","RowFormComboBoxFieldController","dataSource","getComboBoxDataSource","onListInsert","onListUpdate","onListDelete","getItems","getRows","getValueValue","getDisplayValue","RowFormComboBoxFieldView","onEditButtonClick","itemEditPage","onCreateButtonClick","newRowMode","itemCreateForm","createPageName","onInsert","inserts","decodeValue","onItemSelect","button","preventDefault","selectedKey","selectMode","onSelect","RowFormDateFieldController","RowFormDateFieldView","RowFormDateTimeFieldController","args","widget2","defaultValue","parseError2","error2","RowFormDateTimeFieldView","getValueForTime","getHours","getMinutes","h","m","resetErrors2","TimeBox","splitTime","setHours","onView2Create","input","getElement","setSelectionRange","onChange2","setValueFromView2","validate2","onBlur2","getPlaceholder2","getStringValue","getDefaultValue","setDefaultValue","getIntegerValue","setValue2","getError2","isParseError2","setError2","getErrorMessage2","isValid2","RowFormFileFieldController","RowFormFileFieldView","RowFormImageFieldController","RowFormImageFieldView","RowFormLinkFieldController","RowFormLinkFieldView","onClick","RowFormPasswordFieldController","RowFormPasswordFieldView","RowFormPhoneFieldController","RowFormPhoneFieldView","RowFormTextAreaFieldController","RowFormTextAreaFieldView","RowFormTextBoxFieldController","RowFormTextBoxFieldView","RowFormTimeFieldController","RowFormTimeFieldView","TableFormFieldController","TableFormCheckBoxFieldController","TableFormCheckBoxFieldView","TableFormComboBoxFieldController","TableFormComboBoxFieldView","rawValue","cbRow","findRowByRawValue","TableFormDateFieldController","TableFormDateFieldView","formatDate","TableFormDateTimeFieldController","TableFormDateTimeFieldView","TableFormLinkFieldController","TableFormLinkFieldView","TableFormPhoneFieldController","TableFormPhoneFieldView","TableFormTextAreaFieldController","TableFormTextAreaFieldView","TableFormTextBoxFieldController","TableFormTextBoxFieldView","TableFormTimeFieldController","TableFormTimeFieldView","FormController","customClassName","fields","field","onFormChange","getUpdated","updated","now","getField","getSelectedRowKey","RowFormController","mode","hasNew","valid","onModelRefresh","onModelInsert","onModelUpdate","calcState","onFormInsert","onFormUpdate","clearFieldsError","onSaveClick","update","onDiscardClick","changedFields","discard","onFormDiscard","onRefreshClick","refresh","onEditClick","onCancelClick","RowFormView","getActiveRow","withChanges","isActionEnabled","isViewMode","isEditMode","TableFormController","grid","TableFormView","onModelDelete","onGridCreate","onNewClick","new","onDeleteClick","getActiveRowKey","areYouSure","delete","onGridCellDblClick","getOptions","selectRow","edit","onGridLinkClick","onGridDeleteKeyDown","fillDefaultValues","insert","database","table","DataSource","keyToParams","setActiveRowKey","updates","newKey","deletes","onGridSelectionChange","isRowSelected","onFrameChanged","frame","parseInt","setFrame","onNextClick","getFrame","onPreviousClick","canPrev","canNext","ds","getFramesCount","forms","onSaveAndCloseClick","onClosePageClick","onOpenPageClick","link","createOpenInNewLink","open","hasRowFormWithDefaultSqlDataSource","formController","getParams","PageView","pathname","encodeURI","find","arr","keyPart","selectedRowKey","onSelectClick","onResetClick","Model","class","getCol","hasOwnProperty","getDataSource","dataSources","createDataSources","deinitDataSources","hasActions","actions","databases","theme","Database","addDatabase","logout","start","doHttpRequest2","remotePlatformVersion","getDatabase","domain","getVirtualPath","virtualPath","promises","getNodeEnv","Column","includes","rows","rowsByKey","news","changes","Map","setRows","getTable","onTableInsert","onTableUpdate","onTableDelete","onTableRefresh","fillRowsByKey","addRow","getRowKey","addRows","getRowsLength","column","discardRowColumn","has","get","changeRowColumn","newValue","set","size","isRowColumnChanged","getKeyValues","keyColumns","removeRow","newRow","getSingleRow","Form","getRowByIndex","clear","paramName","getChangesByKey","hasNewRows","copyNewValues","newValues","updateRow","columnName","getColumn","onDataSourceInsert","onDataSourceDelete","onDataSourceUpdate","reuslt","sourceRow","isSurrogate","moveRow","offset","moveArrItem","event","onDataSourceRefresh","SqlDataSource","count","lastFrame","insertEx","updateEx","getPageParams","select","getLimit","fill","more","hasMore","Array","Math","ceil","getCount","getLastFrame","tables","Table","addTable","Field","replaceThis","replace","fillDefaultValue","js","templateToJsString","valueToPageParams","isParam","addParam","RowForm","rawToValue","encodeValue","readOnly","notNull","isNullable","getWidth","width","param","hasDefaultSqlDataSource","CheckBoxField","ComboBoxField","displayColumn","valueColumn","dataSourceName","DateField","raw","addMinutes","getTimezoneOffset","v","getTime","DateTimeField","FileField","ImageField","LabelField","LinkField","PasswordField","PhoneField","TextAreaField","getCols","cols","TextBoxField","TimeField","decodeRow","isNewMode","createRow","fillParams","TableForm","onCreate","createForms","deinitForms","FormClass","hasRowFormWithDefaultDs","hasRowForm","hasTableForm","keyParams","columns","addColumn","emitInsert","emitUpdate","emitDelete","emitRefresh"],"mappings":"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","file":"viewer.d734b0ba7b5fe3593958b0fcb1e3f24f.js","sourcesContent":["class EventEmitter {\n    constructor() {\n        this.list = {};\n    }\n    on(name, cb) {\n        // console.log('EventEmitter.on', name);\n        if (!this.list[name]) {\n            this.list[name] = [];\n        }\n        this.list[name].push(cb);\n    }\n    off(name, cb) {\n        // console.log('EventEmitter.off', name);\n        const i = this.list[name].indexOf(cb);\n        if (i === -1) {\n            throw new Error(`cannot find cb for ${name}`);\n        }\n        // console.log(i);\n        this.list[name].splice(i, 1);\n    }\n    async emit(name, e) {\n        // console.log('EventEmitter.emit', name, e);\n        if (this.list[name] && this.list[name].length) {\n            const results = await Promise.allSettled(this.list[name].map(cb => cb(e)));\n            // console.log('results:', results);\n            for (const result of results) {\n                if (result.status === 'rejected') {\n                    throw result.reason;\n                }\n            }\n        }\n    }\n}\n","class LoginFrontHostApp extends FrontHostApp {\n    constructor(data) {\n        console.log('LoginFrontHostApp.constructor', data);\n        super();\n        this.data = data;\n    }\n    async run() {\n        console.log('LoginFrontHostApp.run');\n        const loginController = LoginController.create(this);\n        const rootElement = document.querySelector(`.${loginController.getViewClassCssBlockName()}__root`);\n        const loginView = Helper.createReactComponent(rootElement, loginController.getViewClass(), {ctrl: loginController});\n    }\n    getText() {\n        return this.data.text;\n    }\n    getData() {\n        return this.data;\n    }\n}\n","class ViewerFrontHostApp extends FrontHostApp {\n    constructor(options = {}) {\n        if (!options.data) throw new Error('no data');\n        super();\n        this.options = options;\n        this.applicationController = null;\n    }\n    async run() {\n        console.log('ViewerFrontHostApp.run', this.getData());\n\n        // application\n        const application = new Application(this.getData());\n        application.init();\n\n        // applicationController\n        const applicationController = this.applicationController = ApplicationController.create(application, this);\n        applicationController.init();\n\n        // view\n        const rootElementName = `.${applicationController.getViewClass().name}__root`;\n        const rootElement = document.querySelector(rootElementName);\n        if (!rootElement) {\n            throw new Error(`no root element: ${rootElementName}`);\n        }\n        applicationController.createView(rootElement);\n\n        // connect\n        try {\n            await applicationController.connect();\n        } catch (err) {\n            this.logError(err);\n        }\n    }\n    async onWindowPopState(e) {\n        // console.log('ViewerFrontHostApp.onWindowPopState', e.state);\n        await this.applicationController.onWindowPopState(e);\n    }\n    logError(err) {\n        console.error('FrontHostApp.logError', err);\n        const values = {\n            type   : 'error',\n            source : 'client',\n            message: err.message,\n            stack  : err.stack,\n            data   : {\n                href           : window.location.href,\n                platformVersion: this.getData().versions.platform,\n                appVersion     : this.getData().versions.app,\n            }\n        };\n        console.log(`POST ${this.getData().logErrorUrl}`, values);\n        fetch(this.getData().logErrorUrl, {\n            method : 'POST',\n            headers: {'Content-Type': 'application/json;charset=utf-8'},\n            body   : JSON.stringify(values)\n        }).catch(err => {\n            console.error(err.message);\n        });\n    }\n    getData() {\n        if (!this.options.data) throw new Error('no data');\n        return this.options.data;\n    }\n    alert(options) {\n        console.log('ViewerFrontHostApp.alert', options);\n        return new Promise((resolve, reject) => {\n            try {\n                const root = document.querySelector('.alert-root');\n                if (root.childElementCount === 0) {\n                    const ctrl = this.alertCtrl = new AlertController({\n                        ...options,\n                        onClose: result => {\n                            this.alertCtrl = null;\n                            ReactDOM.unmountComponentAtNode(root);\n                            resolve(result);\n                        }});\n                    // console.log('ctrl:', ctrl);\n                    const view = Helper.createReactComponent(root, ctrl.getViewClass(), {ctrl});\n                    // console.log('view', view);\n                } else {\n                    reject(new Error('alert already exists'));\n                }\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n    confirm(options) {\n        console.log('ViewerFrontHostApp.confirm', options);\n        return new Promise((resolve, reject) => {\n            try {\n                const root = document.querySelector('.alert-root');\n                if (root.childElementCount === 0) {\n                    const ctrl = this.alertCtrl = new ConfirmController({\n                        ...options,\n                        onClose: result => {\n                            this.alertCtrl = null;\n                            ReactDOM.unmountComponentAtNode(root);\n                            resolve(result);\n                        }});\n                    // console.log('ctrl:', ctrl);\n                    const view = Helper.createReactComponent(root, ctrl.getViewClass(), {ctrl});\n                    // console.log('view', view);\n                } else {\n                    reject(new Error('confirm already exists'));\n                }\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n}\n\nwindow.QForms.ViewerFrontHostApp = ViewerFrontHostApp;\n","class WebSocketClient {\n    constructor(options = {}) {\n        this.options = options;\n        if (!options.applicationController) throw new Error('no options.applicationController');\n        if (!options.protocol) throw new Error('no options.protocol');\n        this.url = `${options.protocol}://${window.location.host}/?${this.createUriParamsString(options)}`;\n        this.webSocket         = null;\n        this.refreshTimeoutId  = null;\n        this.RECONNECT_TIMEOUT = 10;        // sec\n        this.REFRESH_TIMEOUT   = 60*60;     // sec\n    }\n    createUriParamsString(options) {\n        const params = {\n            route  : options.route,\n            uuid   : options.uuid,\n            userId : options.userId,\n            version: this.getApp().getModel().getData().versions.app\n        };\n        return Object.keys(params).map(key => `${key}=${encodeURIComponent(params[key])}`).join('&');\n    }\n    connect() {\n        console.log('WebSocketClient.connect', this.url);\n        return new Promise((resolve, reject) => {\n            this.webSocket = new WebSocket(this.url);\n            this.webSocket.onclose = async e => {\n                this.webSocket = null;\n                reject(new Error(`Connection failed ${e.code}`));\n            };\n            this.webSocket.onopen = e => {\n                this.webSocket.onclose   = this.onClose.bind(this);\n                this.webSocket.onmessage = this.onMessage.bind(this);\n                this.startRefreshTimeout();\n                resolve(e);\n            };\n        });\n    }\n    async onRefreshTimeout() {\n        // console.log('WebSocketClient.onRefreshTimeout');\n        this.refreshTimeoutId = null;\n        this.send('ping');\n        this.startRefreshTimeout();\n    }\n    send(data) {\n        console.log('WebSocketClient.send', data);\n        this.webSocket.send(data);\n    }\n    startRefreshTimeout() {\n        this.refreshTimeoutId = setTimeout(this.onRefreshTimeout.bind(this), this.REFRESH_TIMEOUT * 1000);\n    }\n    resetRefreshTimeout() {\n        if (this.refreshTimeoutId) {\n            clearTimeout(this.refreshTimeoutId);\n            this.refreshTimeoutId = null;\n        }\n    }\n    async reconnect() {\n        console.log('WebSocketClient.reconnect');\n        try {\n            await this.connect();\n        } catch (err) {\n            console.error(err);\n            console.log(`waiting ${this.RECONNECT_TIMEOUT} sec for socket reconnect...`);\n            setTimeout(async () => await this.reconnect(), this.RECONNECT_TIMEOUT * 1000);\n        }\n    }\n\n    async onClose(e) {\n        console.error('WebSocketClient.onClose', e);\n        this.getApp().getHostApp().logError(new Error('websocket close'));\n        this.resetRefreshTimeout();\n        this.webSocket.onclose = null;\n        this.webSocket.onmessage = null;\n        this.webSocket = null;\n        await this.reconnect();\n    }\n    async onMessage(e) {\n        console.log('WebSocketClient.onMessage', JSON.parse(e.data));\n        const packet = JSON.parse(e.data);\n        if (packet.type === 'result') {\n            this.getApp().getView().disableRerender();\n            await this.getApp().getModel().emitResult(packet.data);\n            this.getApp().getView().enableRerender();\n            this.getApp().getView().rerender();\n        }\n    }\n    getApp() {\n        return this.options.applicationController;\n    }\n}\n","class Controller extends EventEmitter {\n    constructor() {\n        super();\n        this.view = null;\n    }\n    onViewCreate = view => {\n        // console.log('Controller.onViewCreate');\n        this.view = view;\n    }\n    async rerender() {\n        if (this.view) {\n            return await this.view.rerender();\n        }\n        console.error(`${this.constructor.name}.rerender no view`);\n    }\n    getView() {\n        return this.view;\n    }\n    getViewClass() {\n        throw new Error(`${this.constructor.name}.getViewClass not implemented`);\n    }\n}\n","class AlertController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return AlertView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onOkButtonClick = async e => {\n        this.close(true);\n    }\n    onCloseClick = async e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class ConfirmController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return ConfirmView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onYesClick = e => {\n        this.close(true);\n    }\n    onCloseClick = e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class LoginController extends Controller {\n    constructor(frontHostApp) {\n        super();\n        console.log(`${this.constructor.name}.constructor`);\n        this.frontHostApp = frontHostApp;\n    }\n    static create(frontHostApp) {\n        const data = frontHostApp.getData();\n        if (!data.name) throw new Error('no app name');\n        const CustomClass = FrontHostApp.getClassByName(`${data.name}LoginController`);\n        const Class = CustomClass ? CustomClass : LoginController;\n        return new Class(frontHostApp);\n    }\n    getViewClass() {\n        return LoginView;\n    }\n    getText() {\n        return this.frontHostApp.getText();\n    }\n    getFrontHostApp() {\n        return this.frontHostApp;\n    }\n    getViewClassCssBlockName() {\n        return this.getViewClass().name;\n    }\n}\n","class ModalController extends Controller {\n    constructor(options = {}) {\n        super();\n        if (!options.app) throw new Error('no app');\n        if (!options.id) throw new Error('no id');\n        this.options = options;\n    }\n    getId() {\n        return this.options.id;\n    }\n    getApp() {\n        return this.options.app;\n    }\n    async close() {\n        await this.getApp().closeModal(this);\n        if (this.options.onClose) {\n            this.options.onClose();\n        }\n    }\n}\n","class ImageDialogController extends ModalController {\n    constructor(options) {\n        // console.log('ImageDialogController.constructor', options);\n        super(options);\n        if (!options.src) throw new Error('no src');\n    }\n    getViewClass() {\n        console.log('ImageDialogController.getViewClass');\n        return ImageDialogView;\n    }\n    getSrc() {\n        return this.options.src;\n    }\n    onCloseClick = async e => {\n        await this.close();\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            await this.close();\n        }\n    }\n}\n","class ModelController extends Controller {\n    constructor(model, parent) {\n        super();\n        this.model    = model;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.model.getFullName()}: controller already deinited`);\n        this.deinited = true;\n    }\n    getModel() {\n        return this.model;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getTitle() {\n        return this.getModel().getCaption();\n    }\n    getViewClass() {\n        // console.log(`${this.constructor.name}.getViewClass`, this.getModel().getAttr('viewClass'));\n        const model = this.getModel();\n        if (!model.isAttr('viewClass')) throw new Error(`${this.constructor.name} not supports view`);\n        const viewClassName = model.getAttr('viewClass');\n        return viewClassName ? eval(viewClassName) : null;\n    }\n}\n\nwindow.QForms.ModelController = ModelController;\n","class ApplicationController extends ModelController {\n    constructor(model, frontHostApp) {\n        // console.log('ApplicationController.constructor', model, view);\n        super(model, null);\n        this.frontHostApp = frontHostApp;\n        this.lastId = 0;\n        this.activePage = null;     // active non modal page\n        this.modals = [];\n        this.statusbar  = null;\n        this.homePageName = null;\n        this.webSocketClient = null;\n    }\n    static create(model, frontHostApp) {\n        // console.log('ApplicationController.create', 'debug:', ApplicationController.isDebugMode());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}ApplicationController`);\n        const Class = CustomClass ? CustomClass : ApplicationController;\n        return new Class(model, frontHostApp);\n    }\n    static getSearchObj() {\n        // console.log('ApplicationController.getSearchObj:', window.location);\n        if (!window.location.search.split('?')[1]) return {};\n        return window.location.search.split('?')[1].split('&').reduce((acc, item) => {\n            const kv = item.split('=');\n            acc[kv[0]] = kv[1];\n            return acc;\n        }, {});\n    }\n    static isDebugMode() {\n        return ApplicationController.getSearchObj()['debug'] === '1';\n    }\n    init() {\n        // console.log('ApplicationController.init');\n        super.init();\n        // this.model.on('logout' , this.onLogout);\n        this.model.on('request', this.onRequest);\n        const pageData = this.model.data.pages[0];\n        this.activePage = pageData ? this.createPage(pageData, {\n            modal : false,\n            params: this.getGlobalParams()\n        }) : null;\n        document.title = this.getTitle();\n        this.homePageName = this.activePage.getModel().getName();\n    }\n    deinit() {\n        // this.model.off('logout', this.onLogout);\n        this.model.off('request', this.onRequest);\n        super.deinit();\n    }\n    getViewClass() {\n        return super.getViewClass() || ApplicationView;\n    }\n    createView(rootElement) {\n        // console.log('ApplicationController.createView');\n        this.view = Helper.createReactComponent(rootElement, this.getViewClass(), {ctrl: this});\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(this.model.getAttr('time'));\n        }\n    }\n    onRequest = async e => {\n        console.log('onRequest', e);\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(e.time);\n        }\n        // console.log('e.remoteAppVersion', e.remoteAppVersion);\n        // console.log('this.getModel().getData().versions.app', this.getModel().getData().versions.app);\n        if (this.getModel().getData().versions.app !== e.remoteAppVersion) {\n            this.createVersionNotificationIfNotExists();\n        }\n    }\n    createVersionNotificationIfNotExists() {\n        // console.log('ApplicationController.createVersionNotificationIfNotExists');\n        if (!document.querySelector('.version-notification')) {\n            const div = document.createElement('div');\n            div.innerHTML = this.getModel().getText().application.versionNotification;\n            div.className = 'version-notification';\n            document.querySelector(`.${this.getView().getCssBlockName()}__body`).append(div);\n        } else {\n            // console.log(`version notification already exists`);\n        }\n    }\n    getGlobalParams() {\n        return {\n            // foo: 'bar'\n        };\n    }\n    // options\n    // - modal      : boolean,\n    // - newMode    : boolean,\n    // - selectMode : boolean,\n    // - selectedKey: string,\n    // - onCreate   : function,\n    // - onSelect   : function,\n    // - onClose    : function,\n    // - params     : object,\n    createPage(pageData, options) {\n        if (options.modal === undefined) throw new Error('no options.modal');\n\n        // model\n        const pageModel = new Page(pageData, this.model, options);\n        pageModel.init();\n\n        // controller\n        const pc = PageController.create(pageModel, this, `c${this.getNextId()}`);\n        pc.init();\n\n        return pc;\n    }\n    async openPage(options) {\n        console.log('ApplicationController.openPage', options);\n        if (!options.name) throw new Error('no name');\n        if (options.key) throw new Error('openPage: key param is deprecated');\n\n        // if this page with this key is already opened, then show it\n        const pageController = this.findPageControllerByPageNameAndKey(options.name, null);\n        // console.log('pageController:', pageController);\n        if (pageController) {\n            this.onPageSelect(pageController);\n            return pageController;\n        }\n\n        const {page: pageData} = await this.model.request({\n            action : 'page',\n            page   : options.name,\n            newMode: !!options.newMode,\n            params : options.params || {}\n        });\n\n        // modal by default\n        if (options.modal === undefined) {\n            options.modal = true;\n        }\n        if (!options.onClose) {\n            const activeElement = document.activeElement;\n            options.onClose = () => {\n                if (activeElement) activeElement.focus();\n            };\n        }\n        const pc = this.createPage(pageData, options);\n        // console.log('pc:', pc);\n\n        // show\n        pc.isModal() ? this.addModal(pc) : this.addPage(pc);\n        await this.rerender();\n\n        return pc;\n    }\n    addModal(ctrl) {\n        this.modals.push(ctrl);\n    }\n    removeModal(ctrl) {\n        // console.log('ApplicationController.removeModal', ctrl);\n        const i = this.modals.indexOf(ctrl);\n        if (i === -1) throw new Error(`cannot find modal: ${ctrl.getId()}`);\n        this.modals.splice(i, 1);\n    }\n    getNextId() {\n        this.lastId++;\n        return this.lastId;\n    }\n    getNewId() {\n        return `c${this.getNextId()}`;\n    }\n    addPage(pc) {\n        if (this.activePage) {\n            this.closePage(this.activePage);\n        }\n        this.activePage = pc;\n        document.title = this.getTitle();\n    }\n    findPageControllerByPageNameAndKey(pageName, key) {\n        if (this.activePage && this.activePage.model.getName() === pageName && this.activePage.model.getKey() === key) {\n            return this.activePage;\n        }\n        return null;\n    }\n    onPageSelect(pc) {\n        console.log('ApplicationController.onPageSelect', pc.model.getName());\n    }\n    async closePage(pageController) {\n        console.log('ApplicationController.closePage', pageController.model.getFullName());\n        if (this.modals.indexOf(pageController) > -1) {\n            this.modals.splice(this.modals.indexOf(pageController), 1);\n        } else if (this.activePage === pageController) {\n            this.activePage = null;\n            document.title = '';\n        } else  {\n            throw new Error('page not found');\n        }\n        await this.rerender();\n        pageController.deinit();\n        pageController.model.deinit();\n    }\n    async onActionClick(name) {\n        console.log('ApplicationController.onActionClick', name);\n    }\n    getMenuItemsProp() {\n        // console.log('ApplicationController.getMenuItemsProp');\n        return [\n            // pages & actions\n            ...(this.model.data.menu ? Object.keys(this.model.data.menu).map(key => ({\n                name : key,\n                title: key,\n                items: this.model.data.menu[key].map(item => ({\n                    type : item.type,\n                    name : item.page || item.action,\n                    title: item.caption\n                }))\n            })) : []),\n            // user\n            ...(this.model.getUser() ? [{\n                name : 'user',\n                title: `${this.model.getDomain()}/${this.model.getUser().login}`,\n                items: [\n                    {\n                        type : 'custom',\n                        name : 'logout',\n                        title: 'Logout'\n                    }\n                ]\n            }] : [])\n        ];\n    }\n    onStatusbarCreate = statusbar => {\n        this.statusbar = statusbar;\n    }\n    onLogout = async () => {\n        console.log('ApplicationController.onLogout');\n        const result = await this.model.request({action: 'logout'});\n        location.href = this.getRootPath();\n    }\n    onMenuItemClick = async (menu, type, name) => {\n        console.log('ApplicationController.onMenuItemClick', menu, type, name);\n        if (type === 'page') {\n            await this.openPage({name: name, modal: false});\n            history.pushState({pageName: name}, '', PageController.createLink({page: name}));\n        } else if (type === 'action') {\n            try {\n                const result = await this.onActionClick(name);\n                if (!result) {\n                    throw new Error(`no handler for action '${name}'`);\n                }\n            } catch (err) {\n                await this.alert({message: err.message});\n            }\n        } else if (type === 'custom' && name === 'logout') {\n            await this.onLogout();\n        } else {\n            throw new Error(`unknown menu type/name: ${type}/${name}`);\n        }\n    }\n    /*getFocusCtrl() {\n        if (this.modals.length > 0) {\n            return this.modals[this.modals.length - 1];\n        }\n        return this.activePage;\n    }*/\n    getActivePageName() {\n        if (this.activePage) {\n            return this.activePage.getModel().getName();\n        }\n        return null;\n    }\n    async onWindowPopState(e) {\n        console.log('ApplicationController.onWindowPopState', e.state);\n        await this.openPage({\n            name : e.state ? e.state.pageName : this.homePageName,\n            modal: false\n        });\n    }\n    getTitle() {\n        // console.log('ApplicationController.getTitle', this.activePage);\n        if (this.activePage) {\n            return `${this.activePage.getTitle()} - ${this.getModel().getCaption()}`;\n        }\n        return this.getModel().getCaption();\n    }\n    invalidate() {\n        if (this.activePage) this.activePage.invalidate();\n        this.modals.filter(ctrl => ctrl instanceof PageController).forEach(page => page.invalidate());\n    }\n    async alert(options) {\n        /*if (!options.title) {\n            options.title = this.getModel().getText().application.error;\n        }*/\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.alert(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    async confirm(options) {\n        if (!options.title) {\n            options.title = this.getModel().getText().application.confirm;\n        }\n        if (!options.yesButton) {\n            options.yesButton = this.getModel().getText().confirm.yes;\n        }\n        if (!options.noButton) {\n            options.noButton = this.getModel().getText().confirm.no;\n        }\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.confirm(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    getRootPath() {\n        return '/';\n    }\n    async openModal(ctrl) {\n        this.addModal(ctrl);\n        await this.rerender();\n    }\n    async closeModal(ctrl) {\n        this.removeModal(ctrl);\n        await this.rerender();\n    }\n    getHostApp() {\n        return this.frontHostApp;\n    }\n    async connect() {\n        const data = this.getModel().getData();\n        this.webSocketClient = new WebSocketClient({\n            applicationController: this,\n            protocol             : data.nodeEnv === 'development' ? 'ws' : 'wss',\n            route                : data.route,\n            uuid                 : data.uuid,\n            userId               : data.user ? data.user.id : null,\n        });\n        await this.webSocketClient.connect();\n    }\n    async rpc(name, params) {\n        const result = await this.getModel().rpc(name, params);\n        if (result.errorMessage) {\n            this.getHostApp().logError(new Error(result.errorMessage));\n            await this.alert({\n                title     : this.getModel().getText().application.error,\n                titleStyle: {color: 'red'},\n                message   : result.errorMessage\n            });\n        }\n        return result;\n    }\n}\n\nwindow.QForms.ApplicationController = ApplicationController;\n","class FieldController extends ModelController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    static create(model, parent) {\n        // console.log('FieldController.create', model.getFullName(), parent.model.getClassName());\n        const page = model.getPage();\n        const form = model.getForm();\n        const CustomClass = FrontHostApp.getClassByName(`${page.getName()}${form.getName()}${model.getName()}FieldController`);\n        const GeneralClass = FrontHostApp.getClassByName(`${parent.model.getClassName()}${model.getClassName()}Controller`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    valueToString(value) {\n        // console.log('Field.valueToString', this.model.getFullName(), typeof value, value);\n        switch (typeof value) {\n            case 'string':\n                return value;\n            case 'object':\n                if (value === null) return '';\n                if (value instanceof Date) return value.toISOString();\n                return JSON.stringify(value, null, 4);\n            case 'number':\n            case 'boolean':\n                return value.toString();\n            case 'undefined':\n                return '';\n            default: throw new Error(`${this.model.getFullName()}: unknown value type: ${typeof value}, value: ${value}`);\n        }\n    }\n    stringToValue(stringValue) {\n        // console.log('FieldController.stringToValue', this.model.getFullName(), stringValue);\n        // if (stringValue === undefined) return undefined;\n        // if (stringValue === null) return null;\n        const fieldType = this.model.getType();\n        // console.log('fieldType:', fieldType);\n        if (stringValue.trim() === '') return null;\n        if (fieldType === 'object' || fieldType === 'boolean') {\n            return JSON.parse(stringValue);\n        } else if (fieldType === 'date') {\n            const date = new Date(stringValue);\n            if (date.toString() === 'Invalid Date') throw new Error(`${this.getApp().getModel().getText().error.invalidDate}: ${stringValue}`);\n            return date;\n        } else if (fieldType === 'number') {\n            const num = Number(stringValue);\n            if (isNaN(num)) throw new Error(this.getApp().getModel().getText().error.notNumber);\n            return num;\n        }\n        return stringValue;\n    }\n    getViewStyle(row) {\n        return null;\n    }\n    async openPage(options) {\n        return await this.getParent().openPage(options);\n    }\n    getForm() {\n        return this.parent;\n    }\n    getPage() {\n        return this.parent.parent;\n    }\n    getApp() {\n        return this.parent.parent.parent;\n    }\n    isVisible() {\n        return this.getModel().getAttr('visible') === 'true';\n    }\n    isAutoFocus() {\n        return this.getModel().getAttr('autoFocus') === 'true';\n    }\n    getAutocomplete() {\n        return this.getModel().getAttr('autocomplete') || null;\n    }\n    getFormat() {\n        return this.getModel().getAttr('format');\n    }\n}\nwindow.QForms.FieldController = FieldController;\n","class RowFormFieldController extends FieldController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            value     : null,\n            parseError: null,\n            error     : null,\n            changed   : false,\n        };\n    }\n    init() {\n        const row = this.getRow();\n        const value = this.model.getValue(row);\n        this.setValue(value);\n        // console.log(this.model.getFullName(), value);\n    }\n    refill() {\n        // console.log('RowFormFieldController.refill', this.model.getFullName());\n        if (!this.view) return;\n        const value = this.model.getValue(this.getRow());\n        this.setValue(value);\n        this.resetErrors();\n        this.refreshChanged();\n    }\n    getRow() {\n        return this.model.getForm().getRow();\n    }\n    copyValueToModel() {\n        // console.log('RowFormFieldController.copyValueToModel', this.model.getFullName());\n        this.model.setValue(this.getRow(), this.getValue());\n    }\n    _onChange(widgetValue) {\n\n    }\n    putValue(widgetValue) {\n        // console.log('RowFormFieldController.putValue', widgetValue);\n        this.onChange(widgetValue, false);\n    }\n    onChange = async (widgetValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onChange', widgetValue);\n        this._onChange(widgetValue);\n        this.resetErrors();\n        try {\n            this.setValueFromWidget(widgetValue);\n        } catch (err) {\n            console.error(`${this.model.getFullName()}: cannot parse view value: ${err.message}`);\n            this.state.parseError = err.message;\n        }\n\n        if (this.model.validateOnChange()) {\n            this.validate();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    onBlur = (widgetValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onBlur', this.model.getFullName());\n        if (this.model.validateOnBlur()) {\n            console.log('validateOnBlur');\n            this.validate();\n            if (this.isValid()) {\n                this.model.setValue(this.getRow(), this.getValue());\n            }\n            this.refreshChanged();\n            if (fireEvent) {\n                try {\n                    this.emit('change', {value: widgetValue});\n                } catch (err) {\n                    console.error('unhandled change event error:', this.model.getFullName(), err);\n                }\n                this.parent.onFieldChange({source: this});\n            }\n        }\n    }\n    getValueForWidget() {\n        const value = this.getValue();\n        // console.log('value:', this.model.getFullName(), value, typeof value);\n        return this.valueToString(value);\n    }\n    setValueFromWidget(widgetValue) {\n        // console.log('RowFormFieldController.setValueFromWidget', this.model.getFullName(), typeof widgetValue, widgetValue);\n        if (typeof widgetValue !== 'string') throw new Error(`${this.model.getFullName()}: widgetValue must be string, but got ${typeof widgetValue}`);\n        const value = this.stringToValue(widgetValue);\n        // console.log('value:', value);\n        this.setValue(value);\n    }\n    setValue(value) {\n        // console.log('RowFormFieldController.setValue', this.model.getFullName(), value);\n        this.state.value = value;\n    }\n    getValue() {\n        return this.state.value;\n    }\n    isChanged() {\n        // console.log('RowFormFieldController.isChanged', this.model.getFullName(), this.state);\n        return this.state.changed;\n    }\n    isValid() {\n        return this.state.parseError === null && this.state.error === null;\n    }\n    validate() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        if (this.isVisible()) {\n            this.state.error = this.getError();\n        }\n    }\n    refreshChanged() {\n        this.state.changed = this.calcChangedState(this.getRow());\n    }\n    getPlaceholder() {\n        // console.log('RowFormFieldController.getPlaceholder', this.model.getFullName(), this.model.getAttr('placeholder'));\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        if (ApplicationController.isDebugMode()) {\n            const value = this.getValue();\n            if (value === undefined) return 'undefined';\n            if (value === null) return 'null';\n            if (value === '') return 'empty string';\n        }\n    }\n    getError() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.view && this.view.getWidget()) {\n            try {\n                const widgetValue = this.view.getWidget().getValue();\n            } catch (err) {\n                return `can't parse value: ${err.message}`;\n            }\n        }\n\n        // null validator\n        const value = this.getValue();\n        if (this.model.isNotNull() && (value === null || value === undefined)) {\n            return this.getModel().getApp().getText().form.required;\n        }\n        return null;\n    }\n    isEditable() {\n        return this.parent.getMode() === 'edit' && !this.model.isReadOnly();\n    }\n    isParseError() {\n        return this.state.parseError !== null;\n    }\n    calcChangedState(row) {\n        // console.log('RowFormFieldController.calcChangedState', this.model.getFullName());\n        if (!row) throw new Error('FieldController: no row');\n        if (this.isParseError()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: parse error: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (!this.isValid()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: not valid: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (this.model.hasColumn()) {\n            const fieldRawValue = this.model.valueToRaw(this.getValue());\n            const dsRawValue = this.model.getRawValue(row);\n            if (fieldRawValue !== dsRawValue) {\n                console.log(`FIELD CHANGED ${this.model.getFullName()}`, dsRawValue, fieldRawValue);\n                return true;\n            }\n        }\n        if (this.model.isChanged(row)) {\n            let original = row[this.model.getAttr('column')];\n            let modified = this.model.getDefaultDataSource().getRowWithChanges(row)[this.model.getAttr('column')];\n            if (original) original = original.substr(0, 100);\n            if (modified) modified = modified.substr(0, 100);\n            console.log(`MODEL CHANGED ${this.model.getFullName()}:`, original, modified);\n            return true;\n        }\n        return false;\n    }\n    setError(error) {\n        this.state.error = error;\n    }\n    resetErrors() {\n        this.setError(null);\n        this.state.parseError = null;\n    }\n    getErrorMessage() {\n        if (this.state.parseError) {\n            return this.state.parseError;\n        }\n        return this.state.error;\n    }\n}\nwindow.QForms.RowFormFieldController = RowFormFieldController;\n","class RowFormCheckBoxFieldController extends RowFormFieldController {\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n\n    getViewClass() {\n        return super.getViewClass() || RowFormCheckBoxFieldView;\n    }\n}\n\nwindow.QForms.RowFormCheckBoxFieldController = RowFormCheckBoxFieldController;\n","class RowFormComboBoxFieldController extends RowFormFieldController {\n    init() {\n        // console.log('RowFormComboBoxFieldController.init', this.getModel().getFullName());\n        super.init();\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.on('insert', this.onListInsert);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListDelete);\n    }\n    deinit() {\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.off('insert', this.onListInsert);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListDelete);\n        super.deinit();\n    }\n\n    getItems() {\n        try {\n            return this.getRows().map(row => ({\n                value: this.model.getValueValue(row).toString(),\n                title: this.model.getDisplayValue(row).toString()\n            }));\n        } catch (err) {\n            err.message = `${this.getModel().getFullName()}: ${err.message}`;\n            throw err;\n        }\n    }\n    getRows() {\n        return this.model.getComboBoxDataSource().getRows();\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormComboBoxFieldView;\n    }\n    getPlaceholder() {\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        return ApplicationController.isDebugMode() ? '[null]' : null;\n    }\n    onEditButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onEditButtonClick');\n        const itemEditPage = this.getModel().getAttr('itemEditPage');\n        const value = this.getValue();\n        // console.log('itemEditPage', itemEditPage);\n        // console.log('value:', value);\n        if (itemEditPage && value) {\n            await this.openPage({\n                name: itemEditPage,\n                params: {\n                    key: value\n                }\n            });\n        }\n    }\n    onCreateButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onCreateButtonClick');\n        const newRowMode = this.getModel().getAttr('newRowMode');\n        const itemCreateForm = this.getModel().getAttr('itemCreateForm');\n        if (!itemCreateForm) throw new Error('no itemCreateForm');\n\n        let createPageName;\n        if (newRowMode === 'editPage') {\n            createPageName = this.getModel().getAttr('itemEditPage');\n        } else if (newRowMode === 'createPage') {\n            createPageName = this.getModel().getAttr('itemCreatePage');\n        } else {\n            throw new Error(`wrong newRowMode value: ${newRowMode}`);\n        }\n\n        // page\n        const pc = await this.openPage({\n            name: createPageName,\n            newMode: true\n        });\n\n        // form\n        const form = pc.getModel().getForm(itemCreateForm);\n        const onInsert = async e => {\n            form.off('insert', onInsert);\n            const [key] = e.inserts;\n            const [id] = Helper.decodeValue(key);\n            // console.log('id:', id);\n            await this.onChange(id.toString());\n        }\n        form.on('insert', onInsert);\n    }\n    onListInsert = async e => {\n        console.log('RowFormComboBoxFieldController.onListInsert');\n        await this.rerender();\n    }\n    onListUpdate = async e => {\n        // console.log('RowFormComboBoxFieldController.onListUpdate');\n        await this.rerender();\n    }\n    onListDelete = async e => {\n        await this.rerender();\n    }\n    onItemSelect = async e => {\n        // console.log('RowFormComboBoxFieldController.onItemSelect');\n        if (e.button === 0) {\n            e.preventDefault();\n            const id = this.getValue();\n            const selectedKey = id ? JSON.stringify([id]) : null;\n            await this.openPage({\n                name       : this.getModel().getAttr('itemSelectPage'),\n                selectMode : true,\n                selectedKey: selectedKey,\n                onSelect   : async key => {\n                    if (key) {\n                        const [id] = Helper.decodeValue(key);\n                        // console.log('id:', id);\n                        if (this.getValue() !== id) {\n                            await this.getView().onChange(id.toString());\n                        }\n                    } else {\n                        if (this.getValue() !== null) {\n                            await this.getView().onChange('');\n                        }\n                    }\n                }\n            });\n        }\n    }\n}\n\nwindow.QForms.RowFormComboBoxFieldController = RowFormComboBoxFieldController;\n","class RowFormDateFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormDateFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n}\nwindow.QForms.RowFormDateFieldController = RowFormDateFieldController;\n","class RowFormDateTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.widget2 = null;\n        this.defaultValue = 0;\n        this.state.parseError2 = null;\n        this.state.error2 = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormDateTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    getValueForTime() {\n        // console.log('RowFormDateTimeFieldController.getValueForTime', this.model.getFullName(), this.defaultValue, TimeBox.getStringValue(this.defaultValue));\n        const date = this.getValue();\n        if (date) {\n            const value = date.getHours() * 60 + date.getMinutes();\n            // console.log('value:', value);\n            if (value !== this.defaultValue) {\n                // console.log('not equal to default value', value, this.defaultValue);\n                return value;\n            }\n        }\n        return null;\n    }\n    setValueFromWidget(widgetValue) {\n        if (widgetValue === null) {\n            this.state.parseError2 = null;\n            this.resetErrors2();\n            if (this.widget2) this.widget2.setValue(null);\n        } else {\n            const [h, m] = TimeBox.splitTime(this.defaultValue);\n            widgetValue.setHours(h, m);\n        }\n        this.setValue(widgetValue);\n    }\n    onView2Create = widget2 => {\n        // console.log('RowFormDateTimeFieldController.onView2Create', widget2);\n        this.widget2 = widget2;\n    };\n    _onChange(widgetValue) {\n        // console.log('RowFormDateTimeFieldController._onChange', this.widget2);\n        if (widgetValue !== null) {\n            setTimeout(() => {\n                const input = this.widget2.getElement();\n                input.focus();\n                input.setSelectionRange(0, input.value.length);\n            }, 0);\n        }\n    }\n    onChange2 = (widgetValue, fireEvent = true) => {\n        // console.log('RowFormDateTimeFieldController.onChange2', widgetValue);\n        this.resetErrors2();\n        try {\n            this.setValueFromView2(widgetValue);\n        } catch (err) {\n            console.log(`${this.model.getFullName()}: cannot parse time: ${err.message}`);\n            this.state.parseError2 = err.message;\n        }\n        if (!this.state.parseError2) {\n            this.validate2();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    };\n    onBlur2 = (widgetValue, fireEvent = false) => {\n        console.log('RowFormDateTimeFieldController.onBlur2', widgetValue);\n        if (!this.isEditable()) return;\n        this.validate2();\n        if (this.isValid()) {\n            this.copyValueToModel();\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n        }\n        this.parent.onFieldChange({source: this});\n    };\n    getPlaceholder2() {\n        return TimeBox.getStringValue(this.defaultValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue(defaultValue) {\n        // console.log('RowFormDateTimeFieldController.setDefaultValue', this.widget2 ? this.widget2.getValue() : null);\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24 * 60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n        if (this.widget2 && this.widget2.getValue() === null && this.state.value) {\n            this.setValue2(null);\n        }\n    }\n    setValueFromView2(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error('wrong time');\n        this.setValue2(widgetValue);\n    }\n    setValue2(widgetValue) {\n        const value = widgetValue !== null ? widgetValue : this.defaultValue;\n        const [h, m] = TimeBox.splitTime(value);\n        this.state.value.setHours(h, m);\n    }\n    validate2() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        this.state.error2 = this.getError2();\n    }\n    getError2() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.widget2) {\n            try {\n                const widgetValue = this.widget2.getValue();\n            } catch (err) {\n                return `can't parse time: ${err.message}`;\n            }\n        }\n\n        return null;\n    }\n    isParseError2() {\n        return this.state.parseError2 !== null;\n    }\n    resetErrors2() {\n        this.setError2(null);\n        this.state.parseError2 = null;\n    }\n    setError2(error2) {\n        this.state.error2 = error2;\n    }\n    getErrorMessage2() {\n        if (this.state.parseError2) {\n            return this.state.parseError2;\n        }\n        return this.state.error2;\n    }\n    isValid2() {\n        return this.state.parseError2 === null && this.state.error2 === null;\n    }\n    refill() {\n        // console.log('RowFormDateTimeFieldController.refill');\n        if (!this.widget2) return;\n        super.refill();\n        this.widget2.setValue(this.getValueForTime());\n        this.resetErrors2();\n        this.refreshChanged();\n    }\n    isParseError() {\n        return super.isParseError() || this.isParseError2();\n    }\n    isValid() {\n        return super.isValid() && this.isValid2();\n    }\n    getErrorMessage() {\n        if (super.getErrorMessage() === null && this.getErrorMessage2() === null) return null;\n        return [\n            ...(super.getErrorMessage() ? [super.getErrorMessage()] : []),\n            ...(this.getErrorMessage2() ? [this.getErrorMessage2()] : [])\n        ].join(', ');\n    }\n}\nwindow.QForms.RowFormDateTimeFieldController = RowFormDateTimeFieldController;\n","class RowFormFileFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormFileFieldView;\n    }\n}\nwindow.QForms.RowFormFileFieldController = RowFormFileFieldController;\n","class RowFormImageFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormImageFieldView;\n    }\n}\nwindow.QForms.RowFormImageFieldController = RowFormImageFieldController;\n","class RowFormLinkFieldController extends  RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('RowFormLinkFieldController.onClick', e);\n        this.emit({source: this});\n    }\n}\nwindow.QForms.RowFormLinkFieldController = RowFormLinkFieldController;\n","class RowFormPasswordFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPasswordFieldView;\n    }\n}\nwindow.QForms.RowFormPasswordFieldController = RowFormPasswordFieldController;\n","class RowFormPhoneFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPhoneFieldView;\n    }\n}\nwindow.QForms.RowFormPhoneFieldController = RowFormPhoneFieldController;\n","class RowFormTextAreaFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextAreaFieldView;\n    }\n}\nwindow.QForms.RowFormTextAreaFieldController = RowFormTextAreaFieldController;\n","class RowFormTextBoxFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextBoxFieldView;\n    }\n}\nwindow.QForms.RowFormTextBoxFieldController = RowFormTextBoxFieldController;\n","class RowFormTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.defaultValue = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error('wrong time');\n        this.setValue(widgetValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue(defaultValue) {\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24*60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n    }\n    getPlaceholder() {\n        // console.log('CarReservefromTimeController.getPlaceholder', this.defaultValue);\n        if (this.defaultValue !== null) return TimeBox.getStringValue(this.defaultValue);\n        return super.getPlaceholder();\n    }\n}\nwindow.QForms.RowFormTimeFieldController = RowFormTimeFieldController;\n","class TableFormFieldController extends FieldController {\n    getValueForWidget(row) {\n        // console.log('TableFormFieldController.getValueForWidget');\n        return this.valueToString(this.model.getValue(row));\n    }\n}\nwindow.QForms.TableFormFieldController = TableFormFieldController;\n","class TableFormCheckBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormCheckBoxFieldView;\n    }\n    getValueForWidget(row) {\n        return this.model.getValue(row);\n    }\n}\nwindow.QForms.TableFormCheckBoxFieldController = TableFormCheckBoxFieldController;\n","class TableFormComboBoxFieldController extends TableFormFieldController {\n\n    init() {\n        super.init();\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.on('insert', this.onListUpdate);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListUpdate);\n    }\n\n    deinit() {\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.off('insert', this.onListUpdate);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListUpdate);\n        super.deinit();\n    }\n\n    getViewClass() {\n        return super.getViewClass() || TableFormComboBoxFieldView;\n    }\n\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        const rawValue = this.model.valueToRaw(value);\n        if (rawValue === undefined || rawValue === 'null') return '';\n        const cbRow = this.model.findRowByRawValue(rawValue);\n        if (cbRow) {\n            return this.valueToString(this.model.getDisplayValue(cbRow));\n        }\n        return `[no row for id: ${rawValue}]`;\n    }\n\n    onListUpdate = async e => {\n        // console.log('TableFormComboBoxFieldController.onListUpdate', this.getModel().getFullName());\n        this.getForm().invalidate();\n        await this.getForm().rerender();\n    }\n\n}\nwindow.QForms.TableFormComboBoxFieldController = TableFormComboBoxFieldController;\n","class TableFormDateFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateFieldController = TableFormDateFieldController;\n","class TableFormDateTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateTimeFieldController = TableFormDateTimeFieldController;\n","class TableFormLinkFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('TableFormLinkFieldController.onClick', e);\n        e.preventDefault();\n        this.emit('click', {source: this});\n    }\n}\nwindow.QForms.TableFormLinkFieldController = TableFormLinkFieldController;\n","class TableFormPhoneFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormPhoneFieldView;\n    }\n}\n","class TableFormTextAreaFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextAreaFieldView;\n    }\n}\nwindow.QForms.TableFormTextAreaFieldController = TableFormTextAreaFieldController;\n","class TableFormTextBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextBoxFieldView;\n    }\n    /*beginEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'text';\n        view.firstElementChild.contentEditable = true;\n        const range = document.createRange();\n        range.selectNodeContents(view.firstElementChild);\n        window.getSelection().removeAllRanges();\n        window.getSelection().addRange(range);\n        view.firstElementChild.focus();\n        return true;\n    }*/\n\n    /*endEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'none';\n        view.firstElementChild.contentEditable = false;\n    }*/\n}\nwindow.QForms.TableFormTextBoxFieldController = TableFormTextBoxFieldController;\n","class TableFormTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        return TimeBox.getStringValue(value);\n    }\n}\nwindow.QForms.TableFormTimeFieldController = TableFormTimeFieldController;\n","class FormController extends ModelController {\n    static create(model, parent) {\n        // console.log('FormController.create', model.getFullName());\n        const page = model.getPage();\n        const customClassName = `${page.getName()}${model.getName()}FormController`;\n        const CustomClass = FrontHostApp.getClassByName(customClassName);\n        const GeneralClass = FrontHostApp.getClassByName(`${model.getClassName()}Controller`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    constructor(model, parent) {\n        super(model, parent);\n        this.fields = {};\n    }\n    init() {\n        for (const field of this.model.fields) {\n            const ctrl = this.fields[field.getName()] = FieldController.create(field, this);\n            ctrl.init();\n        }\n    }\n    deinit() {\n        // console.log('FormController.deinit:', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].deinit();\n        }\n        super.deinit();\n    }\n    isValid() {\n        return true;\n    }\n    async openPage(options) {\n        return await this.getPage().openPage(options);\n    }\n    getPage() {\n        return this.parent;\n    }\n    isChanged() {\n        return false;\n    }\n    async onFieldChange(e) {\n        // console.log('FormController.onFieldChange', this.model.getFullName());\n        await this.getPage().onFormChange(e);\n    }\n    getUpdated() {\n        return this.state.updated;\n    }\n    invalidate() {\n        this.state.updated = Date.now();\n    }\n    async onActionClick(name, row) {\n        console.log('FormController.onActionClick', name, row);\n    }\n    getField(name) {\n        return this.fields[name];\n    }\n    getApp() {\n        return this.parent.parent;\n    }\n    getSelectedRowKey() {\n        return null;\n    }\n    isAutoFocus() {\n        for (const name in this.fields) {\n            if (this.fields[name].isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nwindow.QForms.FormController = FormController;\n","class RowFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now(),\n            mode   : 'edit',\n            hasNew : false,\n            changed: false,\n            valid  : true\n        };\n    }\n\n    init() {\n        super.init();\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('insert' , this.onModelInsert);\n        this.model.on('update' , this.onModelUpdate);\n        if (this.model.getDefaultDataSource().getClassName() === 'SqlDataSource') {\n            this.state.mode = 'view';\n        }\n        this.calcState();\n        if (this.state.hasNew) {\n            this.state.mode = 'edit';\n        }\n    }\n\n    deinit() {\n        // console.log('RowFormController.deinit', this.model.getFullName());\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('insert' , this.onModelInsert);\n        this.model.off('update' , this.onModelUpdate);\n        super.deinit();\n    }\n\n    calcState() {\n        this.state.hasNew  = this.model.hasNew();\n        this.state.changed = this.isChanged();\n        this.state.valid   = this.isValid();\n        // console.log('hasNew:', hasNew);\n        // console.log('changed:', changed);\n        // console.log('valid:', valid);\n    }\n\n    refill() {\n        console.log('RowFormController.refill', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].refill();\n        }\n    }\n\n    onModelRefresh = async e => {\n        console.log('RowFormController.onModelRefresh', this.model.getFullName());\n        if (!this.view) return;\n        this.refill();\n        this.invalidate();\n        this.rerender();\n    }\n\n    onModelInsert = async e => {\n        console.log('RowFormController.onModelInsert', this.model.getFullName());\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormInsert(e);\n    }\n\n    onModelUpdate = async e => {\n        console.log('RowFormController.onModelUpdate', this.model.getFullName(), e);\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormUpdate(e);\n    }\n\n    isValid() {\n        // console.log('RowFormController.isValid', this.model.getFullName());\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (!field.isValid()) return false;\n        }\n        return true;\n    }\n    validate() {\n        // console.log('RowFormController.validate', this.getModel().getFullName());\n        for (const name in this.fields) {\n            this.fields[name].validate();\n        }\n        this.invalidate();\n    }\n    clearFieldsError() {\n        for (const name in this.fields) {\n            this.fields[name].setError(null);\n        }\n    }\n    onSaveClick = async () => {\n        console.log('RowFormController.onSaveClick');\n        this.validate();\n        this.calcState();\n        if (this.isValid()) {\n            try {\n                this.getApp().getView().disableRerender();\n                await this.model.update();\n                this.state.mode = 'view';\n                console.log('form model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n                await this.getApp().getView().rerender();\n            }\n        } else {\n            console.error(`cannot update invalid row form: ${this.model.getFullName()}`);\n            await this.rerender();\n        }\n    }\n\n    onDiscardClick = () => {\n        console.log('RowFormController.onDiscardClick', this.model.getFullName());\n        const changedFields = [];\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row) || !field.isValid()) {\n                changedFields.push(name);\n            }\n        }\n        // console.log('changedFields:', changedFields);\n        this.model.discard(changedFields);\n\n        // refill changed fields\n        changedFields.forEach(name => {\n            this.fields[name].refill();\n        });\n\n        // ui\n        this.calcState();\n        this.state.mode = 'view';\n        this.rerender();\n\n        // event\n        this.parent.onFormDiscard(this);\n    }\n\n    onRefreshClick = async () => {\n        // console.log('RowFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n    }\n\n    isChanged() {\n        // console.log('RowFormController.isChanged', this.model.getFullName());\n        if (this.model.isChanged()) return true;\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row)) return true;\n        }\n        return false;\n    }\n\n    async onFieldChange(e) {\n        // console.log('RowFormController.onFieldChange', this.model.getFullName());\n        this.calcState();\n        this.invalidate();\n        await super.onFieldChange(e);\n    }\n\n    onEditClick = e => {\n        console.log('RowFormController.onEditClick');\n        this.state.mode = 'edit';\n        this.rerender();\n    }\n    onCancelClick = e => {\n        console.log('RowFormController.onCancelClick');\n        this.state.mode = 'view';\n        this.rerender();\n    }\n    getViewClass() {\n        // console.log('RowFormController.getViewClass', this.model.getFullName());\n        return super.getViewClass() || RowFormView;\n    }\n    getActiveRow(withChanges) {\n        return this.model.getRow(withChanges);\n    }\n    getMode() {\n        return this.state.mode;\n    }\n    isActionEnabled(name) {\n        return this.isViewMode();\n    }\n    isEditMode() {\n        return this.getMode() === 'edit';\n    }\n    isViewMode() {\n        return this.getMode() === 'view';\n    }\n}\nwindow.QForms.RowFormController = RowFormController;\n","class TableFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now()\n        };\n        this.grid = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || TableFormView;\n    }\n    init() {\n        super.init();\n        // this.parent.on('hide', this.onHidePage);\n        // this.parent.on('show', this.onShowPage);\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('update' , this.onModelUpdate);\n        this.model.on('delete' , this.onModelDelete);\n        this.model.on('insert' , this.onModelInsert);\n    }\n    deinit() {\n        // this.parent.off('hide', this.onHidePage);\n        // this.parent.off('show', this.onShowPage);\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('update' , this.onModelUpdate);\n        this.model.off('delete' , this.onModelDelete);\n        this.model.off('insert' , this.onModelInsert);\n        super.deinit();\n    }\n    onGridCreate = grid => {\n        this.grid = grid;\n    }\n    onNewClick = async e => {\n        console.log('TableFormController.onNewClick');\n        await this.new();\n    }\n    onRefreshClick = async e => {\n        console.log('TableFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n        // console.error('refresh error handler:', err.message);\n        // alert(err.message);\n    }\n    onDeleteClick = async e => {\n        console.log('TableFormController.onDeleteClick', this.model.getFullName(), this.grid.getActiveRowKey());\n        const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n        if (result) {\n            await this.model.getDefaultDataSource().delete(this.grid.getActiveRowKey());\n        }\n    }\n    onGridCellDblClick = async (row, key) => {\n        // console.log('TableFormController.onGridCellDblClick', row);\n        // const bodyCell = e.bodyCell;\n        // const row = bodyCell.bodyRow.dbRow;\n        // console.log('row:', row);\n        // const key = this.model.getDefaultDataSource().getRowKey(row);\n        // console.log('key:', key);\n        switch (this.model.getAttr('editMethod')) {\n            // case 'table':\n            //     this.grid.gridColumns[bodyCell.qFieldName].beginEdit(bodyCell);\n            // break;\n            case 'form':\n                if (this.getPage().getModel().getOptions().selectMode) {\n                    await this.getPage().selectRow(key);\n                } else {\n                    await this.edit(key);\n                }\n            break;\n        }\n    }\n    onGridLinkClick = async key => {\n        console.log('TableFormController.onGridLinkClick', key);\n        await this.edit(key);\n    }\n    onGridDeleteKeyDown = async (row, key) => {\n        console.log('TableFormController.onGridDeleteKeyDown', row, key);\n        if (this.getModel().getAttr('deleteRowMode') !== 'disabled') {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n            if (result) {\n                await this.model.getDefaultDataSource().delete(key);\n            }\n        }\n    }\n    /*onHidePage = async () => {\n        this.grid.saveScroll();\n    }*/\n    /*onShowPage = async () => {\n        console.log('TableFormController.onShowPage', this.model.getFullName());\n        if (!this.grid.isHidden()) {\n            this.grid.restoreScroll();\n            this.grid.focus();\n            // console.log('document.activeElement:', document.activeElement);\n        }\n    }*/\n    async new() {\n        if (this.model.getAttr('newRowMode') === 'oneclick') {\n            const row = {};\n            this.model.fillDefaultValues(row);\n            await this.model.getDefaultDataSource().insert(row);\n        } else if (this.model.getAttr('newRowMode') === 'editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemEditPage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemCreatePage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemCreatePage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        }\n    }\n    async edit(key) {\n        // console.log('TableForm.edit', this.model.getFullName(), key);\n        if (!this.model.getAttr('itemEditPage')) {\n            throw new Error(`${this.model.getFullName()}: itemEditPage is empty`);\n        }\n        try {\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } catch (err) {\n            // console.error(`${this.model.getFullName()}: edit form error handler:`, err);\n            // alert(`${this.model.getFullName()}: ${err.message}`);\n            err.message = `${this.model.getFullName()} edit: ${err.message}`;\n            throw err;\n        }\n    }\n    onModelRefresh = async e => {\n        console.log('TableFormController.onModelRefresh', this.model.getFullName(), e);\n        if (!this.view) return;\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelInsert = async e => {\n        console.log('TableFormController.onModelInsert', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid && e.source) {\n            for (const key of e.inserts) {\n                this.grid.setActiveRowKey(key);\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelUpdate = async e => {\n        console.log('TableFormController.onModelUpdate', this.model.getFullName(), e, this.view);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key in e.updates) {\n                if (this.grid.getActiveRowKey() === key) {\n                    const newKey = e.updates[key];\n                    if (key !== newKey) {\n                        this.grid.setActiveRowKey(newKey);\n                    }\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelDelete = async e => {\n        console.log('TableFormController.onModelDelete', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key of e.deletes) {\n                if (this.grid.getActiveRowKey() === key) {\n                    this.grid.setActiveRowKey(null);\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n\n    onGridSelectionChange = async key => {\n        // console.log('TableFormController.onGridSelectionChange', key);\n        this.invalidate();\n        await this.getPage().rerender();\n    }\n    getActiveRow() {\n        const key = this.grid.getActiveRowKey();\n        if (!key) throw new Error(`${this.model.getFullName()}: no active row key`);\n        return this.model.getDefaultDataSource().getRow(key);\n    }\n    isRowSelected = () => {\n        // console.log('TableFormController.isRowSelected');\n        return !!this.grid && !!this.grid.getActiveRowKey();\n    }\n    onFrameChanged = async value => {\n        // console.log('TableFormController.onFrameChanged', parseInt(value));\n        const frame = parseInt(value);\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n    onNextClick = async () => {\n        console.log('TableFormController.onNextClick');\n        const frame = this.model.getDefaultDataSource().getFrame() + 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n\n    onPreviousClick = async () => {\n        console.log('TableFormController.onPreviousClick');\n        const frame = this.model.getDefaultDataSource().getFrame() - 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        this.rerender();\n    }\n    canPrev() {\n        return this.model.getDefaultDataSource().getFrame() > 1;\n    }\n    canNext() {\n        const ds = this.model.getDefaultDataSource();\n        return ds.getFrame() < ds.getFramesCount();\n    }\n    getSelectedRowKey() {\n        return this.grid ? this.grid.getActiveRowKey() : null;\n    }\n    isActionEnabled(name) {\n        return this.isRowSelected();\n    }\n}\nwindow.QForms.TableFormController = TableFormController;\n","class PageController extends ModelController {\n    constructor(model, parent, id) {\n        //console.log('PageController.constructor', model);\n        super(model, parent);\n        if (!id) throw new Error('no id');\n        this.id = id;\n        this.forms = [];\n    }\n\n    static create(model, parent, id, options) {\n        // console.log('PageController.create', model.getName());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}PageController`);\n        const Class = CustomClass ? CustomClass : PageController;\n        return new Class(model, parent, id, options);\n    }\n\n    init() {\n        for (const form of this.model.forms) {\n            const ctrl = FormController.create(form, this);\n            ctrl.init();\n            this.forms.push(ctrl);\n        }\n    }\n\n    deinit() {\n        console.log('PageController.deinit: ' + this.model.getFullName());\n        for (const form of this.forms) {\n            form.deinit();\n        }\n        super.deinit();\n    }\n\n    onSaveAndCloseClick = async () => {\n        console.log('PageController.onSaveAndCloseClick');\n        this.validate();\n        if (this.isValid()) {\n            try {\n                this.getApp().getView().disableRerender();\n                await this.getModel().update();\n                console.log('page model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n            }\n            await this.getApp().closePage(this);\n            if (this.getModel().getOptions().onClose) {\n                this.getModel().getOptions().onClose();\n            }\n        } else {\n            await this.rerender();\n        }\n    }\n\n    onClosePageClick = async e => {\n        console.log('PageController.onClosePageClick', this.getModel().getFullName());\n        await this.close();\n    }\n\n    onOpenPageClick = async e => {\n        const name = this.getModel().getName();\n        const key = this.getModel().getKey();\n        const link = this.createOpenInNewLink(name, key);\n        // console.log('link', link);\n        window.open(link, '_blank');\n    }\n    createOpenInNewLink(name, key) {\n        return PageController.createLink({\n            page: name,\n            ...DataSource.keyToParams(key)\n        });\n    }\n    async close() {\n        // console.log('PageController.close', this.model.getFullName());\n        const changed = this.isChanged();\n        // console.log('changed:', changed);\n        // const valid = this.isValid();\n        // console.log('valid:', valid);\n        if (this.model.hasRowFormWithDefaultSqlDataSource() && changed) {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure})\n            if (!result) return;\n        }\n        await this.getApp().closePage(this);\n        if (this.getModel().getOptions().onClose) {\n            this.getModel().getOptions().onClose();\n        }\n    }\n    validate() {\n        for (const form of this.forms) {\n            if (form instanceof RowFormController) {\n                form.validate();\n            }\n        }\n    }\n    isValid() {\n        // console.log('PageController.isValid', this.model.getFullName());\n        for (const form of this.forms) {\n            if (!form.isValid()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async onFormChange(e) {\n        // console.log('PageController.onFormChange', this.model.getFullName());\n        this.rerender();\n    }\n    onFormDiscard(formController) {\n        console.log('PageController.onFormDiscard', this.model.getFullName());\n        this.rerender();\n    }\n\n    onFormUpdate(e) {\n        console.log('PageController.onFormUpdate:', this.model.getFullName(), e);\n        this.rerender();\n    }\n\n    onFormInsert(e) {\n        console.log('PageController.onFormInsert:', this.model.getFullName());\n        // console.log('hasNew:', this.model.hasNew());\n        for (const form of this.forms) {\n            form.invalidate();\n        }\n        this.rerender();\n    }\n\n    async openPage(options) {\n        if (!options.params) {\n            options.params = {};\n        }\n        const params =  this.getModel().getParams();\n        for (const name in params) {\n            if (!options.params[name]) {\n                options.params[name] = params[name];\n            }\n        }\n        return await this.getApp().openPage(options);\n    }\n\n    isChanged() {\n        // console.log('PageController.isChanged', this.model.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged()) {\n                // console.log(`FORM CHANGED: ${form.model.getFullName()}`);\n                return true;\n            }\n        }\n        return false;\n    }\n    getApp() {\n        return this.parent;\n    }\n    getViewClass() {\n        return super.getViewClass() || PageView;\n    }\n    static createLink(params = null) {\n        // const query = window.location.search.split('?')[1];\n        // console.log('query:', query);\n        if (params) {\n            return [\n                window.location.pathname,\n                [\n                    // ...(query ? query.split('&') : []),\n                    ...(ApplicationController.isDebugMode() ? ['debug=1'] : []),\n                    ...Object.keys(params).map(name => `${name}=${encodeURI(params[name])}`)\n                ].join('&')\n            ].join('?');\n        }\n        return window.location.pathname;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.model.getName() === name);\n    }\n    async onActionClick(name) {\n        console.log('PageController.onActionClick', name);\n    }\n    onKeyDown = async e => {\n        // console.log('PageController.onKeyDown', this.getModel().getFullName(), e);\n        if (e.key === 'Escape') {\n            if (this.isModal()) {\n                await this.close();\n            }\n        }\n    }\n    getTitle() {\n        const model = this.getModel();\n        const key = model.getKey();\n        let keyPart;\n        if (key) {\n            const arr = JSON.parse(key);\n            if (arr.length === 1 && typeof arr[0] === 'number') {\n                keyPart = `#${arr[0]}`;\n            } else {\n                keyPart = `${key}`;\n            }\n        }\n        return [\n            model.getCaption(),\n            ...(ApplicationController.isDebugMode() ? [`(${this.getId()})`] : []),\n            ...(keyPart ? [keyPart] : [])\n        ].join(' ');\n    }\n    getSelectedRowKey() {\n        for (const form of this.forms) {\n            const selectedRowKey = form.getSelectedRowKey();\n            if (selectedRowKey) return selectedRowKey;\n        }\n        return null;\n    }\n    onSelectClick = async e => {\n        console.log('PageController.onSelectClick');\n        await this.selectRow(this.getSelectedRowKey());\n    }\n    onResetClick = async e => {\n        console.log('PageController.onResetClick');\n        await this.selectRow(null);\n    }\n    async selectRow(key) {\n        console.log('PageController.selectRow', key);\n        await this.close();\n        await this.getModel().getOptions().onSelect(key);\n    }\n    invalidate() {\n        this.forms.forEach(form => form.invalidate());\n    }\n    getId() {\n        return this.id;\n    }\n    isModal() {\n        return this.getModel().isModal();\n    }\n    isAutoFocus() {\n        for (const form of this.forms) {\n            if (form.isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nwindow.QForms.PageController = PageController;\n","class Model extends EventEmitter {\n    constructor(data, parent) {\n        if (!data.name) throw new Error(`${data.class} no name`);\n        super();\n        this.data     = data;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.getFullName()}: model already deinited`);\n        this.deinited = true;\n    }\n    static getAttr(data, name) {\n        return data[name];\n    }\n    static getCol(data, name) {\n        return data[name];\n    }\n    static getName(data) {\n        return Model.getAttr(data, 'name');\n    }\n    static getClassName(data) {\n        return Model.getAttr(data, 'class');\n    }\n    isAttr(name) {\n        // return this.data[name] !== undefined;\n        return this.data.hasOwnProperty(name);\n    }\n    getAttr(name) {\n        return this.data[name];\n    }\n    getCol(name) {\n        return this.data[name];\n    }\n    getClassName() {\n        return this.getAttr('class');\n    }\n    getName() {\n        return this.getAttr('name');\n    }\n    getFullName() {\n        if (this.parent) {\n            return `${this.parent.getFullName()}.${this.getName()}`;\n        }\n        return this.getName();\n    }\n    getCaption() {\n        return this.getAttr('caption');\n    }\n    getDataSource(name) {\n        return this.dataSources.find(dataSource => dataSource.getName() === name);\n    }\n    createDataSources() {\n        for (const data of this.data.dataSources) {\n            try {\n                const Class = FrontHostApp.getClassByName(data.class);\n                const dataSource = new Class(data, this);\n                dataSource.init();\n                this.dataSources.push(dataSource);\n            } catch (err) {\n                err.message = `${this.getFullName()}.${data.name}: ${err.message}`;\n                throw err;\n            }\n        }\n    }\n    deinitDataSources() {\n        for (const dataSource of this.dataSources) {\n            dataSource.deinit();\n        }\n    }\n    hasActions() {\n        return this.data.actions.length > 0;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getData() {\n        return this.data;\n    }\n}\nwindow.QForms.Model = Model;\n","class Application extends Model {\n    constructor(data) {\n        super(data);\n        this.databases   = [];\n        this.dataSources = [];\n    }\n\n    init() {\n        // console.log('Application.init');\n        if (!this.data.theme) throw new Error('no theme attr');\n\n        // databases\n        for (const data of this.data.databases) {\n            const database = new Database(data, this);\n            database.init();\n            this.addDatabase(database);\n        }\n\n        // data sources\n        this.createDataSources();\n    }\n\n    deinit() {\n        this.deinitDataSources();\n        // TODO: add deinit on opened pages\n        super.deinit();\n    }\n\n    addDatabase(database) {\n        this.databases.push(database);\n    }\n\n    async logout() {\n        const data = await this.request({\n            'action': 'logout'\n        });\n        this.emit('logout', {source: this});\n    }\n\n    async request(options) {\n        // console.warn('Application.request', data);\n        const start = Date.now();\n        const [headers, body] = await FrontHostApp.doHttpRequest2(options);\n        if (!headers['qforms-platform-version']) throw new Error('no qforms-platform-version header');\n        if (!headers['qforms-app-version']) throw new Error('no qforms-app-version header');\n        this.emit('request', {\n            time: Date.now() - start,\n            remotePlatformVersion: headers['qforms-platform-version'],\n            remoteAppVersion: headers['qforms-app-version']\n        });\n        return body;\n    }\n\n    getDatabase(name) {\n        // console.log('Application.getDatabase', name);\n        const database = this.databases.find(database => database.getName() === name);\n        if (!database) throw new Error(`no database: ${name}`);\n        return database;\n    }\n\n    getText() {\n        return this.data.text;\n    }\n    getUser() {\n        return this.data.user;\n    }\n    getDomain() {\n        return this.data.domain;\n    }\n    getVirtualPath() {\n        return this.data.virtualPath;\n    }\n    async rpc(name, params) {\n        console.log('Application.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.request({\n            uuid  : this.getAttr('uuid'),\n            action: 'rpc',\n            name  : name,\n            params: params\n        });\n        return result;\n    }\n    emitResult(result, source = null) {\n        console.log('Application.emitResult', result, source);\n        const promises = [];\n        for (const database in result) {\n            promises.push(...this.getDatabase(database).emitResult(result[database], source));\n        }\n        // console.log('promises:', promises);\n        return Promise.allSettled(promises);\n    }\n    getNodeEnv() {\n        return this.data.nodeEnv;\n    }\n}\nwindow.QForms.Application = Application;\n","class Column  extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        if (!this.getAttr('type')) throw new Error(`column ${this.getFullName()}: no type`);\n        if (!['string', 'number', 'boolean', 'object', 'date'].includes(this.getAttr('type'))) {\n            throw new Error(`${this.getFullName()}: wrong column type: ${this.getAttr('type')}`);\n        }\n    }\n    init() {\n        // console.log('Column.init', this.getFullName());\n    }\n    getType() {\n        return this.getAttr('type');\n    }\n}\nwindow.QForms.Column = Column;\n","class DataSource extends Model {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.rows      = null;\n        this.rowsByKey = null;\t\t\t\t\t\t// for row search by key\n        this.news      = [];                        // new rows\n        this.changes   = new Map();\n    }\n\n    init() {\n        // console.log('DataSource.init', this.getFullName(), this.getClassName());\n        this.setRows(this.data.rows);\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.on('insert' , this.onTableInsert);\n            table.on('update' , this.onTableUpdate);\n            table.on('delete' , this.onTableDelete);\n            table.on('refresh', this.onTableRefresh);\n        }\n    }\n\n    deinit() {\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.off('insert' , this.onTableInsert);\n            table.off('update' , this.onTableUpdate);\n            table.off('delete' , this.onTableDelete);\n            table.off('refresh', this.onTableRefresh);\n        }\n        super.deinit();\n    }\n\n    setRows(rows) {\n        this.rows = rows;\n        this.fillRowsByKey();\n    }\n\n    addRow(row) {\n        this.rows.push(row);\n        const key = this.getRowKey(row);\n        this.rowsByKey[key] = row;\n    }\n\n    addRows(rows) {\n        for (let i = 0; i < rows.length; i++) {\n            this.rows.push(rows[i]);\n        }\n        this.fillRowsByKey();\n    }\n\n    getRowsLength() {\n        return this.rows.length;\n    }\n\n    fillRowsByKey() {\n        // console.log('DataSource.fillRowsByKey', this.getFullName())\n        this.rowsByKey = {};\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            const key = this.getRowKey(row);\n            this.rowsByKey[key] = row;\n        }\n        // console.log('this.rowsByKey:', this.getFullName(), this.rowsByKey);\n    }\n\n    // deinit() {\n    //     console.log('DataSource.deinit', this.getFullName());\n    //     super.deinit();\n    // }\n\n    getType(column) {\n        // console.log('DataSource.getType', this.getClassName(), column);\n        throw new Error('DataSource column type not implemented');\n    }\n\n    discardRowColumn(row, column) {\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            delete this.changes.get(row)[column];\n        }\n    }\n\n    changeRowColumn(row, column, newValue) {\n        if (!this.changes.has(row)) this.changes.set(row, {});\n        this.changes.get(row)[column] = newValue;\n    }\n\n    setValue(row, column, value) {\n        // console.log('DataSource.setValue', this.getFullName(), column, value, typeof value);\n        if (value === undefined) throw new Error(`${this.getFullName()}: undefined is wrong value for data source`);\n        if (typeof value === 'object' && value !== null) {\n            throw new Error(`setValue: ${this.getFullName()}.${column}: object must be in JSON format`);\n        }\n        if (row[column] !== value) {\n            this.changeRowColumn(row, column, value);\n            if (row[column] === undefined && value === null) {  // workaround for new rows\n                this.discardRowColumn(row, column);\n            }\n        } else {\n            this.discardRowColumn(row, column);\n        }\n        if (this.changes.has(row) && !Object.keys(this.changes.get(row)).length) this.changes.delete(row);\n        // console.log('changes:', this.changes);\n    }\n\n    isChanged() {\n        // console.log('DataSource.isChanged', this.getFullName(), this.changes.size);\n        return !!this.changes.size;\n    }\n\n    hasNew() {\n        return !!this.news.length;\n    }\n\n    isRowColumnChanged(row, column) {\n        // console.log('DataSource.isRowColumnChanged', this.getFullName());\n        return row[column] !== this.getValue(row, column);\n    }\n\n    getValue(row, column) {\n        // console.log('DataSource.getValue', column);\n        let value;\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            value = this.changes.get(row)[column];\n        } else {\n            value = row[column];\n        }\n        if (value !== undefined && typeof value !== 'string') {\n            throw new Error(`getValue: ${this.getFullName()}.${column}: object must be in JSON format, value: ${value}`);\n        }\n        // console.log('DataSource.getValue:', value);\n        return value;\n    }\n\n    getKeyValues(row) {\n        return this.data.keyColumns.reduce((key, column) => {\n            key[column] = JSON.parse(row[column]);\n            return key;\n        }, {});\n    }\n\n    getRowKey(row) {\n        // console.log('DataSource.getRowKey', row);\n        const arr = [];\n        for (const column of this.data.keyColumns) {\n            if (row[column] === undefined) return null;\n            if (row[column] === null) throw new Error('wrong value null for data source value');\n            try {\n                const value = JSON.parse(row[column]);\n                arr.push(value);\n            } catch (err) {\n                console.log('getRowKey: cannot parse: ', row[column]);\n                throw err;\n            }\n        }\n        return JSON.stringify(arr);\n    }\n\n    removeRow(key) {\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key} to remove`);\n        const i = this.rows.indexOf(row);\n        if (i === -1) throw new Error(`${this.getFullName()}: no row with i ${i} to remove`);\n        this.rows.splice(i, 1);\n        delete this.rowsByKey[key];\n    }\n\n    newRow(row) {\n        console.log('DataSource.newRow', this.getFullName(), row);\n        if (this.rows.length > 0) {\n            throw new Error('rows can be added to empty data sources only in new mode');\n        }\n        this.news.push(row);\n    }\n\n    getSingleRow(withChanges = false) {\n        if (this.news[0]) return this.news[0];\n        const row = this.rows[0];\n        if (!row) throw new Error('no single row');\n        if (withChanges) return this.getRowWithChanges(row);\n        return row;\n    }\n\n    getForm() {\n        return this.parent instanceof Form ? this.parent : null;\n    }\n\n    getPage() {\n        if (this.parent instanceof Page) return this.parent;\n        if (this.parent instanceof Form) return this.parent.getPage();\n        return null;\n    }\n\n    getApp() {\n        if (this.parent instanceof Application) return this.parent;\n        return this.parent.getApp();\n    }\n\n    /*getNamespace() {\n        if (this.parent instanceof Form) {\n            return this.parent.getPage().getName() + '.' + this.parent.getName() + '.' + this.getName();\n        }\n        if (this.parent instanceof Page) {\n            return this.parent.getName() + '.' + this.getName();\n        }\n        return this.getName();\n    }*/\n\n    getRow(key) {\n        return this.rowsByKey[key] || null;\n    }\n\n    /*getRowByKey(key) {\n        return this.rowsByKey[key] || null;\n    }*/\n\n    getRows() {\n        return this.rows;\n    }\n\n    getRowByIndex(i) {\n        return this.rows[i];\n    }\n\n    discard() {\n        console.log('DataSource.discard', this.getFullName());\n        if (!this.isChanged()) throw new Error(`no changes in data source ${this.getFullName()}`);\n        this.changes.clear();\n    }\n\n    static keyToParams(key, paramName = 'key') {\n        if (typeof key !== 'string') throw new Error('key not string');\n        const params = {};\n        const arr = JSON.parse(key);\n        if (arr.length === 1) {\n            params[paramName] = arr[0];\n        } else  if (arr.length > 1) {\n            for (let i = 0; i < arr.length; i++) {\n                params[`${paramName}${i + 1}`] = arr[i];\n            }\n        } else {\n            throw new Error(`invalid key: ${key}`);\n        }\n        return params;\n    }\n\n    getChangesByKey() {\n        const changes = {};\n        for (const row of this.changes.keys()) {\n            changes[this.getRowKey(row)] = this.changes.get(row);\n        }\n        return changes;\n    }\n\n    getRowWithChanges(row) {\n        if (this.changes.has(row)) {\n            return {...row, ...this.changes.get(row)};\n        }\n        return row;\n    }\n\n    hasNewRows() {\n        return this.news.length > 0;\n    }\n\n    static copyNewValues(row, newValues) {\n        for (const name in newValues) {\n            row[name] = newValues[name];\n        }\n    }\n\n    updateRow(key, newValues) {\n        console.log('DataSource.updateRow', this.getFullName(), key, newValues);\n        if (!key) throw new Error('no key');\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key}`);\n        const newKey = this.getRowKey(newValues);\n        DataSource.copyNewValues(row, newValues);// copy new values to original row object\n        if (key !== newKey) {\n            delete this.rowsByKey[key];\n            this.rowsByKey[newKey] = row;\n        }\n        // console.log(`key: ${key} to ${newKey}`);\n        // console.log('this.rowsByKey:', this.rowsByKey);\n        // console.log('this.data.rows:', this.data.rows);\n    }\n\n    getTable() {\n        if (!this.getAttr('table')) throw new Error(`${this.getFullName()}: table attr empty`);\n        return this.getDatabase().getTable(this.getAttr('table'));\n    }\n\n    getDatabase() {\n        // console.log('DataSource.getDatabase', this.getFullName(), this.getAttr('database'));\n        if (!this.getAttr('database')) throw new Error(`${this.getFullName()}: database attr empty`);\n        return this.getApp().getDatabase(this.getAttr('database'));\n    }\n\n    getType(columnName) {\n        // console.log('DataSource.getType', columnName);\n        const type = this.getTable().getColumn(columnName).getType();\n        // console.log('type:', type);\n        return type;\n    }\n\n    async insert() {\n        console.log('DataSource.insert', this.news);\n        if (!this.news.length) throw new Error('no new rows to insert');\n        const inserts = [];\n        for (const row of this.news) {\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            DataSource.copyNewValues(row, newValues);\n            // console.log('row:', row);\n            const key = this.getRowKey(row);\n            if (!key) throw new Error('invalid insert row, no key');\n            // console.log('key:', key);\n            inserts.push(key);\n        }\n        this.changes.clear();\n        for (const row of this.news) {\n            this.addRow(row);\n        }\n        this.news = [];\n        console.log('rows:', this.getRows());\n        console.log('inserts:', inserts);\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert({source: this, inserts});\n        }\n        this.emit('insert', {source: this, inserts});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {insert: inserts}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async delete(key) {\n        console.log('DataSource.delete', key);\n        if (!key) throw new Error('no key');\n        this.removeRow(key);\n\n        // events\n        const deletes = [key];\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete({source: this, deletes});\n        }\n        this.emit('delete', {source: this, deletes});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {delete: deletes}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async update() {\n        console.log('DataSource.update', this.getFullName());\n        if (this.news.length) {\n            await this.insert();\n            return;\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n        const changes = this.getChangesByKey();\n        // console.log('changes:', changes);\n\n        // apply changes to rows\n        const updates = {};\n        for (const key in changes) {\n            // console.log('key:', key);\n            const row = this.getRow(key);\n            // console.log('row:', row);\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            const newKey = this.getRowKey(newValues);\n            // console.log('newKey:', newKey);\n            this.updateRow(key, newValues);\n            updates[key] = newKey;\n        }\n        this.changes.clear();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate({source: this, updates});\n        }\n        this.emit('update', {source: this, updates});\n\n        const database = this.getAttr('database');\n        const table    = this.getAttr('table');\n        if (database && table) {\n            const reuslt = {[database]: {\n                    [table]: {\n                        update: updates\n                    }\n                }};\n            await this.getApp().emitResult(reuslt, this);\n            return reuslt;\n        }\n        return null;\n    }\n\n    onTableInsert = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableInsert', this.getFullName(), e);\n        if (!e.inserts.length) throw new Error(`${this.getFullName()}: no inserts`);\n\n        for (const key of e.inserts) {\n            if (this.getRow(key)) {\n                console.log('rows:', this.rows);\n                console.log('rowsByKey:', this.rowsByKey);\n                throw new Error(`${this.getFullName()}: row already in this data source: ${key}`);\n            }\n            const newValues = e.source.getRow(key);\n            const newRow = {};\n            DataSource.copyNewValues(newRow, newValues);\n            // console.log('newRow:', newRow);\n            this.addRow(newRow);\n        }\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableUpdate = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableUpdate', this.getFullName(), e);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n        for (const key in e.updates) {\n            if (this.getRow(key)) {\n                const newKey = e.updates[key];\n                const sourceRow = e.source.getRow(newKey);\n                this.updateRow(key, sourceRow);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableDelete = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableDelete', this.getFullName(), e);\n        if (!e.deletes.length) throw new Error(`${this.getFullName()}: no deletes`);\n        for (const key of e.deletes) {\n            if (this.getRow(key)) {\n                this.removeRow(key);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        throw new Error('DataSource.onTableRefresh: not implemented');\n    }\n\n    isSurrogate() {\n        return this.isAttr('database');\n    }\n\n    moveRow(row, offset) {\n        console.log('DataSource.moveRow');\n        Helper.moveArrItem(this.rows, row, offset);\n\n        // refresh event\n        const event = {source: this};\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh(event);\n        }\n        this.emit('refresh', event);\n    }\n\n}\nwindow.QForms.DataSource = DataSource;\n","class SqlDataSource extends DataSource {\n    constructor(data, parent) {\n        super(data, parent);\n        this.frame  = 1;\n        this.count  = data.count !== undefined ? data.count : null;\n        this.lastFrame = 1;\n    }\n\n    /*init() {\n        super.init();\n    }*/\n\n    /*deinit() {\n        super.deinit();\n    }*/\n\n    async insert(row) {\n        console.log('SqlDataSource.insert', row);\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to insert');\n\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: 'insert',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            row   : this.getRowWithChanges(row),\n        });\n\n        // key & values\n        const [key] = Object.keys(result[database][table].insertEx);\n        if (!key) throw new Error('no inserted row key');\n        const values = result[database][table].insertEx[key];\n        for (const column in values) {\n            row[column] = values[column];\n        }\n        // console.log('key:', key);\n        // console.log('row:', row);\n\n        // clear news & changes\n        this.news.splice(this.news.indexOf(row), 1);\n        // console.log('this.news:', this.news);\n        this.changes.clear();\n\n        // add new row to rows\n        this.addRow(row);\n\n        // events\n        const event = {source : this, inserts: result[database][table].insert};\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(event);\n        }\n        this.emit('insert', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    async update() {\n        console.log('SqlDataSource.update', this.getFullName());\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to update');\n        if (this.news[0]) {\n            return await this.insert(this.news[0]);\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n\n        // specific to SqlDataSource\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action : 'update',\n            page   : this.getForm().getPage().getName(),\n            form   : this.getForm().getName(),\n            changes: this.getChangesByKey(),\n        });\n\n\n        const [key] = Object.keys(result[database][table].updateEx);\n        if (!key) throw new Error('no updated row');\n        const newValues = result[database][table].updateEx[key];\n        // const newKey = this.getRowKey(newValues);\n\n        this.changes.clear();\n        this.updateRow(key, newValues);\n\n        // events\n        const event = {source: this, updates: result[database][table].update};\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(event);\n        }\n        this.emit('update', event);\n        await this.getApp().emitResult(result, this);\n        return result;\n    }\n\n    async delete(key) {\n        console.log('SqlDataSource.delete:', this.getFullName(), key);\n        if (!key) throw new Error('no key');\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (!table) {\n            throw new Error(`no table in SqlDataSource: ${this.getFullName()}`);\n        }\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: '_delete',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            params: {key},\n        });\n        await this.refill();\n\n        // events\n        const event = {source: this, deletes: result[database][table].delete};\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(event);\n        }\n        this.emit('delete', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    onTableUpdate = async e => {\n        console.log('SqlDataSource.onTableUpdate', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        // console.log('updates:', e.updates);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableInsert = async (e) => {\n        console.log('SqlDataSource.onTableInsert', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableInsert`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableDelete = async (e) => {\n        console.log('SqlDataSource.onTableDelete', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self delete', this.getFullName());\n            return;\n        }\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        console.log('SqlDataSource.onTableRefresh', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source) throw new Error('refresh is foreign result so source must be null');\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('refresh', e);\n    }\n\n    getPageParams() {\n        const page = this.getPage();\n        return page ? page.getParams() : {};\n    }\n\n    async refresh() {\n        console.log('SqlDataSource.refresh', this.getFullName());\n        await this.refill();\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh({source: this});\n        }\n    }\n\n    async refill() {\n        if (this.isChanged()) throw new Error(`cannot refill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame : this.frame} : {});\n        this.count = data.count;\n        this.setRows(data.rows);\n        this.lastFrame = 1;\n    }\n\n    async fill(frame) {\n        if (this.isChanged()) throw new Error(`cannot fill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame} : {});\n        this.count = data.count;\n        this.addRows(data.rows);\n    }\n\n    async more() {\n        if (!this.hasMore()) throw new Error(`${this.getFullName()}: no more rows`);\n        this.lastFrame++;\n        await this.fill(this.lastFrame);\n    }\n\n    async select(params = {}) {\n        console.log('SqlDataSource.select', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action        : 'select',\n            page          : page ? page.getName()           : null,\n            form          : form ? form.getName()           : null,\n            ds            : this.getName(),\n            params        : {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!(data.rows instanceof Array)) throw new Error('rows must be array');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }\n\n    /*async selectSingle(params = {}) {\n        console.log('SqlDataSource.selectSingle', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action: 'selectSingle',\n            page  : page ? page.getName()           : null,\n            form  : form ? form.getName()           : null,\n            ds    : this.getName(),\n            params: {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!data.row) throw new Error('selectSingle must return row');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }*/\n\n    getFramesCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        if (this.count === 0) return 1;\n        if (this.getLimit()) return Math.ceil(this.count / this.getLimit());\n        return 1;\n    }\n    getLimit() {\n        if (this.getAttr('limit')) return parseInt(this.getAttr('limit'));\n        return null;\n    }\n    getCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        return this.count;\n    }\n    getFrame() {\n        return this.frame;\n    }\n    getLastFrame() {\n        return this.lastFrame;\n    }\n    setFrame(frame) {\n        this.frame = frame;\n    }\n    hasMore() {\n        return this.lastFrame < this.getFramesCount();\n    }\n}\nwindow.QForms.SqlDataSource = SqlDataSource;\n","class Database extends Model {\n    constructor(...args) {\n        super(...args);\n        this.tables = [];\n    }\n\n    init() {\n        // console.log('Database.init', this.getName());\n        for (const data of this.data.tables) {\n            const table = new Table(data, this);\n            table.init();\n            this.addTable(table);\n        }\n    }\n\n    addTable(table) {\n        this.tables.push(table);\n    }\n\n    getTable(name) {\n        const table = this.tables.find(table => table.getName() === name);\n        if (!table) throw new Error(`${this.getFullName()}: no table with name: ${name}`);\n        return table;\n    }\n\n    emitResult(result, source = null) {\n        console.log('Database.emitResult');\n        const promises = [];\n        for (const table in result) {\n            promises.push(...this.getTable(table).emitResult(result[table], source));\n        }\n        return promises;\n    }\n}\nwindow.QForms.Database = Database;\n","class Field extends Model {\n    // constructor(data, parent) {\n    //     super(data, parent);\n    // }\n\n    init() {\n    }\n\n    replaceThis(value) {\n        return value.replace(/\\{([@\\w\\.]+)\\}/g, (text, name) => {\n            if (name.indexOf('.') === -1) return text;\n            let arr = name.split('.');\n            if (arr[0] === 'this') arr[0] = this.getPage().getName();\n            return `{${arr.join('.')}}`;\n        });\n    }\n\n    fillDefaultValue(row) {\n        // console.log('Field.fillDefaultValue', this.getFullName());\n        const column = this.getAttr('column');\n        if (!column) return;\n        const defaultValue = this.replaceThis(this.getAttr('defaultValue'));\n        const js = Helper.templateToJsString(defaultValue, this.getPage().getParams());\n        if (typeof js !== 'string') throw new Error(`${this.getFullName()}: defaultValue must be templated to js string`);\n        // console.log('js', this.getFullName(), js);\n        try {\n            const value = eval(js);\n            if (value !== undefined) {\n                row[column] = this.valueToRaw(value);\n            }\n        } catch (err) {\n            throw new Error(`[${this.getFullName()}] fillDefaultValue: ${err.toString()}`);\n        }\n    }\n\n    valueToPageParams(row) {\n        // console.log('Field.valueToPageParams', this.getFullName());\n        if (this.isParam()) {\n            this.getPage().addParam(this.getFullName(), this.getValue(row));\n        }\n    }\n\n    isChanged(row) {\n        // console.log('Field.isChanged', this.getFullName());\n        if (!this.getAttr('column')) throw new Error(`${this.getFullName()}: field has no column`);\n        return this.getDefaultDataSource().isRowColumnChanged(row, this.getAttr('column'));\n    }\n\n    hasColumn() {\n        return !!this.getAttr('column');\n    }\n\n    getValue(row) {\n        // console.log('Field.getValue', this.getFullName());\n        if (!row && this.parent instanceof RowForm) {\n            row = this.parent.getRow();\n        }\n        if (!row) {\n            console.log(`${this.getFullName()}: need row`);\n        }\n        let rawValue;\n        if (this.getAttr('column')) {\n            rawValue = this.getRawValue(row);\n        } else if (this.getAttr('value')) {\n            const js = this.getAttr('value');\n            try {\n                rawValue = eval(js);\n            } catch (err) {\n                throw new Error(`${this.getFullName()}: value eval error: ${err.message}`);\n            }\n        } else {\n            throw new Error(`${this.getFullName()}: no column and no value in field`);\n        }\n\n        // use rawValue\n        if (rawValue === undefined) return undefined;\n        if (rawValue === null) throw new Error(`[${this.getFullName()}]: null is wrong raw value`);\n        try {\n            return this.rawToValue(rawValue);\n        } catch (err) {\n            console.log('raw value decode error:', this.getFullName(), rawValue);\n            throw err;\n        }\n    }\n\n    setValue(row, value) {\n        // console.log('Field.setValue', this.getFullName(), value);\n        if (!this.getAttr('column')) throw new Error(`field has no column: ${this.getFullName()}`);\n        const rawValue = this.valueToRaw(value);\n        this.getForm().getDefaultDataSource().setValue(row, this.getAttr('column'), rawValue);\n        this.valueToPageParams(row);\n    }\n\n    rawToValue(rawValue) {\n        return Helper.decodeValue(rawValue);\n    }\n\n    valueToRaw(value) {\n        return Helper.encodeValue(value);\n    }\n\n    getRawValue(row) {\n        if (!this.hasColumn()) throw new Error(`${this.getFullName()}: no column`);\n        return this.getForm().getDefaultDataSource().getValue(row, this.getAttr('column'));\n    }\n\n    getDefaultDataSource() {\n        return this.getForm().getDefaultDataSource();\n    }\n\n    getType() {\n        if (this.getAttr('type')) {\n            return this.getAttr('type');\n        }\n        if (this.getAttr('column')) {\n            const dataSource = this.getDefaultDataSource();\n            if (dataSource.isSurrogate()) {\n                return dataSource.getType(this.getAttr('column'));\n            }\n            throw new Error('field type empty');\n        }\n        throw new Error('field type and column empty');\n    }\n\n    getForm() {\n        return this.parent;\n    }\n\n    getPage() {\n        return this.parent.parent;\n    }\n\n    getApp() {\n        return this.parent.parent.parent;\n    }\n\n    isReadOnly() {\n        return this.data.readOnly === 'true';\n    }\n    isNotNull() {\n        return this.data.notNull === 'true';\n    }\n    isNullable() {\n        return this.data.notNull === 'false';\n    }\n    getWidth() {\n        const width = parseInt(this.data.width);\n        if (isNaN(width)) return null;\n        if (width === 0) return 100;\n        return width;\n    }\n    getFullName() {\n        return `${this.getPage().getName()}.${this.getForm().getName()}.${this.getName()}`;\n    }\n    isParam() {\n        return this.data.param === 'true';\n    }\n    validateOnChange() {\n        if (this.data.validateOnChange !== undefined) {\n            return this.data.validateOnChange === 'true';\n        }\n        return true;\n    }\n    validateOnBlur() {\n        if (this.data.validateOnBlur !== undefined) {\n            return this.data.validateOnBlur === 'true';\n        }\n        return false;\n    }\n    getCaption() {\n        const caption = this.getAttr('caption');\n        if (caption === '') {\n            const columnName = this.getAttr('column');\n            if (columnName && this.parent.hasDefaultSqlDataSource()) {\n                const ds = this.parent.getDataSource('default');\n                if (ds.getAttr('table')) {\n                    const column = ds.getTable().getColumn(columnName);\n                    return column.getCaption();\n                }\n            }\n        }\n        return caption;\n    }\n}\nwindow.QForms.Field = Field;\n","class CheckBoxField extends Field {\n\n}\nwindow.QForms.CheckBoxField = CheckBoxField;\n","class ComboBoxField extends Field {\n\n    getDisplayValue(row) {\n        let value = null;\n        if (row[this.data.displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[this.data.displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[this.data.displayColumn]);\n                throw err;\n            }\n        } else {\n            value = this.data.displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        if (!row[this.data.valueColumn]) {\n            throw new Error('no valueColumn in ComboBox data source');\n        }\n        return Helper.decodeValue(row[this.data.valueColumn]);\n    }\n\n    getComboBoxDataSource() {\n        const name = this.data.dataSourceName;\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        }\n        if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        }\n        if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        throw new Error(`${this.getFullName()}: no data source: ${name}`);\n    }\n\n    findRowByRawValue(rawValue) {\n        return this.getComboBoxDataSource().getRows().find(row => row[this.data.valueColumn] === rawValue);\n    }\n}\nwindow.QForms.ComboBoxField = ComboBoxField;\n","class DateField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n\n    rawToValue(raw) {\n        // console.log('DateField.rawToValue', this.getFullName(), raw);\n        const value = Helper.decodeValue(raw);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addMinutes(value, value.getTimezoneOffset());\n        }\n        // console.log('DateField.rawToValue:', raw, value);\n        return value;\n    }\n\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = new Date(value.getTime());\n            Helper.addMinutes(v, -v.getTimezoneOffset());\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateField = DateField;\n","class DateTimeField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n    rawToValue(rawValue) {\n        const value = Helper.decodeValue(rawValue);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addMinutes(value, value.getTimezoneOffset());\n        }\n        // console.log('DateTimeField.rawToValue:', value);\n        return value;\n    }\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = new Date(value.getTime());\n            Helper.addMinutes(v, -v.getTimezoneOffset());\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateTimeField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateTimeField = DateTimeField;\n","class FileField extends Field {\n}\nwindow.QForms.FileField = FileField;\n","class ImageField extends Field {\n}\nwindow.QForms.ImageField = ImageField;\n","class LabelField extends Field {\n}\nwindow.QForms.LabelField = LabelField;\n","class LinkField extends Field {\n}\nwindow.QForms.LinkField = LinkField;\n","class PasswordField extends Field {\n\n}\nwindow.QForms.PasswordField = PasswordField;\n","class PhoneField extends Field {\n}\nwindow.QForms.PhoneField = PhoneField;\n","class TextAreaField extends Field {\n    getRows() {\n        return this.data.rows;\n    }\n    getCols() {\n        return this.data.cols;\n    }\n}\nwindow.QForms.TextAreaField = TextAreaField;\n","class TextBoxField extends Field {\n\n}\nwindow.QForms.TextBoxField = TextBoxField;\n","class TimeField extends Field {\n\n}\nwindow.QForms.TimeField = TimeField;\n","class Form extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.dataSources = [];\n        this.fields      = [];\n    }\n\n    init() {\n        // data sources\n        this.createDataSources();\n\n        // fields\n        for (const data of this.data.fields) {\n            const Class = FrontHostApp.getClassByName(data.class);\n            const field = new Class(data, this);\n            field.init();\n            this.fields.push(field);\n        }\n    }\n\n    deinit() {\n        // console.log('Form.deinit:', this.getFullName());\n        this.deinitDataSources();\n        for (const field of this.fields) {\n            field.deinit();\n        }\n        super.deinit();\n    }\n\n    fillDefaultValues(row) {\n        for (const field of this.fields) {\n            field.fillDefaultValue(row);\n        }\n    }\n\n    onDataSourceRefresh(e) {\n        // console.log('Form.onDataSourceRefresh', this.getFullName());\n        this.emit('refresh', e);\n    }\n\n    onDataSourceInsert(e) {\n        // console.log('Form.onDataSourceInsert', this.getFullName());\n        this.parent.onFormInsert(e);\n        this.emit('insert', e);\n    }\n\n    onDataSourceUpdate(e) {\n        // console.log('Form.onDataSourceUpdate', this.getFullName());\n        this.emit('update', e);\n    }\n\n    onDataSourceDelete(e) {\n        // console.log('Form.onDataSourceDelete', this.getFullName());\n        this.emit('delete', e);\n    }\n\n    async update() {\n        console.log('Form.update', this.getFullName(), this.isChanged());\n        if (this.getPage().deinited) throw new Error('page already deinited');\n        if (!this.isChanged() && !this.getDefaultDataSource().hasNewRows()) throw new Error(`form model not changed or does not have new rows: ${this.getFullName()}`);\n        await this.getDefaultDataSource().update();\n    }\n\n    isChanged() {\n        // console.log('Form.isChanged', this.getFullName());\n        return this.getDefaultDataSource().isChanged();\n    }\n\n    hasNew() {\n        // console.log('Form.hasNew', this.getFullName());\n        return this.getDefaultDataSource().hasNew();\n    }\n\n    async rpc(name, params) {\n        console.log('Form.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getPage().getName(),\n            form  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n\n    getKey() {\n        return null;\n    }\n\n    getDefaultDataSource() {\n        const dataSource = this.getDataSource('default');\n        if (!dataSource) throw new Error(`${this.getFullName()}: no default data source`);\n        return dataSource;\n    }\n\n    getPage() {\n        return this.parent;\n    }\n\n    getApp() {\n        return this.parent.parent;\n    }\n    async refresh() {\n        await this.getDefaultDataSource().refresh();\n    }\n    getField(name) {\n        return this.fields.find(field => field.getName() === name);\n    }\n    hasDefaultSqlDataSource() {\n        return this.getDefaultDataSource().getClassName() === 'SqlDataSource';\n    }\n    decodeRow(row) {\n        const values = {};\n        for (const field of this.fields) {\n            const column = field.getAttr('column');\n            if (column) {\n                values[column] = field.getValue(row);\n            }\n        }\n        return values;\n    }\n}\nwindow.QForms.Form = Form;\n","class RowForm extends Form {\n    init() {\n        super.init();\n        if (this.isNewMode()) {\n            this.getDefaultDataSource().newRow(this.createRow());\n        }\n        this.fillParams(this.getRow()); // dump row values to page params\n    }\n\n    isNewMode() {\n        const newMode = this.getAttr('newMode');\n        if (newMode ===  'true') return  true;\n        if (newMode === 'false') return false;\n        return this.getPage().isNewMode();\n    }\n\n    fillParams(row) {\n        for (const field of this.fields) {\n            field.valueToPageParams(row);\n        }\n    }\n\n    onDataSourceUpdate(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceUpdate(e);\n    }\n\n    onDataSourceInsert(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceInsert(e);\n    }\n\n    getRow(withChanges) {\n        return this.getDefaultDataSource().getSingleRow(withChanges);\n    }\n\n    getKey() {\n        // console.log('RowForm.getKey', this.getFullName());\n        const dataSource = this.getDefaultDataSource();\n        if (dataSource.getClassName() === 'SqlDataSource') {\n            const row = this.getRow();\n            return dataSource.getRowKey(row);\n        }\n        return null;\n    }\n\n    createRow() {\n        const row = {};\n        this.fillDefaultValues(row);\n        return row;\n    }\n\n    discard(fields) {\n        console.log('RowForm.discard', fields);\n        if (this.getDefaultDataSource().isChanged()) {\n            this.getDefaultDataSource().discard();\n            fields.forEach(name => {\n                this.getField(name).valueToPageParams(this.getRow())\n            });\n        }\n    }\n\n}\nwindow.QForms.RowForm = RowForm;\n","class TableForm extends Form {\n\n}\nwindow.QForms.TableForm = TableForm;\n","class Page extends Model {\n    constructor(data, parent, options) {\n        // console.log('Page.constructor', options);\n        // if (!options.id) throw new Error('no page id');\n        super(data, parent);\n        this.options     = options; // {id, modal, newMode, selectMode, params}\n        this.dataSources = [];\n        this.forms       = [];\n        this.params      = {};\n        if (options.onCreate) {\n            options.onCreate(this);\n        }\n    }\n\n    init() {\n        this.createDataSources();\n        this.createForms();\n        console.log('page options:', this.options);\n        console.log('page params:', this.getParams());\n    }\n\n    deinit() {\n        // console.log('Page.deinit', this.getFullName());\n        if (this.deinited) throw new Error(`page ${this.getFullName()} is already deinited`);\n        this.deinitDataSources();\n        this.deinitForms();\n        super.deinit();\n    }\n\n    getOptions() {\n        return this.options;\n    }\n\n    createForms() {\n        // forms\n        for (const data of this.data.forms) {\n            const FormClass = FrontHostApp.getClassByName(Model.getClassName(data));\n            const form = new FormClass(data, this);\n            form.init();\n            this.forms.push(form);\n        }\n    }\n\n    deinitForms() {\n        for (const form of this.forms) {\n            form.deinit();\n        }\n    }\n\n    /*getId() {\n        return this.options.id;\n    }*/\n\n    getParams() {\n        return {\n            ...(this.options.params || {}),\n            ...this.params,\n        };\n    }\n\n    addParam(name, value) {\n        // console.log('Page.addParam', name);\n        this.params[name] = value !== undefined ? value : null;\n    }\n\n    async update() {\n        console.log('Page.update', this.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged() || form.hasNew()) {\n                await form.update();\n            }\n        }\n    }\n\n    discard() {\n        console.log('Page.discard', this.getFullName());\n        for (const form of this.forms) {\n            form.discard();\n        }\n    }\n\n    getKey() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') {\n                return form.getKey();\n            }\n        }\n        return null;\n    }\n\n    hasRowFormWithDefaultDs() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.getDefaultDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowFormWithDefaultSqlDataSource() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.hasDefaultSqlDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') return true;\n        }\n        return false;\n    }\n\n    hasTableForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'TableForm') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isNewMode() {\n        return !!this.options.newMode;\n    }\n\n    hasNew() {\n        for (const form of this.forms) {\n            if (form.hasNew()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getApp() {\n        return this.parent;\n    }\n\n    isModal() {\n        return !!this.options.modal;\n    }\n\n    onFormInsert(e) {\n        console.log('Page.onFormInsert', e);\n        for (const key of e.inserts) {\n            const keyParams = DataSource.keyToParams(key);// key params to page params\n            for (const name in keyParams) {\n                this.addParam(name, keyParams[name]);\n            }\n        }\n    }\n    async rpc(name, params) {\n        // console.log('Page.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result =  await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.getName() === name);\n    }\n}\nwindow.QForms.Page = Page;\n","class Table extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.columns = [];\n    }\n    init() {\n        // console.log('Table.init', this.getFullName());\n        for (const data of this.data.columns) {\n            const column = new Column(data, this);\n            column.init();\n            this.addColumn(column);\n        }\n    }\n    addColumn(column) {\n        this.columns.push(column);\n    }\n    getColumn(name) {\n        const column = this.columns.find(column => column.getName() === name);\n        if (!column) throw new Error(`table ${this.getFullName()}: no column ${name}`);\n        return column;\n    }\n    emitResult(result, source = null) {\n        console.log('Table.emitResult');\n        return [\n            ...(result.insert  ? [this.emitInsert(source, result.insert)] : []),\n            ...(result.update  ? [this.emitUpdate(source, result.update)] : []),\n            ...(result.delete  ? [this.emitDelete(source, result.delete)] : []),\n            ...(result.refresh ? [this.emitRefresh(source              )] : [])\n        ];\n    }\n    emitInsert(source, inserts) {\n        return this.emit('insert', {source, inserts});\n    }\n    emitUpdate(source, updates) {\n        return this.emit('update', {source, updates});\n    }\n    emitDelete(source, deletes) {\n        return this.emit('delete', {source, deletes});\n    }\n    emitRefresh(source) {\n        return this.emit('refresh', {source});\n    }\n}\nwindow.QForms.Table = Table;\n"]}