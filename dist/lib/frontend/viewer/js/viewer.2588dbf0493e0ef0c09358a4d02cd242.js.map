{"version":3,"sources":["EventEmitter.js","LoginFrontHostApp.js","ViewerFrontHostApp.js","WebSocketClient.js","Controller/Controller.js","Controller/AlertController/AlertController.js","Controller/ConfirmController/ConfirmController.js","Controller/LoginController/LoginController.js","Controller/ModalController/ModalController.js","Controller/ModalController/ImageDialogController/ImageDialogController.js","Controller/ModelController/ModelController.js","Controller/ModelController/ApplicationController/ApplicationController.js","Controller/ModelController/FieldController/FieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxFieldController/RowFormCheckBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxListFieldController/RowFormCheckBoxListFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormComboBoxFieldController/RowFormComboBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateFieldController/RowFormDateFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateTimeFieldController/RowFormDateTimeFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFileFieldController/RowFormFileFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormImageFieldController/RowFormImageFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormLinkFieldController/RowFormLinkFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPasswordFieldController/RowFormPasswordFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPhoneFieldController/RowFormPhoneFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormRadioFieldController/RowFormRadioFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextAreaFieldController/RowFormTextAreaFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextBoxFieldController/RowFormTextBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTimeFieldController/RowFormTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormCheckBoxFieldController/TableFormCheckBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormComboBoxFieldController/TableFormComboBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateFieldController/TableFormDateFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateTimeFieldController/TableFormDateTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormLinkFieldController/TableFormLinkFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormPhoneFieldController/TableFormPhoneFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextAreaFieldController/TableFormTextAreaFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextBoxFieldController/TableFormTextBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTimeFieldController/TableFormTimeFieldController.js","Controller/ModelController/FormController/FormController.js","Controller/ModelController/FormController/RowFormController/RowFormController.js","Controller/ModelController/FormController/TableFormController/TableFormController.js","Controller/ModelController/PageController/PageController.js","Model/Model.js","Model/Application/Application.js","Model/Column/Column.js","Model/DataSource/DataSource.js","Model/DataSource/SqlDataSource/SqlDataSource.js","Model/Database/Database.js","Model/Field/Field.js","Model/Field/CheckBoxField/CheckBoxField.js","Model/Field/CheckBoxListField/CheckBoxListField.js","Model/Field/ComboBoxField/ComboBoxField.js","Model/Field/DateField/DateField.js","Model/Field/DateTimeField/DateTimeField.js","Model/Field/FileField/FileField.js","Model/Field/ImageField/ImageField.js","Model/Field/LabelField/LabelField.js","Model/Field/LinkField/LinkField.js","Model/Field/PasswordField/PasswordField.js","Model/Field/PhoneField/PhoneField.js","Model/Field/RadioField/RadioField.js","Model/Field/TextAreaField/TextAreaField.js","Model/Field/TextBoxField/TextBoxField.js","Model/Field/TimeField/TimeField.js","Model/Form/Form.js","Model/Form/RowForm/RowForm.js","Model/Form/TableForm/TableForm.js","Model/Page/Page.js","Model/Table/Table.js"],"names":["EventEmitter","constructor","this","list","on","name","cb","push","off","i","indexOf","Error","splice","emit","e","length","result","Promise","allSettled","map","status","reason","LoginFrontHostApp","FrontHostApp","data","console","log","super","run","loginController","LoginController","create","rootElement","document","querySelector","getViewClassCssBlockName","Helper","createReactComponent","getViewClass","ctrl","getText","text","getData","ViewerFrontHostApp","options","applicationController","application","Application","init","ApplicationController","rootElementName","createView","connect","err","logError","onWindowPopState","error","values","type","source","message","stack","href","window","location","platformVersion","versions","platform","appVersion","app","logErrorUrl","fetch","method","headers","Content-Type","body","JSON","stringify","catch","alert","resolve","reject","root","childElementCount","alertCtrl","AlertController","onClose","ReactDOM","unmountComponentAtNode","confirm","ConfirmController","QForms","WebSocketClient","protocol","url","host","createUriParamsString","webSocket","refreshTimeoutId","RECONNECT_TIMEOUT","REFRESH_TIMEOUT","params","route","uuid","userId","version","getApp","getModel","Object","keys","key","encodeURIComponent","join","WebSocket","onclose","code","onopen","bind","onmessage","onMessage","startRefreshTimeout","onRefreshTimeout","send","setTimeout","resetRefreshTimeout","clearTimeout","reconnect","async","getHostApp","getDomain","getName","parse","packet","getView","disableRerender","emitResult","enableRerender","rerender","Controller","view","onViewCreate","createElement","React","onCreate","AlertView","close","onOkButtonClick","onCloseClick","onKeyDown","ConfirmView","onYesClick","frontHostApp","CustomClass","getClassByName","Class","LoginView","getFrontHostApp","ModalController","id","getId","closeModal","ImageDialogController","src","ImageDialogView","getSrc","ModelController","model","parent","deinited","deinit","getFullName","getParent","getTitle","getCaption","isAttr","viewClassName","getAttr","eval","lastId","activePage","modals","statusbar","homePageName","webSocketClient","isDebugMode","Search","getObj","onRequest","pageData","pages","createPage","modal","getGlobalParams","title","documentElement","classList","add","inIframe","ApplicationView","setLastQueryTime","time","remoteAppVersion","createVersionNotificationIfNotExists","div","innerHTML","versionNotification","className","getCssBlockName","append","undefined","pageModel","Page","pc","PageController","getNextId","openPage","pageController","findPageControllerByPageNameAndKey","onPageSelect","request","action","page","newMode","activeElement","focus","isModal","addModal","addPage","removeModal","getNewId","closePage","pageName","getKey","onActionClick","getMenuItemsProp","menu","items","item","caption","getUser","login","onStatusbarCreate","onLogout","getRootPath","onMenuItemClick","history","pushState","createLink","getActivePageName","state","invalidate","filter","forEach","yesButton","yes","noButton","no","openModal","nodeEnv","user","rpc","FieldController","getPage","form","getForm","generalClassName","getClassName","GeneralClass","valueToString","value","Date","toISOString","toString","stringToValue","stringValue","fieldType","getType","trim","date","invalidDate","num","Number","isNaN","notNumber","getViewStyle","row","isVisible","isAutoFocus","getAutocomplete","getFormat","RowFormFieldController","parseError","changed","getRow","getValue","setValue","refill","resetErrors","refreshChanged","copyValueToModel","_onChange","widgetValue","putValue","onChange","fireEvent","setValueFromWidget","validateOnChange","validate","isValid","onFieldChange","onBlur","validateOnBlur","getValueForWidget","isChanged","getError","calcChangedState","getPlaceholder","getWidget","isNotNull","getNullErrorText","required","isEditable","getMode","isReadOnly","isParseError","getErrorMessage","hasColumn","fieldRawValue","valueToRaw","dsRawValue","getRawValue","let","original","modified","getDefaultDataSource","getRowWithChanges","substr","setError","renderView","RowFormCheckBoxFieldController","RowFormCheckBoxFieldView","RowFormCheckBoxListFieldController","dataSource","getDataSource","onListInsert","onListUpdate","onListDelete","RowFormCheckBoxListFieldView","getRows","getItemFromRow","getValueValue","getDisplayValue","RowFormComboBoxFieldController","getComboBoxDataSource","RowFormComboBoxFieldView","getItems","onEditButtonClick","itemEditPage","onCreateButtonClick","newRowMode","itemCreateForm","createPageName","onInsert","inserts","decodeValue","onItemSelect","button","preventDefault","selectedKey","selectMode","onSelect","RowFormDateFieldController","RowFormDateFieldView","RowFormDateTimeFieldController","args","widget2","defaultValue","parseError2","error2","RowFormDateTimeFieldView","getValueForTime","getHours","getMinutes","h","m","resetErrors2","TimeBox","splitTime","setHours","onView2Create","onChange2","isValidateOnChange2","setValueFromView2","validate2","onBlur2","getPlaceholder2","getStringValue","getDefaultValue","setDefaultValue2","getIntegerValue","setValue2","getTimeErrorText","field","timeNotValid","getError2","isParseError2","setError2","getErrorMessage2","isValid2","isValidateOnBlur2","RowFormFileFieldController","RowFormFileFieldView","RowFormImageFieldController","RowFormImageFieldView","RowFormLinkFieldController","RowFormLinkFieldView","onClick","RowFormPasswordFieldController","RowFormPasswordFieldView","RowFormPhoneFieldController","RowFormPhoneFieldView","getPhoneFormatErrorText","phoneNumberFormatError","RowFormRadioFieldController","RowFormRadioFieldView","RowFormTextAreaFieldController","RowFormTextAreaFieldView","RowFormTextBoxFieldController","RowFormTextBoxFieldView","RowFormTimeFieldController","RowFormTimeFieldView","TableFormFieldController","TableFormCheckBoxFieldController","TableFormCheckBoxFieldView","TableFormComboBoxFieldController","TableFormComboBoxFieldView","rawValue","cbRow","findRowByRawValue","TableFormDateFieldController","TableFormDateFieldView","formatDate","TableFormDateTimeFieldController","TableFormDateTimeFieldView","TableFormLinkFieldController","TableFormLinkFieldView","TableFormPhoneFieldController","TableFormPhoneFieldView","TableFormTextAreaFieldController","TableFormTextAreaFieldView","TableFormTextBoxFieldController","TableFormTextBoxFieldView","TableFormTimeFieldController","TableFormTimeFieldView","FormController","customClassName","fields","onFormChange","getUpdated","updated","now","getField","getSelectedRowKey","RowFormController","mode","hasNew","valid","onModelRefresh","onModelInsert","onModelUpdate","calcState","onFormInsert","onFormUpdate","clearFieldsError","onSaveClick","update","onDiscardClick","changedFields","discard","hasDefaultSqlDataSource","onFormDiscard","onRefreshClick","refresh","onEditClick","onCancelClick","RowFormView","getActiveRow","withChanges","isActionEnabled","isViewMode","isEditMode","TableFormController","grid","TableFormView","onModelDelete","onGridCreate","onNewClick","new","onDeleteClick","getActiveRowKey","areYouSure","delete","onGridCellDblClick","getOptions","selectRow","edit","onGridLinkClick","onGridDeleteKeyDown","fillDefaultValues","insert","database","table","DataSource","keyToParams","setActiveRowKey","updates","newKey","deletes","onGridSelectionChange","isRowSelected","onFrameChanged","frame","parseInt","setFrame","onNextClick","getFrame","onPreviousClick","canPrev","canNext","ds","getFramesCount","forms","onSaveAndCloseClick","onClosePageClick","onOpenPageClick","link","createOpenInNewLink","open","hasRowFormWithDefaultSqlDataSource","formController","getParams","PageView","pathname","encodeURI","find","arr","keyPart","selectedRowKey","onSelectClick","onResetClick","Model","class","getCol","hasOwnProperty","dataSources","createDataSources","deinitDataSources","hasActions","actions","databases","theme","Database","addDatabase","logout","start","doHttpRequest2","remotePlatformVersion","getDatabase","domain","getVirtualPath","virtualPath","errorMessage","promises","getNodeEnv","Column","includes","rows","rowsByKey","news","changes","Map","setRows","getTable","onTableInsert","onTableUpdate","onTableDelete","onTableRefresh","fillRowsByKey","addRow","getRowKey","addRows","getRowsLength","column","discardRowColumn","has","get","changeRowColumn","newValue","set","size","isRowColumnChanged","getKeyValues","keyColumns","reduce","removeRow","newRow","getSingleRow","Form","getRowByIndex","clear","paramName","getChangesByKey","hasNewRows","copyNewValues","newValues","updateRow","columnName","getColumn","onDataSourceInsert","onDataSourceDelete","onDataSourceUpdate","reuslt","sourceRow","isSurrogate","moveRow","offset","moveArrItem","event","onDataSourceRefresh","SqlDataSource","count","lastFrame","insertEx","updateEx","getPageParams","select","getLimit","fill","more","hasMore","Array","Math","ceil","getCount","getLastFrame","tables","Table","addTable","Field","replaceThis","replace","split","fillDefaultValue","js","templateToJsString","valueToPageParams","isParam","paramValue","setParam","RowForm","rawToValue","encodeValue","readOnly","notNull","isNullable","getWidth","width","param","CheckBoxField","CheckBoxListField","displayColumn","valueColumn","dataSourceName","ComboBoxField","DateField","raw","addTimezoneOffset","v","cloneDate","removeTimezoneOffset","DateTimeField","FileField","ImageField","LabelField","LinkField","PasswordField","PhoneField","RadioField","TextAreaField","getCols","cols","TextBoxField","TimeField","decodeRow","isNewMode","createRow","fillParams","TableForm","createForms","deinitForms","FormClass","hasRowFormWithDefaultDs","hasRowForm","hasTableForm","keyParams","columns","addColumn","emitInsert","emitUpdate","emitDelete","emitRefresh"],"mappings":"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","file":"viewer.2588dbf0493e0ef0c09358a4d02cd242.js","sourcesContent":["class EventEmitter {\n    constructor() {\n        this.list = {};\n    }\n    on(name, cb) {\n        // console.log('EventEmitter.on', name);\n        if (!this.list[name]) {\n            this.list[name] = [];\n        }\n        this.list[name].push(cb);\n    }\n    off(name, cb) {\n        // console.log('EventEmitter.off', name);\n        const i = this.list[name].indexOf(cb);\n        if (i === -1) {\n            throw new Error(`cannot find cb for ${name}`);\n        }\n        // console.log(i);\n        this.list[name].splice(i, 1);\n    }\n    async emit(name, e) {\n        // console.log('EventEmitter.emit', name, e);\n        if (this.list[name] && this.list[name].length) {\n            const results = await Promise.allSettled(this.list[name].map(cb => cb(e)));\n            // console.log('results:', results);\n            for (const result of results) {\n                if (result.status === 'rejected') {\n                    throw result.reason;\n                }\n            }\n        }\n    }\n}\n","class LoginFrontHostApp extends FrontHostApp {\n    constructor(data) {\n        console.log('LoginFrontHostApp.constructor', data);\n        super();\n        this.data = data;\n    }\n    async run() {\n        console.log('LoginFrontHostApp.run');\n        const loginController = LoginController.create(this);\n        const rootElement = document.querySelector(`.${loginController.getViewClassCssBlockName()}__root`);\n        const loginView = Helper.createReactComponent(rootElement, loginController.getViewClass(), {ctrl: loginController});\n    }\n    getText() {\n        return this.data.text;\n    }\n    getData() {\n        return this.data;\n    }\n}\n","class ViewerFrontHostApp extends FrontHostApp {\n    constructor(options = {}) {\n        if (!options.data) throw new Error('no data');\n        super();\n        this.options = options;\n        this.applicationController = null;\n    }\n    async run() {\n        console.log('ViewerFrontHostApp.run', this.getData());\n\n        // application\n        const application = new Application(this.getData());\n        application.init();\n\n        // applicationController\n        const applicationController = this.applicationController = ApplicationController.create(application, this);\n        applicationController.init();\n\n        // view\n        const rootElementName = `.${applicationController.getViewClass().name}__root`;\n        const rootElement = document.querySelector(rootElementName);\n        if (!rootElement) {\n            throw new Error(`no root element: ${rootElementName}`);\n        }\n        applicationController.createView(rootElement);\n\n        // connect\n        try {\n            await applicationController.connect();\n        } catch (err) {\n            this.logError(err);\n        }\n    }\n    async onWindowPopState(e) {\n        // console.log('ViewerFrontHostApp.onWindowPopState', e.state);\n        await this.applicationController.onWindowPopState(e);\n    }\n    logError(err) {\n        console.error('FrontHostApp.logError', err);\n        const values = {\n            type   : 'error',\n            source : 'client',\n            message: err.message,\n            stack  : err.stack,\n            data   : {\n                href           : window.location.href,\n                platformVersion: this.getData().versions.platform,\n                appVersion     : this.getData().versions.app,\n            }\n        };\n        console.log(`POST ${this.getData().logErrorUrl}`, values);\n        fetch(this.getData().logErrorUrl, {\n            method : 'POST',\n            headers: {'Content-Type': 'application/json;charset=utf-8'},\n            body   : JSON.stringify(values)\n        }).catch(err => {\n            console.error(err.message);\n        });\n    }\n    getData() {\n        if (!this.options.data) throw new Error('no data');\n        return this.options.data;\n    }\n    alert(options) {\n        console.log('ViewerFrontHostApp.alert', options);\n        return new Promise((resolve, reject) => {\n            try {\n                const root = document.querySelector('.alert-root');\n                if (root.childElementCount === 0) {\n                    const ctrl = this.alertCtrl = new AlertController({\n                        ...options,\n                        onClose: result => {\n                            this.alertCtrl = null;\n                            ReactDOM.unmountComponentAtNode(root);\n                            resolve(result);\n                        }});\n                    // console.log('ctrl:', ctrl);\n                    const view = Helper.createReactComponent(root, ctrl.getViewClass(), {ctrl});\n                    // console.log('view', view);\n                } else {\n                    reject(new Error('alert already exists'));\n                }\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n    confirm(options) {\n        console.log('ViewerFrontHostApp.confirm', options);\n        return new Promise((resolve, reject) => {\n            try {\n                const root = document.querySelector('.alert-root');\n                if (root.childElementCount === 0) {\n                    const ctrl = this.alertCtrl = new ConfirmController({\n                        ...options,\n                        onClose: result => {\n                            this.alertCtrl = null;\n                            ReactDOM.unmountComponentAtNode(root);\n                            resolve(result);\n                        }});\n                    // console.log('ctrl:', ctrl);\n                    const view = Helper.createReactComponent(root, ctrl.getViewClass(), {ctrl});\n                    // console.log('view', view);\n                } else {\n                    reject(new Error('confirm already exists'));\n                }\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n}\n\nwindow.QForms.ViewerFrontHostApp = ViewerFrontHostApp;\n","class WebSocketClient {\n    constructor(options = {}) {\n        this.options = options;\n        if (!options.applicationController) throw new Error('no options.applicationController');\n        if (!options.protocol) throw new Error('no options.protocol');\n        this.url = `${options.protocol}://${window.location.host}/?${this.createUriParamsString(options)}`;\n        this.webSocket         = null;\n        this.refreshTimeoutId  = null;\n        this.RECONNECT_TIMEOUT = 10;        // sec\n        this.REFRESH_TIMEOUT   = 60*60;     // sec\n    }\n    createUriParamsString(options) {\n        const params = {\n            route  : options.route,\n            uuid   : options.uuid,\n            userId : options.userId,\n            version: this.getApp().getModel().getData().versions.app\n        };\n        return Object.keys(params).map(key => `${key}=${encodeURIComponent(params[key])}`).join('&');\n    }\n    connect() {\n        console.log('WebSocketClient.connect', this.url);\n        return new Promise((resolve, reject) => {\n            this.webSocket = new WebSocket(this.url);\n            this.webSocket.onclose = async e => {\n                this.webSocket = null;\n                reject(new Error(`Connection failed ${e.code}`));\n            };\n            this.webSocket.onopen = e => {\n                this.webSocket.onclose   = this.onClose.bind(this);\n                this.webSocket.onmessage = this.onMessage.bind(this);\n                this.startRefreshTimeout();\n                resolve(e);\n            };\n        });\n    }\n    async onRefreshTimeout() {\n        // console.log('WebSocketClient.onRefreshTimeout');\n        this.refreshTimeoutId = null;\n        this.send('ping');\n        this.startRefreshTimeout();\n    }\n    send(data) {\n        console.log('WebSocketClient.send', data);\n        this.webSocket.send(data);\n    }\n    startRefreshTimeout() {\n        this.refreshTimeoutId = setTimeout(this.onRefreshTimeout.bind(this), this.REFRESH_TIMEOUT * 1000);\n    }\n    resetRefreshTimeout() {\n        if (this.refreshTimeoutId) {\n            clearTimeout(this.refreshTimeoutId);\n            this.refreshTimeoutId = null;\n        }\n    }\n    async reconnect() {\n        console.log('WebSocketClient.reconnect');\n        try {\n            await this.connect();\n        } catch (err) {\n            console.error(err);\n            console.log(`waiting ${this.RECONNECT_TIMEOUT} sec for socket reconnect...`);\n            setTimeout(async () => await this.reconnect(), this.RECONNECT_TIMEOUT * 1000);\n        }\n    }\n\n    async onClose(e) {\n        console.error('WebSocketClient.onClose', e);\n        this.getApp().getHostApp().logError(new Error(`websocket close ${this.getApp().getModel().getDomain()}/${this.getApp().getModel().getName()}`));\n        this.resetRefreshTimeout();\n        this.webSocket.onclose = null;\n        this.webSocket.onmessage = null;\n        this.webSocket = null;\n        await this.reconnect();\n    }\n    async onMessage(e) {\n        console.log('WebSocketClient.onMessage', JSON.parse(e.data));\n        const packet = JSON.parse(e.data);\n        if (packet.type === 'result') {\n            this.getApp().getView().disableRerender();\n            await this.getApp().getModel().emitResult(packet.data);\n            this.getApp().getView().enableRerender();\n            this.getApp().getView().rerender();\n        }\n    }\n    getApp() {\n        return this.options.applicationController;\n    }\n}\n","class Controller extends EventEmitter {\n    constructor() {\n        super();\n        this.view = null;\n    }\n    onViewCreate = view => {\n        // console.log('Controller.onViewCreate');\n        this.view = view;\n    }\n    async rerender() {\n        if (this.view) {\n            return await this.view.rerender();\n        }\n        console.error(`${this.constructor.name}.rerender no view`);\n    }\n    getView() {\n        return this.view;\n    }\n    getViewClass() {\n        throw new Error(`${this.constructor.name}.getViewClass not implemented`);\n    }\n    createElement() {\n        return React.createElement(this.getViewClass(), {\n            ctrl    : this,\n            onCreate: this.onViewCreate\n        });\n    }\n}\n","class AlertController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return AlertView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onOkButtonClick = async e => {\n        this.close(true);\n    }\n    onCloseClick = async e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class ConfirmController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return ConfirmView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onYesClick = e => {\n        this.close(true);\n    }\n    onCloseClick = e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class LoginController extends Controller {\n    constructor(frontHostApp) {\n        super();\n        console.log(`${this.constructor.name}.constructor`);\n        this.frontHostApp = frontHostApp;\n    }\n    static create(frontHostApp) {\n        const data = frontHostApp.getData();\n        if (!data.name) throw new Error('no app name');\n        const CustomClass = FrontHostApp.getClassByName(`${data.name}LoginController`);\n        const Class = CustomClass ? CustomClass : LoginController;\n        return new Class(frontHostApp);\n    }\n    getViewClass() {\n        return LoginView;\n    }\n    getText() {\n        return this.frontHostApp.getText();\n    }\n    getFrontHostApp() {\n        return this.frontHostApp;\n    }\n    getViewClassCssBlockName() {\n        return this.getViewClass().name;\n    }\n}\n","class ModalController extends Controller {\n    constructor(options = {}) {\n        super();\n        if (!options.app) throw new Error('no app');\n        if (!options.id) throw new Error('no id');\n        this.options = options;\n    }\n    getId() {\n        return this.options.id;\n    }\n    getApp() {\n        return this.options.app;\n    }\n    async close() {\n        await this.getApp().closeModal(this);\n        if (this.options.onClose) {\n            this.options.onClose();\n        }\n    }\n}\n","class ImageDialogController extends ModalController {\n    constructor(options) {\n        // console.log('ImageDialogController.constructor', options);\n        super(options);\n        if (!options.src) throw new Error('no src');\n    }\n    getViewClass() {\n        console.log('ImageDialogController.getViewClass');\n        return ImageDialogView;\n    }\n    getSrc() {\n        return this.options.src;\n    }\n    onCloseClick = async e => {\n        await this.close();\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            await this.close();\n        }\n    }\n}\n","class ModelController extends Controller {\n    constructor(model, parent) {\n        super();\n        this.model    = model;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.model.getFullName()}: controller already deinited`);\n        this.deinited = true;\n    }\n    getModel() {\n        return this.model;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getTitle() {\n        return this.getModel().getCaption();\n    }\n    getViewClass() {\n        // console.log(`${this.constructor.name}.getViewClass`, this.getModel().getAttr('viewClass'));\n        const model = this.getModel();\n        if (!model.isAttr('viewClass')) throw new Error(`${this.constructor.name} not supports view`);\n        const viewClassName = model.getAttr('viewClass');\n        return viewClassName ? eval(viewClassName) : null;\n    }\n}\n\nwindow.QForms.ModelController = ModelController;\n","class ApplicationController extends ModelController {\n    constructor(model, frontHostApp) {\n        // console.log('ApplicationController.constructor', model, view);\n        super(model, null);\n        this.frontHostApp = frontHostApp;\n        this.lastId = 0;\n        this.activePage = null;     // active non modal page\n        this.modals = [];\n        this.statusbar  = null;\n        this.homePageName = null;\n        this.webSocketClient = null;\n    }\n    static create(model, frontHostApp) {\n        // console.log('ApplicationController.create', 'debug:', ApplicationController.isDebugMode());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}ApplicationController`);\n        const Class = CustomClass ? CustomClass : ApplicationController;\n        return new Class(model, frontHostApp);\n    }\n    static isDebugMode() {\n        return Search.getObj()['debug'] === '1';\n    }\n    init() {\n        // console.log('ApplicationController.init');\n        super.init();\n        // this.model.on('logout' , this.onLogout);\n        this.model.on('request', this.onRequest);\n        const pageData = this.model.data.pages[0];\n        this.activePage = pageData ? this.createPage(pageData, {\n            modal : false,\n            params: this.getGlobalParams()\n        }) : null;\n        document.title = this.getTitle();\n        document.documentElement.classList.add(Helper.inIframe() ? 'iframe' : 'not-iframe');\n        this.homePageName = this.activePage.getModel().getName();\n    }\n    deinit() {\n        // this.model.off('logout', this.onLogout);\n        this.model.off('request', this.onRequest);\n        super.deinit();\n    }\n    getViewClass() {\n        return super.getViewClass() || ApplicationView;\n    }\n    createView(rootElement) {\n        // console.log('ApplicationController.createView');\n        this.view = Helper.createReactComponent(rootElement, this.getViewClass(), {ctrl: this});\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(this.model.getAttr('time'));\n        }\n    }\n    onRequest = async e => {\n        console.log('onRequest', e);\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(e.time);\n        }\n        // console.log('e.remoteAppVersion', e.remoteAppVersion);\n        // console.log('this.getModel().getData().versions.app', this.getModel().getData().versions.app);\n        if (this.getModel().getData().versions.app !== e.remoteAppVersion) {\n            this.createVersionNotificationIfNotExists();\n        }\n    }\n    createVersionNotificationIfNotExists() {\n        // console.log('ApplicationController.createVersionNotificationIfNotExists');\n        if (!document.querySelector('.version-notification')) {\n            const div = document.createElement('div');\n            div.innerHTML = this.getModel().getText().application.versionNotification;\n            div.className = 'version-notification';\n            document.querySelector(`.${this.getView().getCssBlockName()}__body`).append(div);\n        } else {\n            // console.log(`version notification already exists`);\n        }\n    }\n    getGlobalParams() {\n        return {\n            // foo: 'bar'\n        };\n    }\n    // options\n    // - modal      : boolean,\n    // - newMode    : boolean,\n    // - selectMode : boolean,\n    // - selectedKey: string,\n    // - onCreate   : function,\n    // - onSelect   : function,\n    // - onClose    : function,\n    // - params     : object,\n    createPage(pageData, options) {\n        if (options.modal === undefined) throw new Error('no options.modal');\n\n        // model\n        const pageModel = new Page(pageData, this.model, options);\n        pageModel.init();\n\n        // controller\n        const pc = PageController.create(pageModel, this, `c${this.getNextId()}`);\n        pc.init();\n\n        return pc;\n    }\n    async openPage(options) {\n        console.log('ApplicationController.openPage', options);\n        if (!options.name) throw new Error('no name');\n        if (options.key) throw new Error('openPage: key param is deprecated');\n\n        // if this page with this key is already opened, then show it\n        const pageController = this.findPageControllerByPageNameAndKey(options.name, null);\n        // console.log('pageController:', pageController);\n        if (pageController) {\n            this.onPageSelect(pageController);\n            return pageController;\n        }\n\n        const {page: pageData} = await this.model.request({\n            action : 'page',\n            page   : options.name,\n            newMode: !!options.newMode,\n            params : options.params || {}\n        });\n\n        // modal by default\n        if (options.modal === undefined) {\n            options.modal = true;\n        }\n        if (!options.onClose) {\n            const activeElement = document.activeElement;\n            options.onClose = () => {\n                if (activeElement) activeElement.focus();\n            };\n        }\n        const pc = this.createPage(pageData, options);\n        // console.log('pc:', pc);\n\n        // show\n        pc.isModal() ? this.addModal(pc) : this.addPage(pc);\n        await this.rerender();\n\n        return pc;\n    }\n    addModal(ctrl) {\n        this.modals.push(ctrl);\n    }\n    removeModal(ctrl) {\n        // console.log('ApplicationController.removeModal', ctrl);\n        const i = this.modals.indexOf(ctrl);\n        if (i === -1) throw new Error(`cannot find modal: ${ctrl.getId()}`);\n        this.modals.splice(i, 1);\n    }\n    getNextId() {\n        this.lastId++;\n        return this.lastId;\n    }\n    getNewId() {\n        return `c${this.getNextId()}`;\n    }\n    addPage(pc) {\n        if (this.activePage) {\n            this.closePage(this.activePage);\n        }\n        this.activePage = pc;\n        document.title = this.getTitle();\n    }\n    findPageControllerByPageNameAndKey(pageName, key) {\n        if (this.activePage && this.activePage.model.getName() === pageName && this.activePage.model.getKey() === key) {\n            return this.activePage;\n        }\n        return null;\n    }\n    onPageSelect(pc) {\n        console.log('ApplicationController.onPageSelect', pc.model.getName());\n    }\n    async closePage(pageController) {\n        console.log('ApplicationController.closePage', pageController.model.getFullName());\n        if (this.modals.indexOf(pageController) > -1) {\n            this.modals.splice(this.modals.indexOf(pageController), 1);\n        } else if (this.activePage === pageController) {\n            this.activePage = null;\n            document.title = '';\n        } else  {\n            throw new Error('page not found');\n        }\n        await this.rerender();\n        pageController.deinit();\n        pageController.model.deinit();\n    }\n    async onActionClick(name) {\n        console.log('ApplicationController.onActionClick', name);\n    }\n    getMenuItemsProp() {\n        // console.log('ApplicationController.getMenuItemsProp');\n        return [\n            // pages & actions\n            ...(this.model.data.menu ? Object.keys(this.model.data.menu).map(key => ({\n                name : key,\n                title: key,\n                items: this.model.data.menu[key].map(item => ({\n                    type : item.type,\n                    name : item.page || item.action,\n                    title: item.caption\n                }))\n            })) : []),\n            // user\n            ...(this.model.getUser() ? [{\n                name : 'user',\n                title: `${this.model.getDomain()}/${this.model.getUser().login}`,\n                items: [\n                    {\n                        type : 'custom',\n                        name : 'logout',\n                        title: 'Logout'\n                    }\n                ]\n            }] : [])\n        ];\n    }\n    onStatusbarCreate = statusbar => {\n        this.statusbar = statusbar;\n    }\n    onLogout = async () => {\n        console.log('ApplicationController.onLogout');\n        const result = await this.model.request({action: 'logout'});\n        location.href = this.getRootPath();\n    }\n    onMenuItemClick = async (menu, type, name) => {\n        console.log('ApplicationController.onMenuItemClick', menu, type, name);\n        if (type === 'page') {\n            await this.openPage({name: name, modal: false});\n            history.pushState({pageName: name}, '', PageController.createLink({page: name}));\n        } else if (type === 'action') {\n            try {\n                const result = await this.onActionClick(name);\n                if (!result) {\n                    throw new Error(`no handler for action '${name}'`);\n                }\n            } catch (err) {\n                await this.alert({message: err.message});\n            }\n        } else if (type === 'custom' && name === 'logout') {\n            await this.onLogout();\n        } else {\n            throw new Error(`unknown menu type/name: ${type}/${name}`);\n        }\n    }\n    /*getFocusCtrl() {\n        if (this.modals.length > 0) {\n            return this.modals[this.modals.length - 1];\n        }\n        return this.activePage;\n    }*/\n    getActivePageName() {\n        if (this.activePage) {\n            return this.activePage.getModel().getName();\n        }\n        return null;\n    }\n    async onWindowPopState(e) {\n        console.log('ApplicationController.onWindowPopState', e.state);\n        await this.openPage({\n            name : e.state ? e.state.pageName : this.homePageName,\n            modal: false\n        });\n    }\n    getTitle() {\n        // console.log('ApplicationController.getTitle', this.activePage);\n        if (this.activePage) {\n            return `${this.activePage.getTitle()} - ${this.getModel().getCaption()}`;\n        }\n        return this.getModel().getCaption();\n    }\n    invalidate() {\n        if (this.activePage) this.activePage.invalidate();\n        this.modals.filter(ctrl => ctrl instanceof PageController).forEach(page => page.invalidate());\n    }\n    async alert(options) {\n        if (!options.title) {\n            options.title = this.getModel().getText().application.alert;\n        }\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.alert(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    async confirm(options) {\n        if (!options.title) {\n            options.title = this.getModel().getText().application.confirm;\n        }\n        if (!options.yesButton) {\n            options.yesButton = this.getModel().getText().confirm.yes;\n        }\n        if (!options.noButton) {\n            options.noButton = this.getModel().getText().confirm.no;\n        }\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.confirm(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    getRootPath() {\n        return '/';\n    }\n    async openModal(ctrl) {\n        this.addModal(ctrl);\n        await this.rerender();\n    }\n    async closeModal(ctrl) {\n        this.removeModal(ctrl);\n        await this.rerender();\n    }\n    getHostApp() {\n        return this.frontHostApp;\n    }\n    async connect() {\n        const data = this.getModel().getData();\n        this.webSocketClient = new WebSocketClient({\n            applicationController: this,\n            protocol             : data.nodeEnv === 'development' ? 'ws' : 'wss',\n            route                : data.route,\n            uuid                 : data.uuid,\n            userId               : data.user ? data.user.id : null,\n        });\n        await this.webSocketClient.connect();\n    }\n    async rpc(name, params) {\n        const result = await this.getModel().rpc(name, params);\n        /*if (result.errorMessage) {\n            this.getHostApp().logError(new Error(result.errorMessage));\n            await this.alert({\n                title     : this.getModel().getText().application.error,\n                titleStyle: {color: 'red'},\n                message   : result.errorMessage\n            });\n        }*/\n        return result;\n    }\n}\n\nwindow.QForms.ApplicationController = ApplicationController;\n","class FieldController extends ModelController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    static create(model, parent) {\n        // console.log('FieldController.create', model.getFullName(), parent.model.getClassName());\n        const page = model.getPage();\n        const form = model.getForm();\n        const CustomClass = FrontHostApp.getClassByName(`${page.getName()}${form.getName()}${model.getName()}FieldController`);\n        const generalClassName = `${parent.model.getClassName()}${model.getClassName()}Controller`;\n        const GeneralClass = FrontHostApp.getClassByName(generalClassName);\n        if (!GeneralClass) throw new Error(`no class ${generalClassName}`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    valueToString(value) {\n        // console.log('Field.valueToString', this.model.getFullName(), typeof value, value);\n        switch (typeof value) {\n            case 'string':\n                return value;\n            case 'object':\n                if (value === null) return '';\n                if (value instanceof Date) return value.toISOString();\n                return JSON.stringify(value, null, 4);\n            case 'number':\n            case 'boolean':\n                return value.toString();\n            case 'undefined':\n                return '';\n            default: throw new Error(`${this.model.getFullName()}: unknown value type: ${typeof value}, value: ${value}`);\n        }\n    }\n    stringToValue(stringValue) {\n        // console.log('FieldController.stringToValue', this.model.getFullName(), stringValue);\n        // if (stringValue === undefined) return undefined;\n        // if (stringValue === null) return null;\n        const fieldType = this.model.getType();\n        // console.log('fieldType:', fieldType);\n        if (stringValue.trim() === '') return null;\n        if (fieldType === 'object' || fieldType === 'boolean') {\n            return JSON.parse(stringValue);\n        } else if (fieldType === 'date') {\n            const date = new Date(stringValue);\n            if (date.toString() === 'Invalid Date') throw new Error(`${this.getApp().getModel().getText().error.invalidDate}: ${stringValue}`);\n            return date;\n        } else if (fieldType === 'number') {\n            const num = Number(stringValue);\n            if (isNaN(num)) throw new Error(this.getApp().getModel().getText().error.notNumber);\n            return num;\n        }\n        return stringValue;\n    }\n    getViewStyle(row) {\n        return null;\n    }\n    async openPage(options) {\n        return await this.getParent().openPage(options);\n    }\n    getForm() {\n        return this.parent;\n    }\n    getPage() {\n        return this.parent.parent;\n    }\n    getApp() {\n        return this.parent.parent.parent;\n    }\n    isVisible() {\n        return this.getModel().getAttr('visible') === 'true';\n    }\n    isAutoFocus() {\n        return this.getModel().getAttr('autoFocus') === 'true';\n    }\n    getAutocomplete() {\n        return this.getModel().getAttr('autocomplete') || null;\n    }\n    getFormat() {\n        return this.getModel().getAttr('format');\n    }\n}\nwindow.QForms.FieldController = FieldController;\n","class RowFormFieldController extends FieldController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            value     : null,\n            parseError: null,\n            error     : null,\n            changed   : false,\n        };\n    }\n    init() {\n        const row = this.getRow();\n        const value = this.model.getValue(row);\n        this.setValue(value);\n        // console.log(this.model.getFullName(), value);\n    }\n    refill() {\n        // console.log('RowFormFieldController.refill', this.model.getFullName());\n        if (!this.view) return;\n        const value = this.model.getValue(this.getRow());\n        this.setValue(value);\n        this.resetErrors();\n        this.refreshChanged();\n    }\n    getRow() {\n        return this.model.getForm().getRow();\n    }\n    copyValueToModel() {\n        // console.log('RowFormFieldController.copyValueToModel', this.model.getFullName());\n        this.model.setValue(this.getRow(), this.getValue());\n    }\n    _onChange(widgetValue) {\n\n    }\n    putValue(widgetValue) {\n        // console.log('RowFormFieldController.putValue', widgetValue);\n        this.onChange(widgetValue, false);\n    }\n    onChange = async (widgetValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onChange', widgetValue);\n        this._onChange(widgetValue);\n        this.resetErrors();\n        try {\n            this.setValueFromWidget(widgetValue);\n        } catch (err) {\n            console.error(`${this.model.getFullName()}: cannot parse view value: ${err.message}`);\n            this.state.parseError = err.message;\n        }\n\n        if (this.model.validateOnChange()) {\n            this.validate();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    onBlur = (widgetValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onBlur', this.model.getFullName());\n        if (this.model.validateOnBlur()) {\n            console.log('validateOnBlur');\n            this.validate();\n            if (this.isValid()) {\n                this.model.setValue(this.getRow(), this.getValue());\n            }\n            this.refreshChanged();\n            if (fireEvent) {\n                try {\n                    this.emit('change', {value: widgetValue});\n                } catch (err) {\n                    console.error('unhandled change event error:', this.model.getFullName(), err);\n                }\n                this.parent.onFieldChange({source: this});\n            }\n        }\n    }\n    getValueForWidget() {\n        const value = this.getValue();\n        // console.log('value:', this.model.getFullName(), value, typeof value);\n        return this.valueToString(value);\n    }\n    setValueFromWidget(widgetValue) {\n        // console.log('RowFormFieldController.setValueFromWidget', this.model.getFullName(), typeof widgetValue, widgetValue);\n        if (typeof widgetValue !== 'string') throw new Error(`${this.model.getFullName()}: widgetValue must be string, but got ${typeof widgetValue}`);\n        const value = this.stringToValue(widgetValue);\n        // console.log('value:', value);\n        this.setValue(value);\n    }\n    setValue(value) {\n        // console.log('RowFormFieldController.setValue', this.model.getFullName(), value);\n        this.state.value = value;\n    }\n    getValue() {\n        return this.state.value;\n    }\n    isChanged() {\n        // console.log('RowFormFieldController.isChanged', this.model.getFullName(), this.state);\n        return this.state.changed;\n    }\n    isValid() {\n        return this.state.parseError === null && this.state.error === null;\n    }\n    validate() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        if (this.isVisible()) {\n            this.state.error = this.getError();\n        }\n    }\n    refreshChanged() {\n        this.state.changed = this.calcChangedState(this.getRow());\n    }\n    getPlaceholder() {\n        // console.log('RowFormFieldController.getPlaceholder', this.model.getFullName(), this.model.getAttr('placeholder'));\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        if (ApplicationController.isDebugMode()) {\n            const value = this.getValue();\n            if (value === undefined) return 'undefined';\n            if (value === null) return 'null';\n            if (value === '') return 'empty string';\n        }\n    }\n    getError() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.view && this.view.getWidget()) {\n            try {\n                const widgetValue = this.view.getWidget().getValue();\n            } catch (err) {\n                return `can't parse value: ${err.message}`;\n            }\n        }\n\n        // null validator\n        const value = this.getValue();\n        if (this.model.isNotNull() && (value === null || value === undefined)) {\n            return this.getNullErrorText();\n        }\n        return null;\n    }\n    getNullErrorText() {\n        return this.getModel().getApp().getText().form.required;\n    }\n    isEditable() {\n        return this.parent.getMode() === 'edit' && !this.model.isReadOnly();\n    }\n    isParseError() {\n        return this.state.parseError !== null;\n    }\n    calcChangedState(row) {\n        // console.log('RowFormFieldController.calcChangedState', this.model.getFullName());\n        if (!row) throw new Error('FieldController: no row');\n        if (this.isParseError()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: parse error: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (!this.isValid()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: not valid: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (this.model.hasColumn()) {\n            const fieldRawValue = this.model.valueToRaw(this.getValue());\n            const dsRawValue = this.model.getRawValue(row);\n            if (fieldRawValue !== dsRawValue) {\n                console.log(`FIELD CHANGED ${this.model.getFullName()}`, dsRawValue, fieldRawValue);\n                return true;\n            }\n        }\n        if (this.model.isChanged(row)) {\n            let original = row[this.model.getAttr('column')];\n            let modified = this.model.getDefaultDataSource().getRowWithChanges(row)[this.model.getAttr('column')];\n            if (original) original = original.substr(0, 100);\n            if (modified) modified = modified.substr(0, 100);\n            console.log(`MODEL CHANGED ${this.model.getFullName()}:`, original, modified);\n            return true;\n        }\n        return false;\n    }\n    setError(error) {\n        this.state.error = error;\n    }\n    resetErrors() {\n        this.setError(null);\n        this.state.parseError = null;\n    }\n    getErrorMessage() {\n        if (this.state.parseError) {\n            return this.state.parseError;\n        }\n        return this.state.error;\n    }\n    renderView() {\n        return React.createElement(this.getViewClass(), {\n            onCreate: this.onViewCreate,\n            ctrl: this,\n        });\n    }\n}\nwindow.QForms.RowFormFieldController = RowFormFieldController;\n","class RowFormCheckBoxFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormCheckBoxFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n}\n\nwindow.QForms.RowFormCheckBoxFieldController = RowFormCheckBoxFieldController;\n","class RowFormCheckBoxListFieldController extends RowFormFieldController {\n    init() {\n        // console.log('RowFormCheckBoxListFieldController.init', this.getModel().getFullName());\n        super.init();\n        const dataSource = this.model.getDataSource();\n        dataSource.on('insert', this.onListInsert);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListDelete);\n    }\n    deinit() {\n        const dataSource = this.model.getDataSource();\n        dataSource.off('insert', this.onListInsert);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListDelete);\n        super.deinit();\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormCheckBoxListFieldView;\n    }\n    getRows() {\n        return this.model.getDataSource().getRows();\n    }\n    onListInsert = async e => {\n        console.log('RowFormCheckBoxListFieldController.onListInsert');\n        await this.rerender();\n    }\n    onListUpdate = async e => {\n        // console.log('RowFormCheckBoxListFieldController.onListUpdate');\n        await this.rerender();\n    }\n    onListDelete = async e => {\n        await this.rerender();\n    }\n    getValueForWidget() {\n        // console.log('RowFormCheckBoxListFieldController.getValueForWidget');\n        const value = this.getValue();\n        // console.log('value:', value);\n        return value;\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n    getItemFromRow(row) {\n        const model = this.getModel();\n        return {\n            value: model.getValueValue(row).toString(),\n            title: model.getDisplayValue(row).toString()\n        };\n    }\n}\n\nwindow.QForms.RowFormCheckBoxListFieldController = RowFormCheckBoxListFieldController;\n","class RowFormComboBoxFieldController extends RowFormFieldController {\n    init() {\n        // console.log('RowFormComboBoxFieldController.init', this.getModel().getFullName());\n        super.init();\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.on('insert', this.onListInsert);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListDelete);\n    }\n    deinit() {\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.off('insert', this.onListInsert);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListDelete);\n        super.deinit();\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormComboBoxFieldView;\n    }\n    getItems() {\n        try {\n            return this.getRows().map(row => ({\n                value: this.model.getValueValue(row).toString(),\n                title: this.model.getDisplayValue(row).toString()\n            }));\n        } catch (err) {\n            err.message = `${this.getModel().getFullName()}: ${err.message}`;\n            throw err;\n        }\n    }\n    getRows() {\n        return this.model.getComboBoxDataSource().getRows();\n    }\n    getPlaceholder() {\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        return ApplicationController.isDebugMode() ? '[null]' : null;\n    }\n    onEditButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onEditButtonClick');\n        const itemEditPage = this.getModel().getAttr('itemEditPage');\n        const value = this.getValue();\n        // console.log('itemEditPage', itemEditPage);\n        // console.log('value:', value);\n        if (itemEditPage && value) {\n            await this.openPage({\n                name: itemEditPage,\n                params: {\n                    key: value\n                }\n            });\n        }\n    }\n    onCreateButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onCreateButtonClick');\n        const newRowMode = this.getModel().getAttr('newRowMode');\n        const itemCreateForm = this.getModel().getAttr('itemCreateForm');\n        if (!itemCreateForm) throw new Error('no itemCreateForm');\n\n        let createPageName;\n        if (newRowMode === 'editPage') {\n            createPageName = this.getModel().getAttr('itemEditPage');\n        } else if (newRowMode === 'createPage') {\n            createPageName = this.getModel().getAttr('itemCreatePage');\n        } else {\n            throw new Error(`wrong newRowMode value: ${newRowMode}`);\n        }\n\n        // page\n        const pc = await this.openPage({\n            name: createPageName,\n            newMode: true\n        });\n\n        // form\n        const form = pc.getModel().getForm(itemCreateForm);\n        const onInsert = async e => {\n            form.off('insert', onInsert);\n            const [key] = e.inserts;\n            const [id] = Helper.decodeValue(key);\n            // console.log('id:', id);\n            await this.onChange(id.toString());\n        }\n        form.on('insert', onInsert);\n    }\n    onListInsert = async e => {\n        console.log('RowFormComboBoxFieldController.onListInsert');\n        await this.rerender();\n    }\n    onListUpdate = async e => {\n        // console.log('RowFormComboBoxFieldController.onListUpdate');\n        await this.rerender();\n    }\n    onListDelete = async e => {\n        await this.rerender();\n    }\n    onItemSelect = async e => {\n        // console.log('RowFormComboBoxFieldController.onItemSelect');\n        if (e.button === 0) {\n            e.preventDefault();\n            const id = this.getValue();\n            const selectedKey = id ? JSON.stringify([id]) : null;\n            await this.openPage({\n                name       : this.getModel().getAttr('itemSelectPage'),\n                selectMode : true,\n                selectedKey: selectedKey,\n                onSelect   : async key => {\n                    if (key) {\n                        const [id] = Helper.decodeValue(key);\n                        // console.log('id:', id);\n                        if (this.getValue() !== id) {\n                            await this.getView().onChange(id.toString());\n                        }\n                    } else {\n                        if (this.getValue() !== null) {\n                            await this.getView().onChange('');\n                        }\n                    }\n                }\n            });\n        }\n    }\n}\n\nwindow.QForms.RowFormComboBoxFieldController = RowFormComboBoxFieldController;\n","class RowFormDateFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormDateFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n}\nwindow.QForms.RowFormDateFieldController = RowFormDateFieldController;\n","class RowFormDateTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.widget2 = null;\n        this.defaultValue = 0;\n        this.state.parseError2 = null;\n        this.state.error2 = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormDateTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    getValueForTime() {\n        // console.log('RowFormDateTimeFieldController.getValueForTime', this.model.getFullName(), this.defaultValue, TimeBox.getStringValue(this.defaultValue));\n        const date = this.getValue();\n        if (date) {\n            const value = date.getHours() * 60 + date.getMinutes();\n            // console.log('value:', value);\n            if (value !== this.defaultValue) {\n                // console.log('not equal to default value', value, this.defaultValue);\n                return value;\n            }\n        }\n        return null;\n    }\n    setValueFromWidget(widgetValue) {\n        if (widgetValue === null) {\n            this.state.parseError2 = null;\n            this.resetErrors2();\n            if (this.widget2) this.widget2.setValue(null);\n        } else {\n            const [h, m] = TimeBox.splitTime(this.defaultValue);\n            widgetValue.setHours(h, m);\n        }\n        this.setValue(widgetValue);\n    }\n    onView2Create = widget2 => {\n        // console.log('RowFormDateTimeFieldController.onView2Create', widget2);\n        this.widget2 = widget2;\n    }\n    /*_onChange(widgetValue) {\n        // console.log('RowFormDateTimeFieldController._onChange', this.widget2);\n        if (widgetValue !== null) {\n            setTimeout(() => {\n                const input = this.widget2.getInputElement();\n                input.focus();\n                input.setSelectionRange(0, input.value.length);\n            }, 0);\n        }\n    }*/\n    onChange2 = (widgetValue, fireEvent = true) => {\n        // console.log('RowFormDateTimeFieldController.onChange2', widgetValue);\n        this.resetErrors2();\n        this.rerender();\n\n        if (!this.isValidateOnChange2()) return;\n\n        try {\n            this.setValueFromView2(widgetValue);\n        } catch (err) {\n            console.log(`${this.model.getFullName()}: cannot parse time: ${err.message}`);\n            this.state.parseError2 = err.message;\n        }\n\n        // validate\n        if (!this.state.parseError2) {\n            this.validate2();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n\n        // changed\n        this.refreshChanged();\n\n        // event\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    onBlur2 = (widgetValue, fireEvent = true) => {\n        console.log('RowFormDateTimeFieldController.onBlur2', widgetValue);\n        if (!this.isEditable()) return;\n\n\n\n        this.resetErrors2();\n        try {\n            this.setValueFromView2(widgetValue);\n        } catch (err) {\n            console.log(`${this.model.getFullName()}: cannot parse time: ${err.message}`);\n            this.state.parseError2 = err.message;\n        }\n\n        // validate\n        if (!this.state.parseError2) {\n            this.validate2();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n\n        // changed\n        this.refreshChanged();\n\n        // event\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    getPlaceholder2() {\n        return TimeBox.getStringValue(this.defaultValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue2(defaultValue) {\n        // console.log('RowFormDateTimeFieldController.setDefaultValue2', this.widget2 ? this.widget2.getValue() : null);\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24 * 60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n        if (this.widget2 && this.widget2.getValue() === null && this.state.value) {\n            this.setValue2(null);\n        }\n    }\n    setValueFromView2(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error(this.getTimeErrorText());\n        this.setValue2(widgetValue);\n    }\n    getTimeErrorText() {\n        return this.getModel().getApp().getText().field.timeNotValid;\n    }\n    setValue2(widgetValue) {\n        const value = widgetValue !== null ? widgetValue : this.defaultValue;\n        const [h, m] = TimeBox.splitTime(value);\n        this.state.value.setHours(h, m);\n    }\n    validate2() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        this.state.error2 = this.getError2();\n    }\n    getError2() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.widget2) {\n            try {\n                const widgetValue = this.widget2.getValue();\n            } catch (err) {\n                return `can't parse time: ${err.message}`;\n            }\n        }\n\n        return null;\n    }\n    isParseError2() {\n        return this.state.parseError2 !== null;\n    }\n    resetErrors2() {\n        this.setError2(null);\n        this.state.parseError2 = null;\n    }\n    setError2(error2) {\n        this.state.error2 = error2;\n    }\n    getErrorMessage2() {\n        if (this.state.parseError2) {\n            return this.state.parseError2;\n        }\n        return this.state.error2;\n    }\n    isValid2() {\n        return this.state.parseError2 === null && this.state.error2 === null;\n    }\n    refill() {\n        // console.log('RowFormDateTimeFieldController.refill');\n        if (!this.widget2) return;\n        super.refill();\n        this.widget2.setValue(this.getValueForTime());\n        this.resetErrors2();\n        this.refreshChanged();\n    }\n    isParseError() {\n        return super.isParseError() || this.isParseError2();\n    }\n    isValid() {\n        return super.isValid() && this.isValid2();\n    }\n    getErrorMessage() {\n        if (super.getErrorMessage() === null && this.getErrorMessage2() === null) return null;\n        return [\n            ...(super.getErrorMessage() ? [super.getErrorMessage()] : []),\n            ...(this.getErrorMessage2() ? [this.getErrorMessage2()] : [])\n        ].join(', ');\n    }\n    isValidateOnChange2() {\n        return true;\n    }\n    isValidateOnBlur2() {\n        return false;\n    }\n}\nwindow.QForms.RowFormDateTimeFieldController = RowFormDateTimeFieldController;\n","class RowFormFileFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormFileFieldView;\n    }\n}\nwindow.QForms.RowFormFileFieldController = RowFormFileFieldController;\n","class RowFormImageFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormImageFieldView;\n    }\n}\nwindow.QForms.RowFormImageFieldController = RowFormImageFieldController;\n","class RowFormLinkFieldController extends  RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('RowFormLinkFieldController.onClick', e);\n        this.emit({source: this});\n    }\n}\nwindow.QForms.RowFormLinkFieldController = RowFormLinkFieldController;\n","class RowFormPasswordFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPasswordFieldView;\n    }\n}\nwindow.QForms.RowFormPasswordFieldController = RowFormPasswordFieldController;\n","class RowFormPhoneFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPhoneFieldView;\n    }\n    getPhoneFormatErrorText() {\n        return this.getModel().getApp().getText().form.phoneNumberFormatError;\n    }\n\n    getError() {\n        super.getError();\n\n        // russian phone format validator\n        const value = this.getValue();\n        if (value && value.substr(0,2) === '+7' && value.length < 12) {\n            return this.getPhoneFormatErrorText();\n        }\n\n        return null;\n    }\n}\nwindow.QForms.RowFormPhoneFieldController = RowFormPhoneFieldController;\n","class RowFormRadioFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormRadioFieldView;\n    }\n    getItems() {\n        try {\n            return this.getRows().map(row => ({\n                value: this.getModel().getValueValue(row).toString(),\n                title: this.getModel().getDisplayValue(row).toString()\n            }));\n        } catch (err) {\n            err.message = `${this.getModel().getFullName()}: ${err.message}`;\n            throw err;\n        }\n    }\n    getRows() {\n        return this.getModel().getDataSource().getRows();\n    }\n}\n","class RowFormTextAreaFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextAreaFieldView;\n    }\n}\nwindow.QForms.RowFormTextAreaFieldController = RowFormTextAreaFieldController;\n","class RowFormTextBoxFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextBoxFieldView;\n    }\n}\nwindow.QForms.RowFormTextBoxFieldController = RowFormTextBoxFieldController;\n","class RowFormTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.defaultValue = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error('wrong time');\n        this.setValue(widgetValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue2(defaultValue) {\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24*60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n    }\n    getPlaceholder() {\n        // console.log('CarReservefromTimeController.getPlaceholder', this.defaultValue);\n        if (this.defaultValue !== null) return TimeBox.getStringValue(this.defaultValue);\n        return super.getPlaceholder();\n    }\n}\nwindow.QForms.RowFormTimeFieldController = RowFormTimeFieldController;\n","class TableFormFieldController extends FieldController {\n    getValueForWidget(row) {\n        // console.log('TableFormFieldController.getValueForWidget');\n        return this.valueToString(this.model.getValue(row));\n    }\n}\nwindow.QForms.TableFormFieldController = TableFormFieldController;\n","class TableFormCheckBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormCheckBoxFieldView;\n    }\n    getValueForWidget(row) {\n        return this.model.getValue(row);\n    }\n}\nwindow.QForms.TableFormCheckBoxFieldController = TableFormCheckBoxFieldController;\n","class TableFormComboBoxFieldController extends TableFormFieldController {\n\n    init() {\n        super.init();\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.on('insert', this.onListUpdate);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListUpdate);\n    }\n\n    deinit() {\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.off('insert', this.onListUpdate);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListUpdate);\n        super.deinit();\n    }\n\n    getViewClass() {\n        return super.getViewClass() || TableFormComboBoxFieldView;\n    }\n\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        const rawValue = this.model.valueToRaw(value);\n        if (rawValue === undefined || rawValue === 'null') return '';\n        const cbRow = this.model.findRowByRawValue(rawValue);\n        if (cbRow) {\n            return this.valueToString(this.model.getDisplayValue(cbRow));\n        }\n        return `[no row for id: ${rawValue}]`;\n    }\n\n    onListUpdate = async e => {\n        // console.log('TableFormComboBoxFieldController.onListUpdate', this.getModel().getFullName());\n        this.getForm().invalidate();\n        await this.getForm().rerender();\n    }\n\n}\nwindow.QForms.TableFormComboBoxFieldController = TableFormComboBoxFieldController;\n","class TableFormDateFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateFieldController = TableFormDateFieldController;\n","class TableFormDateTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateTimeFieldController = TableFormDateTimeFieldController;\n","class TableFormLinkFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('TableFormLinkFieldController.onClick', e);\n        e.preventDefault();\n        this.emit('click', {source: this});\n    }\n}\nwindow.QForms.TableFormLinkFieldController = TableFormLinkFieldController;\n","class TableFormPhoneFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormPhoneFieldView;\n    }\n}\n","class TableFormTextAreaFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextAreaFieldView;\n    }\n}\nwindow.QForms.TableFormTextAreaFieldController = TableFormTextAreaFieldController;\n","class TableFormTextBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextBoxFieldView;\n    }\n    /*beginEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'text';\n        view.firstElementChild.contentEditable = true;\n        const range = document.createRange();\n        range.selectNodeContents(view.firstElementChild);\n        window.getSelection().removeAllRanges();\n        window.getSelection().addRange(range);\n        view.firstElementChild.focus();\n        return true;\n    }*/\n\n    /*endEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'none';\n        view.firstElementChild.contentEditable = false;\n    }*/\n}\nwindow.QForms.TableFormTextBoxFieldController = TableFormTextBoxFieldController;\n","class TableFormTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        return TimeBox.getStringValue(value);\n    }\n}\nwindow.QForms.TableFormTimeFieldController = TableFormTimeFieldController;\n","class FormController extends ModelController {\n    static create(model, parent) {\n        // console.log('FormController.create', model.getFullName());\n        const page = model.getPage();\n        const customClassName = `${page.getName()}${model.getName()}FormController`;\n        const CustomClass = FrontHostApp.getClassByName(customClassName);\n        const GeneralClass = FrontHostApp.getClassByName(`${model.getClassName()}Controller`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    constructor(model, parent) {\n        super(model, parent);\n        this.fields = {};\n    }\n    init() {\n        for (const field of this.model.fields) {\n            const ctrl = this.fields[field.getName()] = FieldController.create(field, this);\n            ctrl.init();\n        }\n    }\n    deinit() {\n        // console.log('FormController.deinit:', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].deinit();\n        }\n        super.deinit();\n    }\n    isValid() {\n        return true;\n    }\n    async openPage(options) {\n        return await this.getPage().openPage(options);\n    }\n    getPage() {\n        return this.parent;\n    }\n    isChanged() {\n        return false;\n    }\n    async onFieldChange(e) {\n        // console.log('FormController.onFieldChange', this.model.getFullName());\n        await this.getPage().onFormChange(e);\n    }\n    getUpdated() {\n        return this.state.updated;\n    }\n    invalidate() {\n        this.state.updated = Date.now();\n    }\n    async onActionClick(name, row) {\n        console.log('FormController.onActionClick', name, row);\n    }\n    getField(name) {\n        return this.fields[name];\n    }\n    getApp() {\n        return this.parent.parent;\n    }\n    getSelectedRowKey() {\n        return null;\n    }\n    isAutoFocus() {\n        for (const name in this.fields) {\n            if (this.fields[name].isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nwindow.QForms.FormController = FormController;\n","class RowFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now(),\n            mode   : 'edit',\n            hasNew : false,\n            changed: false,\n            valid  : true\n        };\n    }\n\n    init() {\n        super.init();\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('insert' , this.onModelInsert);\n        this.model.on('update' , this.onModelUpdate);\n        if (this.model.getDefaultDataSource().getClassName() === 'SqlDataSource') {\n            this.state.mode = 'view';\n        }\n        this.calcState();\n        if (this.state.hasNew) {\n            this.state.mode = 'edit';\n        }\n    }\n\n    deinit() {\n        // console.log('RowFormController.deinit', this.model.getFullName());\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('insert' , this.onModelInsert);\n        this.model.off('update' , this.onModelUpdate);\n        super.deinit();\n    }\n\n    calcState() {\n        this.state.hasNew  = this.model.hasNew();\n        this.state.changed = this.isChanged();\n        this.state.valid   = this.isValid();\n        // console.log('hasNew:', hasNew);\n        // console.log('changed:', changed);\n        // console.log('valid:', valid);\n    }\n\n    refill() {\n        console.log('RowFormController.refill', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].refill();\n        }\n    }\n\n    onModelRefresh = async e => {\n        console.log('RowFormController.onModelRefresh', this.model.getFullName());\n        if (!this.view) return;\n        this.refill();\n        this.invalidate();\n        this.rerender();\n    }\n\n    onModelInsert = async e => {\n        console.log('RowFormController.onModelInsert', this.model.getFullName());\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormInsert(e);\n    }\n\n    onModelUpdate = async e => {\n        console.log('RowFormController.onModelUpdate', this.model.getFullName(), e);\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormUpdate(e);\n    }\n\n    isValid() {\n        // console.log('RowFormController.isValid', this.model.getFullName());\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (!field.isValid()) return false;\n        }\n        return true;\n    }\n    validate() {\n        // console.log('RowFormController.validate', this.getModel().getFullName());\n        for (const name in this.fields) {\n            this.fields[name].validate();\n        }\n        this.invalidate();\n    }\n    clearFieldsError() {\n        for (const name in this.fields) {\n            this.fields[name].setError(null);\n        }\n    }\n    onSaveClick = async () => {\n        console.log('RowFormController.onSaveClick');\n        this.validate();\n        this.calcState();\n        if (this.isValid()) {\n            try {\n                this.getApp().getView().disableRerender();\n                await this.model.update();\n                this.state.mode = 'view';\n                console.log('form model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n                await this.getApp().getView().rerender();\n            }\n        } else {\n            console.error(`cannot update invalid row form: ${this.model.getFullName()}`);\n            await this.rerender();\n        }\n    }\n\n    onDiscardClick = () => {\n        console.log('RowFormController.onDiscardClick', this.model.getFullName());\n        const changedFields = [];\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row) || !field.isValid()) {\n                changedFields.push(name);\n            }\n        }\n        // console.log('changedFields:', changedFields);\n        this.model.discard(changedFields);\n\n        // refill changed fields\n        changedFields.forEach(name => {\n            this.fields[name].refill();\n        });\n\n        // ui\n        this.calcState();\n        if (this.getModel().hasDefaultSqlDataSource()) {\n            this.state.mode = 'view';\n        }\n        this.rerender();\n\n        // event\n        this.parent.onFormDiscard(this);\n    }\n\n    onRefreshClick = async () => {\n        // console.log('RowFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n    }\n\n    isChanged() {\n        // console.log('RowFormController.isChanged', this.model.getFullName());\n        if (this.model.isChanged()) return true;\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row)) return true;\n        }\n        return false;\n    }\n\n    async onFieldChange(e) {\n        // console.log('RowFormController.onFieldChange', this.model.getFullName());\n        this.calcState();\n        this.invalidate();\n        await super.onFieldChange(e);\n    }\n\n    onEditClick = e => {\n        console.log('RowFormController.onEditClick');\n        this.state.mode = 'edit';\n        this.rerender();\n    }\n    onCancelClick = e => {\n        console.log('RowFormController.onCancelClick');\n        this.state.mode = 'view';\n        this.rerender();\n    }\n    getViewClass() {\n        // console.log('RowFormController.getViewClass', this.model.getFullName());\n        return super.getViewClass() || RowFormView;\n    }\n    getActiveRow(withChanges) {\n        return this.model.getRow(withChanges);\n    }\n    getMode() {\n        return this.state.mode;\n    }\n    isActionEnabled(name) {\n        return this.isViewMode();\n    }\n    isEditMode() {\n        return this.getMode() === 'edit';\n    }\n    isViewMode() {\n        return this.getMode() === 'view';\n    }\n}\nwindow.QForms.RowFormController = RowFormController;\n","class TableFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now()\n        };\n        this.grid = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || TableFormView;\n    }\n    init() {\n        super.init();\n        // this.parent.on('hide', this.onHidePage);\n        // this.parent.on('show', this.onShowPage);\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('update' , this.onModelUpdate);\n        this.model.on('delete' , this.onModelDelete);\n        this.model.on('insert' , this.onModelInsert);\n    }\n    deinit() {\n        // this.parent.off('hide', this.onHidePage);\n        // this.parent.off('show', this.onShowPage);\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('update' , this.onModelUpdate);\n        this.model.off('delete' , this.onModelDelete);\n        this.model.off('insert' , this.onModelInsert);\n        super.deinit();\n    }\n    onGridCreate = grid => {\n        this.grid = grid;\n    }\n    onNewClick = async e => {\n        console.log('TableFormController.onNewClick');\n        await this.new();\n    }\n    onRefreshClick = async e => {\n        console.log('TableFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n        // console.error('refresh error handler:', err.message);\n        // alert(err.message);\n    }\n    onDeleteClick = async e => {\n        console.log('TableFormController.onDeleteClick', this.model.getFullName(), this.grid.getActiveRowKey());\n        const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n        if (result) {\n            await this.model.getDefaultDataSource().delete(this.grid.getActiveRowKey());\n        }\n    }\n    onGridCellDblClick = async (row, key) => {\n        // console.log('TableFormController.onGridCellDblClick', row);\n        // const bodyCell = e.bodyCell;\n        // const row = bodyCell.bodyRow.dbRow;\n        // console.log('row:', row);\n        // const key = this.model.getDefaultDataSource().getRowKey(row);\n        // console.log('key:', key);\n        switch (this.model.getAttr('editMethod')) {\n            // case 'table':\n            //     this.grid.gridColumns[bodyCell.qFieldName].beginEdit(bodyCell);\n            // break;\n            case 'form':\n                if (this.getPage().getModel().getOptions().selectMode) {\n                    await this.getPage().selectRow(key);\n                } else {\n                    await this.edit(key);\n                }\n            break;\n        }\n    }\n    onGridLinkClick = async key => {\n        console.log('TableFormController.onGridLinkClick', key);\n        await this.edit(key);\n    }\n    onGridDeleteKeyDown = async (row, key) => {\n        console.log('TableFormController.onGridDeleteKeyDown', row, key);\n        if (this.getModel().getAttr('deleteRowMode') !== 'disabled') {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n            if (result) {\n                await this.model.getDefaultDataSource().delete(key);\n            }\n        }\n    }\n    /*onHidePage = async () => {\n        this.grid.saveScroll();\n    }*/\n    /*onShowPage = async () => {\n        console.log('TableFormController.onShowPage', this.model.getFullName());\n        if (!this.grid.isHidden()) {\n            this.grid.restoreScroll();\n            this.grid.focus();\n            // console.log('document.activeElement:', document.activeElement);\n        }\n    }*/\n    async new() {\n        if (this.model.getAttr('newRowMode') === 'oneclick') {\n            const row = {};\n            this.model.fillDefaultValues(row);\n            await this.model.getDefaultDataSource().insert(row);\n        } else if (this.model.getAttr('newRowMode') === 'editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemEditPage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemCreatePage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemCreatePage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        }\n    }\n    async edit(key) {\n        // console.log('TableForm.edit', this.model.getFullName(), key);\n        if (!this.model.getAttr('itemEditPage')) {\n            throw new Error(`${this.model.getFullName()}: itemEditPage is empty`);\n        }\n        try {\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } catch (err) {\n            // console.error(`${this.model.getFullName()}: edit form error handler:`, err);\n            // alert(`${this.model.getFullName()}: ${err.message}`);\n            err.message = `${this.model.getFullName()} edit: ${err.message}`;\n            throw err;\n        }\n    }\n    onModelRefresh = async e => {\n        console.log('TableFormController.onModelRefresh', this.model.getFullName(), e);\n        if (!this.view) return;\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelInsert = async e => {\n        console.log('TableFormController.onModelInsert', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid && e.source) {\n            for (const key of e.inserts) {\n                this.grid.setActiveRowKey(key);\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelUpdate = async e => {\n        console.log('TableFormController.onModelUpdate', this.model.getFullName(), e, this.view);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key in e.updates) {\n                if (this.grid.getActiveRowKey() === key) {\n                    const newKey = e.updates[key];\n                    if (key !== newKey) {\n                        this.grid.setActiveRowKey(newKey);\n                    }\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelDelete = async e => {\n        console.log('TableFormController.onModelDelete', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key of e.deletes) {\n                if (this.grid.getActiveRowKey() === key) {\n                    this.grid.setActiveRowKey(null);\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n\n    onGridSelectionChange = async key => {\n        // console.log('TableFormController.onGridSelectionChange', key);\n        this.invalidate();\n        await this.getPage().rerender();\n    }\n    getActiveRow() {\n        const key = this.grid.getActiveRowKey();\n        if (!key) throw new Error(`${this.model.getFullName()}: no active row key`);\n        return this.model.getDefaultDataSource().getRow(key);\n    }\n    isRowSelected = () => {\n        // console.log('TableFormController.isRowSelected');\n        return !!this.grid && !!this.grid.getActiveRowKey();\n    }\n    onFrameChanged = async value => {\n        // console.log('TableFormController.onFrameChanged', parseInt(value));\n        const frame = parseInt(value);\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n    onNextClick = async () => {\n        console.log('TableFormController.onNextClick');\n        const frame = this.model.getDefaultDataSource().getFrame() + 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n\n    onPreviousClick = async () => {\n        console.log('TableFormController.onPreviousClick');\n        const frame = this.model.getDefaultDataSource().getFrame() - 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        this.rerender();\n    }\n    canPrev() {\n        return this.model.getDefaultDataSource().getFrame() > 1;\n    }\n    canNext() {\n        const ds = this.model.getDefaultDataSource();\n        return ds.getFrame() < ds.getFramesCount();\n    }\n    getSelectedRowKey() {\n        return this.grid ? this.grid.getActiveRowKey() : null;\n    }\n    isActionEnabled(name) {\n        return this.isRowSelected();\n    }\n}\nwindow.QForms.TableFormController = TableFormController;\n","class PageController extends ModelController {\n    constructor(model, parent, id) {\n        //console.log('PageController.constructor', model);\n        super(model, parent);\n        if (!id) throw new Error('no id');\n        this.id = id;\n        this.forms = [];\n    }\n\n    static create(model, parent, id, options) {\n        // console.log('PageController.create', model.getName());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}PageController`);\n        const Class = CustomClass ? CustomClass : PageController;\n        return new Class(model, parent, id, options);\n    }\n\n    init() {\n        for (const form of this.model.forms) {\n            const ctrl = FormController.create(form, this);\n            ctrl.init();\n            this.forms.push(ctrl);\n        }\n    }\n\n    deinit() {\n        console.log('PageController.deinit: ' + this.model.getFullName());\n        for (const form of this.forms) {\n            form.deinit();\n        }\n        super.deinit();\n    }\n\n    onSaveAndCloseClick = async () => {\n        console.log('PageController.onSaveAndCloseClick');\n        this.validate();\n        if (this.isValid()) {\n            try {\n                this.getApp().getView().disableRerender();\n                await this.getModel().update();\n                console.log('page model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n            }\n            await this.getApp().closePage(this);\n            if (this.getModel().getOptions().onClose) {\n                this.getModel().getOptions().onClose();\n            }\n        } else {\n            await this.rerender();\n        }\n    }\n\n    onClosePageClick = async e => {\n        console.log('PageController.onClosePageClick', this.getModel().getFullName());\n        await this.close();\n    }\n\n    onOpenPageClick = async e => {\n        const name = this.getModel().getName();\n        const key = this.getModel().getKey();\n        const link = this.createOpenInNewLink(name, key);\n        // console.log('link', link);\n        window.open(link, '_blank');\n    }\n    createOpenInNewLink(name, key) {\n        return PageController.createLink({\n            page: name,\n            ...DataSource.keyToParams(key)\n        });\n    }\n    async close() {\n        // console.log('PageController.close', this.model.getFullName());\n        const changed = this.isChanged();\n        // console.log('changed:', changed);\n        // const valid = this.isValid();\n        // console.log('valid:', valid);\n        if (this.model.hasRowFormWithDefaultSqlDataSource() && changed) {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure})\n            if (!result) return;\n        }\n        await this.getApp().closePage(this);\n        if (this.getModel().getOptions().onClose) {\n            this.getModel().getOptions().onClose();\n        }\n    }\n    validate() {\n        for (const form of this.forms) {\n            if (form instanceof RowFormController) {\n                form.validate();\n            }\n        }\n    }\n    isValid() {\n        // console.log('PageController.isValid', this.model.getFullName());\n        for (const form of this.forms) {\n            if (!form.isValid()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async onFormChange(e) {\n        // console.log('PageController.onFormChange', this.model.getFullName());\n        this.rerender();\n    }\n    onFormDiscard(formController) {\n        console.log('PageController.onFormDiscard', this.model.getFullName());\n        this.rerender();\n    }\n\n    onFormUpdate(e) {\n        console.log('PageController.onFormUpdate:', this.model.getFullName(), e);\n        this.rerender();\n    }\n\n    onFormInsert(e) {\n        console.log('PageController.onFormInsert:', this.model.getFullName());\n        // console.log('hasNew:', this.model.hasNew());\n        for (const form of this.forms) {\n            form.invalidate();\n        }\n        this.rerender();\n    }\n\n    async openPage(options) {\n        if (!options.params) {\n            options.params = {};\n        }\n        const params =  this.getModel().getParams();\n        for (const name in params) {\n            if (!options.params[name]) {\n                options.params[name] = params[name];\n            }\n        }\n        return await this.getApp().openPage(options);\n    }\n\n    isChanged() {\n        // console.log('PageController.isChanged', this.model.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged()) {\n                // console.log(`FORM CHANGED: ${form.model.getFullName()}`);\n                return true;\n            }\n        }\n        return false;\n    }\n    getApp() {\n        return this.parent;\n    }\n    getViewClass() {\n        return super.getViewClass() || PageView;\n    }\n    static createLink(params = null) {\n        // const query = window.location.search.split('?')[1];\n        // console.log('query:', query);\n        if (params) {\n            return [\n                window.location.pathname,\n                [\n                    // ...(query ? query.split('&') : []),\n                    ...(ApplicationController.isDebugMode() ? ['debug=1'] : []),\n                    ...Object.keys(params).map(name => `${name}=${encodeURI(params[name])}`)\n                ].join('&')\n            ].join('?');\n        }\n        return window.location.pathname;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.model.getName() === name);\n    }\n    async onActionClick(name) {\n        console.log('PageController.onActionClick', name);\n    }\n    onKeyDown = async e => {\n        // console.log('PageController.onKeyDown', this.getModel().getFullName(), e);\n        if (e.key === 'Escape') {\n            if (this.isModal()) {\n                await this.close();\n            }\n        }\n    }\n    getTitle() {\n        const model = this.getModel();\n        const key = model.getKey();\n        let keyPart;\n        if (key) {\n            const arr = JSON.parse(key);\n            if (arr.length === 1 && typeof arr[0] === 'number') {\n                keyPart = `#${arr[0]}`;\n            } else {\n                keyPart = `${key}`;\n            }\n        }\n        return [\n            model.getCaption(),\n            ...(ApplicationController.isDebugMode() ? [`(${this.getId()})`] : []),\n            ...(keyPart ? [keyPart] : [])\n        ].join(' ');\n    }\n    getSelectedRowKey() {\n        for (const form of this.forms) {\n            const selectedRowKey = form.getSelectedRowKey();\n            if (selectedRowKey) return selectedRowKey;\n        }\n        return null;\n    }\n    onSelectClick = async e => {\n        console.log('PageController.onSelectClick');\n        await this.selectRow(this.getSelectedRowKey());\n    }\n    onResetClick = async e => {\n        console.log('PageController.onResetClick');\n        await this.selectRow(null);\n    }\n    async selectRow(key) {\n        console.log('PageController.selectRow', key);\n        await this.close();\n        await this.getModel().getOptions().onSelect(key);\n    }\n    invalidate() {\n        this.forms.forEach(form => form.invalidate());\n    }\n    getId() {\n        return this.id;\n    }\n    isModal() {\n        return this.getModel().isModal();\n    }\n    isAutoFocus() {\n        for (const form of this.forms) {\n            if (form.isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nwindow.QForms.PageController = PageController;\n","class Model extends EventEmitter {\n    constructor(data, parent) {\n        if (!data.name) throw new Error(`${data.class} no name`);\n        super();\n        this.data     = data;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.getFullName()}: model already deinited`);\n        this.deinited = true;\n    }\n    static getAttr(data, name) {\n        return data[name];\n    }\n    static getCol(data, name) {\n        return data[name];\n    }\n    static getName(data) {\n        return Model.getAttr(data, 'name');\n    }\n    static getClassName(data) {\n        return Model.getAttr(data, 'class');\n    }\n    isAttr(name) {\n        // return this.data[name] !== undefined;\n        return this.data.hasOwnProperty(name);\n    }\n    getAttr(name) {\n        return this.data[name];\n    }\n    getCol(name) {\n        return this.data[name];\n    }\n    getClassName() {\n        return this.getAttr('class');\n    }\n    getName() {\n        return this.getAttr('name');\n    }\n    getFullName() {\n        if (this.parent) {\n            return `${this.parent.getFullName()}.${this.getName()}`;\n        }\n        return this.getName();\n    }\n    getCaption() {\n        return this.getAttr('caption');\n    }\n    getDataSource(name) {\n        return this.dataSources.find(dataSource => dataSource.getName() === name);\n    }\n    createDataSources() {\n        for (const data of this.data.dataSources) {\n            try {\n                const Class = FrontHostApp.getClassByName(data.class);\n                if (!Class) throw new Error(`no class ${data.class} class`);\n                const dataSource = new Class(data, this);\n                dataSource.init();\n                this.dataSources.push(dataSource);\n            } catch (err) {\n                err.message = `${this.getFullName()}.${data.name}: ${err.message}`;\n                throw err;\n            }\n        }\n    }\n    deinitDataSources() {\n        for (const dataSource of this.dataSources) {\n            dataSource.deinit();\n        }\n    }\n    hasActions() {\n        return this.data.actions.length > 0;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getData() {\n        return this.data;\n    }\n}\nwindow.QForms.Model = Model;\n","class Application extends Model {\n    constructor(data) {\n        super(data);\n        this.databases   = [];\n        this.dataSources = [];\n    }\n\n    init() {\n        // console.log('Application.init');\n        if (!this.data.theme) throw new Error('no theme attr');\n\n        // databases\n        for (const data of this.data.databases) {\n            const database = new Database(data, this);\n            database.init();\n            this.addDatabase(database);\n        }\n\n        // data sources\n        this.createDataSources();\n    }\n\n    deinit() {\n        this.deinitDataSources();\n        // TODO: add deinit on opened pages\n        super.deinit();\n    }\n\n    addDatabase(database) {\n        this.databases.push(database);\n    }\n\n    async logout() {\n        const data = await this.request({\n            'action': 'logout'\n        });\n        this.emit('logout', {source: this});\n    }\n\n    async request(options) {\n        // console.warn('Application.request', data);\n        const start = Date.now();\n        const [headers, body] = await FrontHostApp.doHttpRequest2(options);\n        if (!headers['qforms-platform-version']) throw new Error('no qforms-platform-version header');\n        if (!headers['qforms-app-version']) throw new Error('no qforms-app-version header');\n        this.emit('request', {\n            time: Date.now() - start,\n            remotePlatformVersion: headers['qforms-platform-version'],\n            remoteAppVersion: headers['qforms-app-version']\n        });\n        return body;\n    }\n\n    getDatabase(name) {\n        // console.log('Application.getDatabase', name);\n        const database = this.databases.find(database => database.getName() === name);\n        if (!database) throw new Error(`no database: ${name}`);\n        return database;\n    }\n\n    getText() {\n        return this.data.text;\n    }\n    getUser() {\n        return this.data.user;\n    }\n    getDomain() {\n        return this.data.domain;\n    }\n    getVirtualPath() {\n        return this.data.virtualPath;\n    }\n    async rpc(name, params) {\n        console.log('Application.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.request({\n            uuid  : this.getAttr('uuid'),\n            action: 'rpc',\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    emitResult(result, source = null) {\n        console.log('Application.emitResult', result, source);\n        const promises = [];\n        for (const database in result) {\n            promises.push(...this.getDatabase(database).emitResult(result[database], source));\n        }\n        // console.log('promises:', promises);\n        return Promise.allSettled(promises);\n    }\n    getNodeEnv() {\n        return this.data.nodeEnv;\n    }\n}\nwindow.QForms.Application = Application;\n","class Column  extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        if (!this.getAttr('type')) throw new Error(`column ${this.getFullName()}: no type`);\n        if (!['string', 'number', 'boolean', 'object', 'date'].includes(this.getAttr('type'))) {\n            throw new Error(`${this.getFullName()}: wrong column type: ${this.getAttr('type')}`);\n        }\n    }\n    init() {\n        // console.log('Column.init', this.getFullName());\n    }\n    getType() {\n        return this.getAttr('type');\n    }\n}\nwindow.QForms.Column = Column;\n","class DataSource extends Model {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.rows      = null;\n        this.rowsByKey = null;\t\t\t\t\t\t// for row search by key\n        this.news      = [];                        // new rows\n        this.changes   = new Map();\n    }\n\n    init() {\n        // console.log('DataSource.init', this.getFullName(), this.getClassName());\n        this.setRows(this.data.rows);\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.on('insert' , this.onTableInsert);\n            table.on('update' , this.onTableUpdate);\n            table.on('delete' , this.onTableDelete);\n            table.on('refresh', this.onTableRefresh);\n        }\n    }\n\n    deinit() {\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.off('insert' , this.onTableInsert);\n            table.off('update' , this.onTableUpdate);\n            table.off('delete' , this.onTableDelete);\n            table.off('refresh', this.onTableRefresh);\n        }\n        super.deinit();\n    }\n\n    setRows(rows) {\n        this.rows = rows;\n        this.fillRowsByKey();\n    }\n\n    addRow(row) {\n        this.rows.push(row);\n        const key = this.getRowKey(row);\n        this.rowsByKey[key] = row;\n    }\n\n    addRows(rows) {\n        for (let i = 0; i < rows.length; i++) {\n            this.rows.push(rows[i]);\n        }\n        this.fillRowsByKey();\n    }\n\n    getRowsLength() {\n        return this.rows.length;\n    }\n\n    fillRowsByKey() {\n        // console.log('DataSource.fillRowsByKey', this.getFullName())\n        this.rowsByKey = {};\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            const key = this.getRowKey(row);\n            this.rowsByKey[key] = row;\n        }\n        // console.log('this.rowsByKey:', this.getFullName(), this.rowsByKey);\n    }\n\n    // deinit() {\n    //     console.log('DataSource.deinit', this.getFullName());\n    //     super.deinit();\n    // }\n\n    getType(column) {\n        // console.log('DataSource.getType', this.getClassName(), column);\n        throw new Error('DataSource column type not implemented');\n    }\n\n    discardRowColumn(row, column) {\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            delete this.changes.get(row)[column];\n        }\n    }\n\n    changeRowColumn(row, column, newValue) {\n        if (!this.changes.has(row)) this.changes.set(row, {});\n        this.changes.get(row)[column] = newValue;\n    }\n\n    setValue(row, column, value) {\n        // console.log('DataSource.setValue', this.getFullName(), column, value, typeof value);\n        if (value === undefined) throw new Error(`${this.getFullName()}: undefined is wrong value for data source`);\n        if (typeof value === 'object' && value !== null) {\n            throw new Error(`setValue: ${this.getFullName()}.${column}: object must be in JSON format`);\n        }\n        if (row[column] !== value) {\n            this.changeRowColumn(row, column, value);\n            if (row[column] === undefined && value === null) {  // workaround for new rows\n                this.discardRowColumn(row, column);\n            }\n        } else {\n            this.discardRowColumn(row, column);\n        }\n        if (this.changes.has(row) && !Object.keys(this.changes.get(row)).length) this.changes.delete(row);\n        // console.log('changes:', this.changes);\n    }\n\n    isChanged() {\n        // console.log('DataSource.isChanged', this.getFullName(), this.changes.size);\n        return !!this.changes.size;\n    }\n\n    hasNew() {\n        return !!this.news.length;\n    }\n\n    isRowColumnChanged(row, column) {\n        // console.log('DataSource.isRowColumnChanged', this.getFullName());\n        return row[column] !== this.getValue(row, column);\n    }\n\n    getValue(row, column) {\n        // console.log('DataSource.getValue', column);\n        let value;\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            value = this.changes.get(row)[column];\n        } else {\n            value = row[column];\n        }\n        if (value !== undefined && typeof value !== 'string') {\n            throw new Error(`getValue: ${this.getFullName()}.${column}: object must be in JSON format, value: ${value}`);\n        }\n        // console.log('DataSource.getValue:', value);\n        return value;\n    }\n\n    getKeyValues(row) {\n        return this.data.keyColumns.reduce((key, column) => {\n            key[column] = JSON.parse(row[column]);\n            return key;\n        }, {});\n    }\n\n    getRowKey(row) {\n        // console.log('DataSource.getRowKey', row);\n        const arr = [];\n        for (const column of this.data.keyColumns) {\n            if (row[column] === undefined) return null;\n            if (row[column] === null) throw new Error('wrong value null for data source value');\n            try {\n                const value = JSON.parse(row[column]);\n                arr.push(value);\n            } catch (err) {\n                console.log('getRowKey: cannot parse: ', row[column]);\n                throw err;\n            }\n        }\n        return JSON.stringify(arr);\n    }\n\n    removeRow(key) {\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key} to remove`);\n        const i = this.rows.indexOf(row);\n        if (i === -1) throw new Error(`${this.getFullName()}: no row with i ${i} to remove`);\n        this.rows.splice(i, 1);\n        delete this.rowsByKey[key];\n    }\n\n    newRow(row) {\n        console.log('DataSource.newRow', this.getFullName(), row);\n        if (this.rows.length > 0) {\n            throw new Error('rows can be added to empty data sources only in new mode');\n        }\n        this.news.push(row);\n    }\n\n    getSingleRow(withChanges = false) {\n        if (this.news[0]) return this.news[0];\n        const row = this.rows[0];\n        if (!row) throw new Error('no single row');\n        if (withChanges) return this.getRowWithChanges(row);\n        return row;\n    }\n\n    getForm() {\n        return this.parent instanceof Form ? this.parent : null;\n    }\n\n    getPage() {\n        if (this.parent instanceof Page) return this.parent;\n        if (this.parent instanceof Form) return this.parent.getPage();\n        return null;\n    }\n\n    getApp() {\n        if (this.parent instanceof Application) return this.parent;\n        return this.parent.getApp();\n    }\n\n    /*getNamespace() {\n        if (this.parent instanceof Form) {\n            return this.parent.getPage().getName() + '.' + this.parent.getName() + '.' + this.getName();\n        }\n        if (this.parent instanceof Page) {\n            return this.parent.getName() + '.' + this.getName();\n        }\n        return this.getName();\n    }*/\n\n    getRow(key) {\n        return this.rowsByKey[key] || null;\n    }\n\n    /*getRowByKey(key) {\n        return this.rowsByKey[key] || null;\n    }*/\n\n    getRows() {\n        return this.rows;\n    }\n\n    getRowByIndex(i) {\n        return this.rows[i];\n    }\n\n    discard() {\n        console.log('DataSource.discard', this.getFullName());\n        if (!this.isChanged()) throw new Error(`no changes in data source ${this.getFullName()}`);\n        this.changes.clear();\n    }\n\n    static keyToParams(key, paramName = 'key') {\n        if (typeof key !== 'string') throw new Error('key not string');\n        const params = {};\n        const arr = JSON.parse(key);\n        if (arr.length === 1) {\n            params[paramName] = arr[0];\n        } else  if (arr.length > 1) {\n            for (let i = 0; i < arr.length; i++) {\n                params[`${paramName}${i + 1}`] = arr[i];\n            }\n        } else {\n            throw new Error(`invalid key: ${key}`);\n        }\n        return params;\n    }\n\n    getChangesByKey() {\n        const changes = {};\n        for (const row of this.changes.keys()) {\n            changes[this.getRowKey(row)] = this.changes.get(row);\n        }\n        return changes;\n    }\n\n    getRowWithChanges(row) {\n        if (this.changes.has(row)) {\n            return {...row, ...this.changes.get(row)};\n        }\n        return row;\n    }\n\n    hasNewRows() {\n        return this.news.length > 0;\n    }\n\n    static copyNewValues(row, newValues) {\n        for (const name in newValues) {\n            row[name] = newValues[name];\n        }\n    }\n\n    updateRow(key, newValues) {\n        console.log('DataSource.updateRow', this.getFullName(), key, newValues);\n        if (!key) throw new Error('no key');\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key}`);\n        const newKey = this.getRowKey(newValues);\n        DataSource.copyNewValues(row, newValues);// copy new values to original row object\n        if (key !== newKey) {\n            delete this.rowsByKey[key];\n            this.rowsByKey[newKey] = row;\n        }\n        // console.log(`key: ${key} to ${newKey}`);\n        // console.log('this.rowsByKey:', this.rowsByKey);\n        // console.log('this.data.rows:', this.data.rows);\n    }\n\n    getTable() {\n        if (!this.getAttr('table')) throw new Error(`${this.getFullName()}: table attr empty`);\n        return this.getDatabase().getTable(this.getAttr('table'));\n    }\n\n    getDatabase() {\n        // console.log('DataSource.getDatabase', this.getFullName(), this.getAttr('database'));\n        if (!this.getAttr('database')) throw new Error(`${this.getFullName()}: database attr empty`);\n        return this.getApp().getDatabase(this.getAttr('database'));\n    }\n\n    getType(columnName) {\n        // console.log('DataSource.getType', columnName);\n        const type = this.getTable().getColumn(columnName).getType();\n        // console.log('type:', type);\n        return type;\n    }\n\n    async insert() {\n        console.log('DataSource.insert', this.news);\n        if (!this.news.length) throw new Error('no new rows to insert');\n        const inserts = [];\n        for (const row of this.news) {\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            DataSource.copyNewValues(row, newValues);\n            // console.log('row:', row);\n            const key = this.getRowKey(row);\n            if (!key) throw new Error('invalid insert row, no key');\n            // console.log('key:', key);\n            inserts.push(key);\n        }\n        this.changes.clear();\n        for (const row of this.news) {\n            this.addRow(row);\n        }\n        this.news = [];\n        console.log('rows:', this.getRows());\n        console.log('inserts:', inserts);\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert({source: this, inserts});\n        }\n        this.emit('insert', {source: this, inserts});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {insert: inserts}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async delete(key) {\n        console.log('DataSource.delete', key);\n        if (!key) throw new Error('no key');\n        this.removeRow(key);\n\n        // events\n        const deletes = [key];\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete({source: this, deletes});\n        }\n        this.emit('delete', {source: this, deletes});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {delete: deletes}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async update() {\n        console.log('DataSource.update', this.getFullName());\n        if (this.news.length) {\n            await this.insert();\n            return;\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n        const changes = this.getChangesByKey();\n        // console.log('changes:', changes);\n\n        // apply changes to rows\n        const updates = {};\n        for (const key in changes) {\n            // console.log('key:', key);\n            const row = this.getRow(key);\n            // console.log('row:', row);\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            const newKey = this.getRowKey(newValues);\n            // console.log('newKey:', newKey);\n            this.updateRow(key, newValues);\n            updates[key] = newKey;\n        }\n        this.changes.clear();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate({source: this, updates});\n        }\n        this.emit('update', {source: this, updates});\n\n        const database = this.getAttr('database');\n        const table    = this.getAttr('table');\n        if (database && table) {\n            const reuslt = {[database]: {\n                    [table]: {\n                        update: updates\n                    }\n                }};\n            await this.getApp().emitResult(reuslt, this);\n            return reuslt;\n        }\n        return null;\n    }\n\n    onTableInsert = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableInsert', this.getFullName(), e);\n        if (!e.inserts.length) throw new Error(`${this.getFullName()}: no inserts`);\n\n        for (const key of e.inserts) {\n            if (this.getRow(key)) {\n                console.log('rows:', this.rows);\n                console.log('rowsByKey:', this.rowsByKey);\n                throw new Error(`${this.getFullName()}: row already in this data source: ${key}`);\n            }\n            const newValues = e.source.getRow(key);\n            const newRow = {};\n            DataSource.copyNewValues(newRow, newValues);\n            // console.log('newRow:', newRow);\n            this.addRow(newRow);\n        }\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableUpdate = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableUpdate', this.getFullName(), e);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n        for (const key in e.updates) {\n            if (this.getRow(key)) {\n                const newKey = e.updates[key];\n                const sourceRow = e.source.getRow(newKey);\n                this.updateRow(key, sourceRow);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableDelete = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableDelete', this.getFullName(), e);\n        if (!e.deletes.length) throw new Error(`${this.getFullName()}: no deletes`);\n        for (const key of e.deletes) {\n            if (this.getRow(key)) {\n                this.removeRow(key);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        throw new Error('DataSource.onTableRefresh: not implemented');\n    }\n\n    isSurrogate() {\n        return this.isAttr('database');\n    }\n\n    moveRow(row, offset) {\n        console.log('DataSource.moveRow');\n        Helper.moveArrItem(this.rows, row, offset);\n\n        // refresh event\n        const event = {source: this};\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh(event);\n        }\n        this.emit('refresh', event);\n    }\n\n}\nwindow.QForms.DataSource = DataSource;\n","class SqlDataSource extends DataSource {\n    constructor(data, parent) {\n        super(data, parent);\n        this.frame  = 1;\n        this.count  = data.count !== undefined ? data.count : null;\n        this.lastFrame = 1;\n    }\n\n    /*init() {\n        super.init();\n    }*/\n\n    /*deinit() {\n        super.deinit();\n    }*/\n\n    async insert(row) {\n        console.log('SqlDataSource.insert', row);\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to insert');\n\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: 'insert',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            row   : this.getRowWithChanges(row),\n        });\n\n        // key & values\n        const [key] = Object.keys(result[database][table].insertEx);\n        if (!key) throw new Error('no inserted row key');\n        const values = result[database][table].insertEx[key];\n        for (const column in values) {\n            row[column] = values[column];\n        }\n        // console.log('key:', key);\n        // console.log('row:', row);\n\n        // clear news & changes\n        this.news.splice(this.news.indexOf(row), 1);\n        // console.log('this.news:', this.news);\n        this.changes.clear();\n\n        // add new row to rows\n        this.addRow(row);\n\n        // events\n        const event = {source : this, inserts: result[database][table].insert};\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(event);\n        }\n        this.emit('insert', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    async update() {\n        console.log('SqlDataSource.update', this.getFullName());\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to update');\n        if (this.news[0]) {\n            return await this.insert(this.news[0]);\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n\n        // specific to SqlDataSource\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action : 'update',\n            page   : this.getForm().getPage().getName(),\n            form   : this.getForm().getName(),\n            changes: this.getChangesByKey(),\n        });\n\n\n        const [key] = Object.keys(result[database][table].updateEx);\n        if (!key) throw new Error('no updated row');\n        const newValues = result[database][table].updateEx[key];\n        // const newKey = this.getRowKey(newValues);\n\n        this.changes.clear();\n        this.updateRow(key, newValues);\n\n        // events\n        const event = {source: this, updates: result[database][table].update};\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(event);\n        }\n        this.emit('update', event);\n        await this.getApp().emitResult(result, this);\n        return result;\n    }\n\n    async delete(key) {\n        console.log('SqlDataSource.delete:', this.getFullName(), key);\n        if (!key) throw new Error('no key');\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (!table) {\n            throw new Error(`no table in SqlDataSource: ${this.getFullName()}`);\n        }\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: '_delete',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            params: {key},\n        });\n        await this.refill();\n\n        // events\n        const event = {source: this, deletes: result[database][table].delete};\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(event);\n        }\n        this.emit('delete', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    onTableUpdate = async e => {\n        console.log('SqlDataSource.onTableUpdate', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        // console.log('updates:', e.updates);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableInsert = async (e) => {\n        console.log('SqlDataSource.onTableInsert', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableInsert`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableDelete = async (e) => {\n        console.log('SqlDataSource.onTableDelete', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self delete', this.getFullName());\n            return;\n        }\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        console.log('SqlDataSource.onTableRefresh', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source) throw new Error('refresh is foreign result so source must be null');\n        await this.refill();\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh(e);\n        }\n        this.emit('refresh', e);\n    }\n\n    getPageParams() {\n        const page = this.getPage();\n        return page ? page.getParams() : {};\n    }\n\n    async refresh() {\n        console.log('SqlDataSource.refresh', this.getFullName());\n        await this.refill();\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh({source: this});\n        }\n    }\n\n    async refill() {\n        console.log('SqlDataSource.refill', this.getFullName());\n        if (this.isChanged()) throw new Error(`cannot refill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame : this.frame} : {});\n        this.count = data.count;\n        this.setRows(data.rows);\n        this.lastFrame = 1;\n    }\n\n    async fill(frame) {\n        if (this.isChanged()) throw new Error(`cannot fill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame} : {});\n        this.count = data.count;\n        this.addRows(data.rows);\n    }\n\n    async more() {\n        if (!this.hasMore()) throw new Error(`${this.getFullName()}: no more rows`);\n        this.lastFrame++;\n        await this.fill(this.lastFrame);\n    }\n\n    async select(params = {}) {\n        console.log('SqlDataSource.select', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action        : 'select',\n            page          : page ? page.getName()           : null,\n            form          : form ? form.getName()           : null,\n            ds            : this.getName(),\n            params        : {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!(data.rows instanceof Array)) throw new Error('rows must be array');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }\n\n    /*async selectSingle(params = {}) {\n        console.log('SqlDataSource.selectSingle', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action: 'selectSingle',\n            page  : page ? page.getName()           : null,\n            form  : form ? form.getName()           : null,\n            ds    : this.getName(),\n            params: {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!data.row) throw new Error('selectSingle must return row');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }*/\n\n    getFramesCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        if (this.count === 0) return 1;\n        if (this.getLimit()) return Math.ceil(this.count / this.getLimit());\n        return 1;\n    }\n    getLimit() {\n        if (this.getAttr('limit')) return parseInt(this.getAttr('limit'));\n        return null;\n    }\n    getCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        return this.count;\n    }\n    getFrame() {\n        return this.frame;\n    }\n    getLastFrame() {\n        return this.lastFrame;\n    }\n    setFrame(frame) {\n        this.frame = frame;\n    }\n    hasMore() {\n        return this.lastFrame < this.getFramesCount();\n    }\n}\nwindow.QForms.SqlDataSource = SqlDataSource;\n","class Database extends Model {\n    constructor(...args) {\n        super(...args);\n        this.tables = [];\n    }\n\n    init() {\n        // console.log('Database.init', this.getName());\n        for (const data of this.data.tables) {\n            const table = new Table(data, this);\n            table.init();\n            this.addTable(table);\n        }\n    }\n\n    addTable(table) {\n        this.tables.push(table);\n    }\n\n    getTable(name) {\n        const table = this.tables.find(table => table.getName() === name);\n        if (!table) throw new Error(`${this.getFullName()}: no table with name: ${name}`);\n        return table;\n    }\n\n    emitResult(result, source = null) {\n        console.log('Database.emitResult');\n        const promises = [];\n        for (const table in result) {\n            promises.push(...this.getTable(table).emitResult(result[table], source));\n        }\n        return promises;\n    }\n}\nwindow.QForms.Database = Database;\n","class Field extends Model {\n    // constructor(data, parent) {\n    //     super(data, parent);\n    // }\n\n    init() {\n    }\n\n    replaceThis(value) {\n        return value.replace(/\\{([@\\w\\.]+)\\}/g, (text, name) => {\n            if (name.indexOf('.') === -1) return text;\n            let arr = name.split('.');\n            if (arr[0] === 'this') arr[0] = this.getPage().getName();\n            return `{${arr.join('.')}}`;\n        });\n    }\n\n    fillDefaultValue(row) {\n        // console.log('Field.fillDefaultValue', this.getFullName());\n        const column = this.getAttr('column');\n        if (!column) return;\n        const defaultValue = this.replaceThis(this.getAttr('defaultValue'));\n        const js = Helper.templateToJsString(defaultValue, this.getPage().getParams());\n        if (typeof js !== 'string') throw new Error(`${this.getFullName()}: defaultValue must be templated to js string`);\n        // console.log('js', this.getFullName(), js);\n        try {\n            const value = eval(js);\n            if (value !== undefined) {\n                row[column] = this.valueToRaw(value);\n            }\n        } catch (err) {\n            throw new Error(`[${this.getFullName()}] fillDefaultValue: ${err.toString()}`);\n        }\n    }\n\n    valueToPageParams(row) {\n        // console.log('Field.valueToPageParams', this.getFullName());\n        if (this.isParam()) {\n            // we need to dump value to param without meta info such as timezone prop\n            const value = this.getValue(row);\n            const rawValue = this.valueToRaw(value);\n            // console.log('value:', value);\n            // console.log('rawValue:', rawValue);\n            const paramValue = rawValue !== undefined ? Helper.decodeValue(rawValue) : undefined;\n            this.getPage().setParam(this.getFullName(), paramValue);\n        }\n    }\n\n    isChanged(row) {\n        // console.log('Field.isChanged', this.getFullName());\n        if (!this.getAttr('column')) throw new Error(`${this.getFullName()}: field has no column`);\n        return this.getDefaultDataSource().isRowColumnChanged(row, this.getAttr('column'));\n    }\n\n    hasColumn() {\n        return !!this.getAttr('column');\n    }\n\n    getValue(row) {\n        // console.log('Field.getValue', this.getFullName());\n        if (!row && this.parent instanceof RowForm) {\n            row = this.parent.getRow();\n        }\n        if (!row) {\n            console.log(`${this.getFullName()}: need row`);\n        }\n        let rawValue;\n        if (this.getAttr('column')) {\n            rawValue = this.getRawValue(row);\n        } else if (this.getAttr('value')) {\n            const js = this.getAttr('value');\n            try {\n                rawValue = eval(js);\n            } catch (err) {\n                throw new Error(`${this.getFullName()}: value eval error: ${err.message}`);\n            }\n        } else {\n            throw new Error(`${this.getFullName()}: no column and no value in field`);\n        }\n\n        // use rawValue\n        if (rawValue === undefined) return undefined;\n        if (rawValue === null) throw new Error(`[${this.getFullName()}]: null is wrong raw value`);\n        try {\n            return this.rawToValue(rawValue);\n        } catch (err) {\n            console.log('raw value decode error:', this.getFullName(), rawValue);\n            throw err;\n        }\n    }\n\n    setValue(row, value) {\n        // console.log('Field.setValue', this.getFullName(), value);\n        if (!this.getAttr('column')) throw new Error(`field has no column: ${this.getFullName()}`);\n        const rawValue = this.valueToRaw(value);\n        this.getForm().getDefaultDataSource().setValue(row, this.getAttr('column'), rawValue);\n        this.valueToPageParams(row);\n    }\n\n    rawToValue(rawValue) {\n        return Helper.decodeValue(rawValue);\n    }\n\n    valueToRaw(value) {\n        return Helper.encodeValue(value);\n    }\n\n    getRawValue(row) {\n        if (!this.hasColumn()) throw new Error(`${this.getFullName()}: no column`);\n        return this.getForm().getDefaultDataSource().getValue(row, this.getAttr('column'));\n    }\n\n    getDefaultDataSource() {\n        return this.getForm().getDefaultDataSource();\n    }\n\n    getType() {\n        if (this.getAttr('type')) {\n            return this.getAttr('type');\n        }\n        if (this.getAttr('column')) {\n            const dataSource = this.getDefaultDataSource();\n            if (dataSource.isSurrogate()) {\n                return dataSource.getType(this.getAttr('column'));\n            }\n            throw new Error('field type empty');\n        }\n        throw new Error('field type and column empty');\n    }\n\n    getForm() {\n        return this.parent;\n    }\n\n    getPage() {\n        return this.parent.parent;\n    }\n\n    getApp() {\n        return this.parent.parent.parent;\n    }\n\n    isReadOnly() {\n        return this.data.readOnly === 'true';\n    }\n    isNotNull() {\n        return this.data.notNull === 'true';\n    }\n    isNullable() {\n        return this.data.notNull === 'false';\n    }\n    getWidth() {\n        const width = parseInt(this.data.width);\n        if (isNaN(width)) return null;\n        if (width === 0) return 100;\n        return width;\n    }\n    getFullName() {\n        return `${this.getPage().getName()}.${this.getForm().getName()}.${this.getName()}`;\n    }\n    isParam() {\n        return this.data.param === 'true';\n    }\n    validateOnChange() {\n        if (this.data.validateOnChange !== undefined) {\n            return this.data.validateOnChange === 'true';\n        }\n        return true;\n    }\n    validateOnBlur() {\n        if (this.data.validateOnBlur !== undefined) {\n            return this.data.validateOnBlur === 'true';\n        }\n        return false;\n    }\n    getCaption() {\n        const caption = this.getAttr('caption');\n        if (caption === '') {\n            const columnName = this.getAttr('column');\n            if (columnName && this.parent.hasDefaultSqlDataSource()) {\n                const ds = this.parent.getDataSource('default');\n                if (ds.getAttr('table')) {\n                    const column = ds.getTable().getColumn(columnName);\n                    return column.getCaption();\n                }\n            }\n        }\n        return caption;\n    }\n}\nwindow.QForms.Field = Field;\n","class CheckBoxField extends Field {\n\n}\nwindow.QForms.CheckBoxField = CheckBoxField;\n","class CheckBoxListField extends Field {\n\n    getDisplayValue(row) {\n        let value = null;\n        if (row[this.data.displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[this.data.displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[this.data.displayColumn]);\n                throw err;\n            }\n        } else {\n            value = this.data.displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        if (!row[this.data.valueColumn]) {\n            throw new Error('no valueColumn in CheckBoxList data source');\n        }\n        return Helper.decodeValue(row[this.data.valueColumn]);\n    }\n\n    getDataSource() {\n        const name = this.data.dataSourceName;\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        }\n        if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        }\n        if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        throw new Error(`${this.getFullName()}: no data source: ${name}`);\n    }\n\n    findRowByRawValue(rawValue) {\n        return this.getDataSource().getRows().find(row => row[this.data.valueColumn] === rawValue);\n    }\n}\nwindow.QForms.CheckBoxListField = CheckBoxListField;\n","class ComboBoxField extends Field {\n\n    getDisplayValue(row) {\n        let value = null;\n        if (row[this.data.displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[this.data.displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[this.data.displayColumn]);\n                throw err;\n            }\n        } else {\n            value = this.data.displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        if (!row[this.data.valueColumn]) {\n            throw new Error('no valueColumn in ComboBox data source');\n        }\n        return Helper.decodeValue(row[this.data.valueColumn]);\n    }\n\n    getComboBoxDataSource() {\n        const name = this.data.dataSourceName;\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        }\n        if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        }\n        if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        throw new Error(`${this.getFullName()}: no data source: ${name}`);\n    }\n\n    findRowByRawValue(rawValue) {\n        return this.getComboBoxDataSource().getRows().find(row => row[this.data.valueColumn] === rawValue);\n    }\n}\nwindow.QForms.ComboBoxField = ComboBoxField;\n","class DateField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n\n    rawToValue(raw) {\n        // console.log('DateField.rawToValue', this.getFullName(), raw);\n        const value = Helper.decodeValue(raw);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addTimezoneOffset(value);\n        }\n        // console.log('DateField.rawToValue:', raw, value);\n        return value;\n    }\n\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = Helper.cloneDate(value);\n            Helper.removeTimezoneOffset(v);\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateField = DateField;\n","class DateTimeField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n    rawToValue(rawValue) {\n        const value = Helper.decodeValue(rawValue);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addTimezoneOffset(value);\n        }\n        // console.log('DateTimeField.rawToValue:', value);\n        return value;\n    }\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = Helper.cloneDate(value);\n            Helper.removeTimezoneOffset(v);\n            // console.log('date without timezone:', v);\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateTimeField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateTimeField = DateTimeField;\n","class FileField extends Field {\n}\nwindow.QForms.FileField = FileField;\n","class ImageField extends Field {\n}\nwindow.QForms.ImageField = ImageField;\n","class LabelField extends Field {\n}\nwindow.QForms.LabelField = LabelField;\n","class LinkField extends Field {\n}\nwindow.QForms.LinkField = LinkField;\n","class PasswordField extends Field {\n\n}\nwindow.QForms.PasswordField = PasswordField;\n","class PhoneField extends Field {\n}\nwindow.QForms.PhoneField = PhoneField;\n","class RadioField extends Field {\n    getDisplayValue(row) {\n        const displayColumn = this.getAttr('displayColumn');\n        let value = null;\n        if (row[displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[displayColumn]);\n                throw err;\n            }\n        } else {\n            value = displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        const valueColumn = this.getAttr('valueColumn');\n        if (!row[valueColumn]) {\n            throw new Error('no valueColumn in ComboBox data source');\n        }\n        return Helper.decodeValue(row[valueColumn]);\n    }\n\n    getDataSource() {\n        const name = this.getAttr('dataSourceName');\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        }\n        if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        }\n        if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        throw new Error(`${this.getFullName()}: no data source: ${name}`);\n    }\n\n    findRowByRawValue(rawValue) {\n        const valueColumn = this.getAttr('valueColumn');\n        return this.getDataSource().getRows().find(row => row[valueColumn] === rawValue);\n    }\n}\n","class TextAreaField extends Field {\n    getRows() {\n        return this.data.rows;\n    }\n    getCols() {\n        return this.data.cols;\n    }\n}\nwindow.QForms.TextAreaField = TextAreaField;\n","class TextBoxField extends Field {\n\n}\nwindow.QForms.TextBoxField = TextBoxField;\n","class TimeField extends Field {\n\n}\nwindow.QForms.TimeField = TimeField;\n","class Form extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.dataSources = [];\n        this.fields      = [];\n    }\n\n    init() {\n        // data sources\n        this.createDataSources();\n\n        // fields\n        for (const data of this.data.fields) {\n            const Class = FrontHostApp.getClassByName(data.class);\n            if (!Class) throw new Error(`no class ${data.class} class`);\n            const field = new Class(data, this);\n            field.init();\n            this.fields.push(field);\n        }\n    }\n\n    deinit() {\n        // console.log('Form.deinit:', this.getFullName());\n        this.deinitDataSources();\n        for (const field of this.fields) {\n            field.deinit();\n        }\n        super.deinit();\n    }\n\n    fillDefaultValues(row) {\n        for (const field of this.fields) {\n            field.fillDefaultValue(row);\n        }\n    }\n\n    onDataSourceRefresh(e) {\n        // console.log('Form.onDataSourceRefresh', this.getFullName());\n        this.emit('refresh', e);\n    }\n\n    onDataSourceInsert(e) {\n        // console.log('Form.onDataSourceInsert', this.getFullName());\n        this.parent.onFormInsert(e);\n        this.emit('insert', e);\n    }\n\n    onDataSourceUpdate(e) {\n        // console.log('Form.onDataSourceUpdate', this.getFullName());\n        this.emit('update', e);\n    }\n\n    onDataSourceDelete(e) {\n        // console.log('Form.onDataSourceDelete', this.getFullName());\n        this.emit('delete', e);\n    }\n\n    async update() {\n        console.log('Form.update', this.getFullName(), this.isChanged());\n        if (this.getPage().deinited) throw new Error('page already deinited');\n        if (!this.isChanged() && !this.getDefaultDataSource().hasNewRows()) throw new Error(`form model not changed or does not have new rows: ${this.getFullName()}`);\n        await this.getDefaultDataSource().update();\n    }\n\n    isChanged() {\n        // console.log('Form.isChanged', this.getFullName());\n        return this.getDefaultDataSource().isChanged();\n    }\n\n    hasNew() {\n        // console.log('Form.hasNew', this.getFullName());\n        return this.getDefaultDataSource().hasNew();\n    }\n\n    async rpc(name, params) {\n        console.log('Form.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getPage().getName(),\n            form  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n\n    getKey() {\n        return null;\n    }\n\n    getDefaultDataSource() {\n        const dataSource = this.getDataSource('default');\n        if (!dataSource) throw new Error(`${this.getFullName()}: no default data source`);\n        return dataSource;\n    }\n\n    getPage() {\n        return this.parent;\n    }\n\n    getApp() {\n        return this.parent.parent;\n    }\n    async refresh() {\n        await this.getDefaultDataSource().refresh();\n    }\n    getField(name) {\n        return this.fields.find(field => field.getName() === name);\n    }\n    hasDefaultSqlDataSource() {\n        return this.getDefaultDataSource().getClassName() === 'SqlDataSource';\n    }\n    decodeRow(row) {\n        const values = {};\n        for (const field of this.fields) {\n            const column = field.getAttr('column');\n            if (column) {\n                values[column] = field.getValue(row);\n            }\n        }\n        return values;\n    }\n}\nwindow.QForms.Form = Form;\n","class RowForm extends Form {\n    init() {\n        super.init();\n        if (this.isNewMode()) {\n            this.getDefaultDataSource().newRow(this.createRow());\n        }\n        this.fillParams(this.getRow()); // dump row values to page params\n    }\n\n    isNewMode() {\n        const newMode = this.getAttr('newMode');\n        if (newMode ===  'true') return  true;\n        if (newMode === 'false') return false;\n        return this.getPage().isNewMode();\n    }\n\n    fillParams(row) {\n        for (const field of this.fields) {\n            field.valueToPageParams(row);\n        }\n    }\n\n    onDataSourceUpdate(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceUpdate(e);\n    }\n\n    onDataSourceInsert(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceInsert(e);\n    }\n\n    getRow(withChanges) {\n        return this.getDefaultDataSource().getSingleRow(withChanges);\n    }\n\n    getKey() {\n        // console.log('RowForm.getKey', this.getFullName());\n        const dataSource = this.getDefaultDataSource();\n        if (dataSource.getClassName() === 'SqlDataSource') {\n            const row = this.getRow();\n            return dataSource.getRowKey(row);\n        }\n        return null;\n    }\n\n    createRow() {\n        const row = {};\n        this.fillDefaultValues(row);\n        return row;\n    }\n\n    discard(fields) {\n        console.log('RowForm.discard', fields);\n        if (this.getDefaultDataSource().isChanged()) {\n            this.getDefaultDataSource().discard();\n            fields.forEach(name => {\n                this.getField(name).valueToPageParams(this.getRow())\n            });\n        }\n    }\n\n}\nwindow.QForms.RowForm = RowForm;\n","class TableForm extends Form {\n\n}\nwindow.QForms.TableForm = TableForm;\n","class Page extends Model {\n    constructor(data, parent, options) {\n        // console.log('Page.constructor', options);\n        // if (!options.id) throw new Error('no page id');\n        super(data, parent);\n        this.options     = options; // {id, modal, newMode, selectMode, params}\n        this.dataSources = [];\n        this.forms       = [];\n        this.params      = {};\n        if (options.onCreate) {\n            options.onCreate(this);\n        }\n    }\n\n    init() {\n        this.createDataSources();\n        this.createForms();\n        console.log('page options:', this.options);\n        console.log('page params:', this.getParams());\n    }\n\n    deinit() {\n        // console.log('Page.deinit', this.getFullName());\n        if (this.deinited) throw new Error(`page ${this.getFullName()} is already deinited`);\n        this.deinitDataSources();\n        this.deinitForms();\n        super.deinit();\n    }\n\n    getOptions() {\n        return this.options;\n    }\n\n    createForms() {\n        // forms\n        for (const data of this.data.forms) {\n            const FormClass = FrontHostApp.getClassByName(Model.getClassName(data));\n            const form = new FormClass(data, this);\n            form.init();\n            this.forms.push(form);\n        }\n    }\n\n    deinitForms() {\n        for (const form of this.forms) {\n            form.deinit();\n        }\n    }\n\n    /*getId() {\n        return this.options.id;\n    }*/\n\n    getParams() {\n        return {\n            ...(this.options.params || {}),\n            ...this.params,\n        };\n    }\n\n    setParam(name, value) {\n        // console.log('Page.setParam', name);\n        this.params[name] = value !== undefined ? value : null;\n    }\n\n    async update() {\n        console.log('Page.update', this.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged() || form.hasNew()) {\n                await form.update();\n            }\n        }\n    }\n\n    discard() {\n        console.log('Page.discard', this.getFullName());\n        for (const form of this.forms) {\n            form.discard();\n        }\n    }\n\n    getKey() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') {\n                return form.getKey();\n            }\n        }\n        return null;\n    }\n\n    hasRowFormWithDefaultDs() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.getDefaultDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowFormWithDefaultSqlDataSource() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.hasDefaultSqlDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') return true;\n        }\n        return false;\n    }\n\n    hasTableForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'TableForm') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isNewMode() {\n        return !!this.options.newMode;\n    }\n\n    hasNew() {\n        for (const form of this.forms) {\n            if (form.hasNew()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getApp() {\n        return this.parent;\n    }\n\n    isModal() {\n        return !!this.options.modal;\n    }\n\n    onFormInsert(e) {\n        console.log('Page.onFormInsert', e);\n        for (const key of e.inserts) {\n            const keyParams = DataSource.keyToParams(key);// key params to page params\n            for (const name in keyParams) {\n                this.setParam(name, keyParams[name]);\n            }\n        }\n    }\n    async rpc(name, params) {\n        // console.log('Page.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result =  await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.getName() === name);\n    }\n}\nwindow.QForms.Page = Page;\n","class Table extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.columns = [];\n    }\n    init() {\n        // console.log('Table.init', this.getFullName());\n        for (const data of this.data.columns) {\n            const column = new Column(data, this);\n            column.init();\n            this.addColumn(column);\n        }\n    }\n    addColumn(column) {\n        this.columns.push(column);\n    }\n    getColumn(name) {\n        const column = this.columns.find(column => column.getName() === name);\n        if (!column) throw new Error(`table ${this.getFullName()}: no column ${name}`);\n        return column;\n    }\n    emitResult(result, source = null) {\n        console.log('Table.emitResult');\n        return [\n            ...(result.insert  ? [this.emitInsert(source, result.insert)] : []),\n            ...(result.update  ? [this.emitUpdate(source, result.update)] : []),\n            ...(result.delete  ? [this.emitDelete(source, result.delete)] : []),\n            ...(result.refresh ? [this.emitRefresh(source              )] : [])\n        ];\n    }\n    emitInsert(source, inserts) {\n        return this.emit('insert', {source, inserts});\n    }\n    emitUpdate(source, updates) {\n        return this.emit('update', {source, updates});\n    }\n    emitDelete(source, deletes) {\n        return this.emit('delete', {source, deletes});\n    }\n    emitRefresh(source) {\n        return this.emit('refresh', {source});\n    }\n}\nwindow.QForms.Table = Table;\n"]}