{"version":3,"sources":["Controller/View.jsx","Controller/AlertController/View.jsx","Controller/ConfirmController/View.jsx","Controller/LoginController/View.jsx","Controller/ModalController/ImageDialogController/View.jsx","Controller/ModelController/ModelView.jsx","Controller/ModelController/ApplicationController/ApplicationView.jsx","Controller/ModelController/FieldController/FieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxFieldController/RowFormCheckBoxFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxListFieldController/RowFormCheckBoxListFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormComboBoxFieldController/RowFormComboBoxFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateFieldController/RowFormDateFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateTimeFieldController/RowFormDateTimeFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormFileFieldController/RowFormFileFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormImageFieldController/RowFormImageFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormLinkFieldController/RowFormLinkFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormPasswordFieldController/RowFormPasswordFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormPhoneFieldController/RowFormPhoneFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormRadioFieldController/RowFormRadioFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextAreaFieldController/RowFormTextAreaFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextBoxFieldController/RowFormTextBoxFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormTimeFieldController/RowFormTimeFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormCheckBoxFieldController/TableFormCheckBoxFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormComboBoxFieldController/TableFormComboBoxFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateFieldController/TableFormDateFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateTimeFieldController/TableFormDateTimeFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormLinkFieldController/TableFormLinkFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormPhoneFieldController/TableFormPhoneFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextAreaFieldController/TableFormTextAreaFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextBoxFieldController/TableFormTextBoxFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormTimeFieldController/TableFormTimeFieldView.jsx","Controller/ModelController/FormController/FormView.jsx","Controller/ModelController/FormController/RowFormController/RowFormView.jsx","Controller/ModelController/FormController/TableFormController/TableFormView.jsx","Controller/ModelController/PageController/PageView.jsx"],"names":["View","ReactComponent","constructor","props","super","ctrl","Error","this","name","onCreate","getCtrl","AlertView","el","React","createRef","getHeaderStyle","options","titleStyle","render","createElement","className","getCssClassNames","ref","tabIndex","onKeyDown","getCssBlockName","style","title","onClick","onCloseClick","CloseIcon2","message","Button","classList","onOkButtonClick","componentDidMount","getElement","focus","ConfirmView","yesButton","noButton","onYesClick","LoginView","_defineProperty","e","document","querySelector","disabled","errMsgRef","current","innerHTML","renderLogo","renderTitle","getFrontHostApp","getData","method","onSubmit","onLoginFormSubmit","type","value","JSON","stringify","Date","getTimezoneOffset","TextBox","placeholder","getText","login","username","required","autoFocus","spellCheck","onChange","Password","password","errMsg","signIn","ImageDialogView","console","log","src","getSrc","onImageClick","ModelView","getActionsForDropdownButton","getModel","getCol","map","data","actionName","Model","getName","renderActionIcon","key","getAttr","enabled","isActionEnabled","model","isAttr","getStyle","window","QForms","ApplicationView","renderActivePage","activePage","renderView","getViewClass","parent","onViewCreate","renderModals","modals","PageController","Modal","getId","renderHeader","Menu","items","getMenuItemsProp","onMenuItemClick","renderMain","renderFooter","Statusbar","onStatusbarCreate","getFullName","FieldView","row","getViewStyle","RowFormFieldView","widget","getWidget","getClassList","isEditable","isChanged","getErrorMessage","RowFormCheckBoxFieldView","args","checked","CheckBox","onWidgetCreate","getValueForWidget","readOnly","onCheckBoxChange","RowFormCheckBoxListFieldView","getItems","getRows","getItemFromRow","err","renderCheckBoxList","CheckBoxList","RowFormComboBoxFieldView","widgetValue","rerender","isCreateButtonVisible","getForm","getMode","renderSelect","Select","getPlaceholder","onMouseDown","onItemSelect","renderEditButton","onEditButtonClick","getValue","renderCreateButton","onCreateButtonClick","RowFormDateFieldView","DropdownDatePicker","format","getFormat","oldDates","minDate","RowFormDateTimeFieldView","async","onChange2","isCloseVisible","widget2","state","undefined","renderDatePart","highlightedDate","getHighlightedDate","selectToday","getSelectToday","getMinDate","renderTimePart","TimeBox2","onView2Create","getValueForTime","onBlur","isValidateOnBlur2","onBlur2","getPlaceholder2","onClear","onClear2","getRow","RowFormFileFieldView","file","target","files","Helper","readFileAsDataURL","app","getApp","imageDialogCtrl","ImageDialogController","id","getNewId","onClose","getPage","getView","openModal","image","div","getImage","getDiv","updateSize","ns","getNaturalSize","innerText","Image","formatNumber","length","xmlns","width","height","viewBox","d","onClearClick","setTimeout","componentDidUpdate","prevProps","prevState","snapshot","RowFormImageFieldView","RowFormLinkFieldView","href","RowFormPasswordFieldView","setState","addCssClass","removeCssClass","isAutoFocus","autocomplete","getAutocomplete","onFocus","CloseIcon","onIconClick","VisibilityIcon","VisibilityOffIcon","RowFormPhoneFieldView","renderPhoneBox","PhoneBox","renderClearButton","renderPhoneIcon","PhoneIcon","RowFormRadioFieldView","item","data-value","RowFormTextAreaFieldView","TextArea","rows","cols","getCols","RowFormTextBoxFieldView","isEnabled","renderTextBox","renderCloseIcon","RowFormTimeFieldView","TimeBox","TableFormFieldView","span","getSpanOffsetWidth","offsetWidth","TableFormCheckBoxFieldView","TableFormComboBoxFieldView","TableFormDateFieldView","TableFormDateTimeFieldView","TableFormLinkFieldView","TableFormPhoneFieldView","formatPhoneNumber","TableFormTextAreaFieldView","TableFormTextBoxFieldView","TableFormTimeFieldView","FormView","li","dataset","action","onActionClick","getActiveRow","error","alert","checkParent","shouldComponentUpdate","nextProps","nextState","updated","RowFormView","renderToolbar","text","hasDefaultSqlDataSource","onEditClick","visible","form","edit","changed","hasNew","valid","onSaveClick","save","getKey","onCancelClick","cancel","isValid","onDiscardClick","discard","onRefreshClick","refresh","isActionsVisible","hasActions","DropdownButton","actions","onActionsClick","isActionsEnabled","MoreVertIcon","renderLabel","fieldCtrl","getCaption","isNotNull","color","renderField","renderFieldView","renderError","Tooltip","position","hidden","tip","renderGroup","renderGroups","Object","keys","fields","filter","getField","isVisible","TableFormView","column","onUnmount","createLink","page","DataSource","keyToParams","dataSource","getDefaultDataSource","newRowMode","onNewClick","new","refreshButton","deleteRowMode","onDeleteClick","isRowSelected","delete","renderPaging","getRowsLength","getLimit","getCount","canPrev","onPreviousClick","LeftIcon","size","ComboBox","getFrame","toString","onFrameChanged","Array","getFramesCount","fill","val","i","canNext","onNextClick","RightIcon","getGridColumns","field","getWidth","getGridExtraColumn","getGridClass","Grid","renderGrid","onGridCreate","columns","getRowKey","onDoubleClick","onGridCellDblClick","onDeleteKeyDown","onGridDeleteKeyDown","onSelectionChange","onGridSelectionChange","onLinkClick","onGridLinkClick","renderGridCellView","getUpdated","extraColumn","selectedKey","getOptions","createLinkCallback","PageView","isToolbar","isSelectMode","getFormTabs","forms","getTitle","content","renderForm","getRowForms","getClassName","getTableForms","formCtrl","renderRowForms","hasRowFormWithDefaultSqlDataSource","renderSelectButton","onSelectClick","getSelectedRowKey","DoneIcon","select","renderSaveAndCloseButton","onSaveAndCloseClick","saveAndClose","renderCloseButton","onClosePageClick","close","renderActionsDropdownButton","renderTableForms","tableForms","Tab2","tabs","renderOpenPageHeaderButton","onOpenPageClick","OpenInNewIcon","renderClosePageHeaderButton","isModal","renderForms","hasRowForm","hasTableForm","renderForms2"],"mappings":"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","file":"viewer-jsx.3752cd1522f2c73363e27723d111c04b.js","sourcesContent":["class View extends ReactComponent {\n    constructor(props) {\n        super(props);\n        if (!props.ctrl) throw new Error(`${this.constructor.name}: no ctrl`);\n        if (!props.onCreate) throw new Error(`${this.constructor.name}: no onCreate`);\n    }\n    getCtrl() {\n        return this.props.ctrl;\n    }\n}\n","class AlertView extends View {\n    constructor(props) {\n        super(props);\n        this.el = React.createRef();\n    }\n    getHeaderStyle() {\n        return this.getCtrl().options.titleStyle/* || {color: 'red'}*/;\n    }\n    render() {\n        return (\n            <div className={this.getCssClassNames()}\n                 ref={this.el}\n                 tabIndex={0}\n                 onKeyDown={this.getCtrl().onKeyDown}\n            >\n                <div className={`${this.getCssBlockName()}__container`}>\n                    <div className={`${this.getCssBlockName()}__content flex-column`}>\n                        <div className={`${this.getCssBlockName()}__header`}>\n                            <div className={`${this.getCssBlockName()}__title`} style={this.getHeaderStyle()}>\n                                {this.getCtrl().options.title || 'Alert'}\n                            </div>\n                            <div className={`${this.getCssBlockName()}__close`} onClick={this.getCtrl().onCloseClick}>\n                                <CloseIcon2/>\n                            </div>\n                        </div>\n                        <div className={`${this.getCssBlockName()}__main flex-max`}>\n                            {this.getCtrl().options.message}\n                        </div>\n                        <div className={`${this.getCssBlockName()}__footer`}>\n                            <Button classList={[`${this.getCssBlockName()}__ok-button`]} title={'OK'} onClick={this.getCtrl().onOkButtonClick}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    componentDidMount() {\n        this.getElement().focus();\n    }\n}\n","class ConfirmView extends View {\n    constructor(props) {\n        super(props);\n        this.el = React.createRef();\n    }\n    render() {\n        // console.log('ConfirmView.render', this.getCtrl().options);\n        if (!this.getCtrl().options.yesButton) throw new Error('no yesButton option');\n        if (!this.getCtrl().options.noButton) throw new Error('no noButton option');\n        return (\n            <div className={this.getCssClassNames()}\n                 ref={this.el}\n                 tabIndex={0}\n                 onKeyDown={this.getCtrl().onKeyDown}\n            >\n                <div className={`${this.getCssBlockName()}__container`}>\n                    <div className={`${this.getCssBlockName()}__content flex-column`}>\n                        <div className={`${this.getCssBlockName()}__header`}>\n                            <div className={`${this.getCssBlockName()}__title`} style={this.getCtrl().options.titleStyle}>\n                                {this.getCtrl().options.title || 'Confirm'}\n                            </div>\n                            <div className={`${this.getCssBlockName()}__close`} onClick={this.getCtrl().onCloseClick}>\n                                <CloseIcon2/>\n                            </div>\n                        </div>\n                        <div className={`${this.getCssBlockName()}__main flex-max`}>\n                            {this.getCtrl().options.message}\n                        </div>\n                        <div className={`${this.getCssBlockName()}__footer`}>\n                            <Button classList={[`${this.getCssBlockName()}__no-button`]}\n                                    title={this.getCtrl().options.noButton}\n                                    onClick={this.getCtrl().onCloseClick}\n                            />\n                            <Button classList={[`${this.getCssBlockName()}__yes-button`]}\n                                    title={this.getCtrl().options.yesButton}\n                                    onClick={this.getCtrl().onYesClick}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    componentDidMount() {\n        this.getElement().focus();\n    }\n}\n","class LoginView extends View {\n    constructor(props) {\n        super(props);\n        this.errMsgRef = React.createRef();\n    }\n    onLoginFormSubmit = e => {\n        // console.log('LoginView.onLoginFormSubmit');\n        document.querySelector('.LoginView__button').disabled = true;\n        // e.preventDefault();\n    }\n    renderLogo() {\n    }\n    renderTitle() {\n        return this.getCtrl().getFrontHostApp().getData().title;\n    }\n    onChange = e => {\n        this.errMsgRef.current.innerHTML = '';\n    }\n    render() {\n        // console.log('LoginView.render');\n        return <div className={`${this.getCssBlockName()}__container`}>\n            <form className={`${this.getCssBlockName()}__form`}\n                  method={'post'}\n                  onSubmit={this.onLoginFormSubmit}\n            >\n                <input type={'hidden'} name={'tzOffset'} value={JSON.stringify(new Date().getTimezoneOffset())}/>\n                <input type={'hidden'} name={'action'} value={'login'}/>\n                <div className={`${this.getCssBlockName()}__logo-title`}>\n                    <div className={`${this.getCssBlockName()}__logo`}>\n                        {this.renderLogo()}\n                    </div>\n                    <div className={`${this.getCssBlockName()}__title`}>\n                        {this.renderTitle()}\n                    </div>\n                </div>\n                <TextBox classList={[`${this.getCssBlockName()}__field`]}\n                       name={'username'}\n                       placeholder={this.getCtrl().getText().login.username}\n                       required={true}\n                       autoFocus={true}\n                       spellCheck={false}\n                       value={this.getCtrl().getFrontHostApp().getData().username || ''}\n                       onChange={this.onChange}\n                />\n                <Password classList={[`${this.getCssBlockName()}__field2`]}\n                          name={'password'}\n                          placeholder={this.getCtrl().getText().login.password}\n                          value={this.getCtrl().getFrontHostApp().getData().password || ''}\n                          onChange={this.onChange}\n                />\n                <p className={`${this.getCssBlockName()}__err-msg`} ref={this.errMsgRef}>\n                    {this.getCtrl().getFrontHostApp().getData().errMsg}\n                </p>\n                <button className={`${this.getCssBlockName()}__button`} type={'submit'}>\n                    {this.getCtrl().getText().login.signIn}\n                </button>\n            </form>\n        </div>;\n    }\n}\n","class ImageDialogView extends View {\n    constructor(props) {\n        super(props);\n        this.el = React.createRef();\n    }\n    render() {\n        console.log('ImageDialogView.render');\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}\n                    ref={this.el}\n                    tabIndex={0}\n                    onKeyDown={this.getCtrl().onKeyDown}\n        >\n            <img className={`${this.getCssBlockName()}__image`} src={ctrl.getSrc()} onClick={ctrl.onImageClick}/>\n            <div className={`${this.getCssBlockName()}__close`} onClick={ctrl.onCloseClick}>\n                <CloseIcon2/>\n            </div>\n        </div>;\n    }\n    componentDidMount() {\n        this.getElement().focus();\n    }\n}\n","class ModelView extends View {\n    getActionsForDropdownButton() {\n        return this.props.ctrl.getModel().getCol('actions').map(data => {\n            const actionName = Model.getName(data);\n            return {\n                name : actionName,\n                title: this.renderActionIcon ? [\n                    <div key={'icon'}>{this.renderActionIcon(actionName)}</div>,\n                    <div key={'title'}>{Model.getAttr(data, 'caption')}</div>\n                ] : Model.getAttr(data, 'caption'),\n                enabled: this.getCtrl().isActionEnabled(actionName)\n            };\n        });\n    }\n    getCssBlockName() {\n        const model = this.props.ctrl.getModel();\n        if (model.isAttr('cssBlock') && model.getAttr('cssBlock')) {\n            return model.getAttr('cssBlock');\n        }\n        return super.getCssBlockName();\n    }\n    getStyle() {\n\n    }\n}\n\nwindow.QForms.ModelView = ModelView;\n","class ApplicationView extends ModelView {\n    renderActivePage() {\n        const ctrl = this.props.ctrl;\n        if (ctrl.activePage) {\n            return this.renderView(ctrl.activePage);\n        }\n    }\n    renderView(ctrl, props = {}) {\n        return React.createElement(ctrl.getViewClass(), {\n            parent  : this,\n            ctrl    : ctrl,\n            onCreate: ctrl.onViewCreate,\n            ...props\n        });\n    }\n    renderModals() {\n        return this.props.ctrl.modals.map(ctrl => {\n            if (ctrl instanceof PageController) {\n                return <Modal key={ctrl.getId()}>\n                    {this.renderView(ctrl)}\n                </Modal>;\n            }\n            return this.renderView(ctrl, {key: ctrl.getId()});\n        });\n    }\n    renderHeader() {\n        return <header className={`${this.getCssBlockName()}__header`}>\n            <Menu items={this.getCtrl().getMenuItemsProp()} onClick={this.getCtrl().onMenuItemClick}/>\n        </header>;\n    }\n    renderMain() {\n        return <main className={`${this.getCssBlockName()}__main`}>\n            {this.renderActivePage()}\n        </main>;\n    }\n    renderFooter() {\n        return <footer className={`${this.getCssBlockName()}__footer`}>\n            <Statusbar onCreate={this.getCtrl().onStatusbarCreate}/>\n        </footer>;\n    }\n    render() {\n        console.log(`${this.constructor.name}.render`, this.props.ctrl.model.getFullName());\n        return <div className={`${this.getCssBlockName()}__container`} style={this.getStyle()}>\n            {this.renderHeader()}\n            {this.renderMain()}\n            {this.renderFooter()}\n            {this.renderModals()}\n        </div>;\n    }\n}\n\nwindow.QForms.ApplicationView = ApplicationView;\n","class FieldView extends ModelView {\n    getStyle(row) {\n        return this.getCtrl().getViewStyle(row);\n    }\n}\n","class RowFormFieldView extends FieldView {\n    constructor(props) {\n        super(props);\n        this.widget = null;\n    }\n    getWidget() {\n        return this.widget;\n    }\n    getClassList() {\n        const ctrl = this.getCtrl();\n        return [\n            ...super.getClassList(),\n            ...(ctrl.isEditable()                ? ['editable'] : []),\n            ...(ctrl.isChanged()                ? ['changed'] : []),\n            ...(ctrl.getErrorMessage() !== null ? ['error']   : []),\n        ];\n    }\n    onWidgetCreate = widget => {\n        this.widget = widget;\n    }\n}\nwindow.QForms.RowFormFieldView = RowFormFieldView;\n","class RowFormCheckBoxFieldView extends RowFormFieldView {\n    onCheckBoxChange = (checked, e) => {\n        this.getCtrl().onChange(checked);\n    }\n    render() {\n        // console.log('RowFormCheckBoxFieldView.render');\n        const ctrl = this.getCtrl();\n        return <div className={this.getCssClassNames()}>\n            <CheckBox\n                onCreate={this.onWidgetCreate}\n                checked={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                disabled={!ctrl.isEditable()}\n                onChange={this.onCheckBoxChange}\n            />\n        </div>;\n    }\n}\n\nwindow.QForms.RowFormCheckBoxFieldView = RowFormCheckBoxFieldView;\n","class RowFormCheckBoxListFieldView extends RowFormFieldView {\n    getItems() {\n        const ctrl = this.getCtrl();\n        try {\n            return ctrl.getRows().map(row => {\n                return ctrl.getItemFromRow(row);\n            });\n        } catch (err) {\n            err.message = `${ctrl.getModel().getFullName()}: ${err.message}`;\n            throw err;\n        }\n    }\n    renderCheckBoxList() {\n        const ctrl = this.getCtrl();\n        return <CheckBoxList\n            name={ctrl.getModel().getFullName()}\n            classList={[`${this.getCssBlockName()}__checkboxlist`]}\n            onCreate={this.onWidgetCreate}\n            value={ctrl.getValueForWidget()}\n            readOnly={!ctrl.isEditable()}\n            onChange={ctrl.onChange}\n            items={this.getItems()}\n        />;\n    }\n    render() {\n        return <div className={this.getCssClassNames()}>\n            {this.renderCheckBoxList()}\n        </div>;\n    }\n}\n","class RowFormComboBoxFieldView extends RowFormFieldView {\n    onChange = async widgetValue => {\n        // console.log('RowFormComboBoxFieldView.onChange', widgetValue);\n        this.rerender();\n        await this.props.ctrl.onChange(widgetValue);\n    }\n    isCreateButtonVisible() {\n        if (this.getCtrl().getForm().getMode() !== 'edit') {\n            return false;\n        }\n        if (this.getCtrl().getModel().getAttr('newRowMode') === 'disabled') {\n            return false;\n        }\n        if (this.getCtrl().getModel().getAttr('newRowMode') === 'editPage') {\n            return !!this.getCtrl().getModel().getAttr('itemEditPage')\n                && !!this.getCtrl().getModel().getAttr('itemCreateForm');\n        }\n        if (this.getCtrl().getModel().getAttr('newRowMode') === 'createPage') {\n            return !!this.getCtrl().getModel().getAttr('itemCreatePage')\n                && !!this.getCtrl().getModel().getAttr('itemCreateForm');\n        }\n    }\n    renderSelect() {\n        const ctrl = this.getCtrl();\n        return <Select\n            classList={[`${this.getCssBlockName()}__select`]}\n            onCreate={this.onWidgetCreate}\n            // nullable={ctrl.getModel().isNullable()}\n            value={ctrl.getValueForWidget()}\n            readOnly={!ctrl.isEditable()}\n            onChange={this.onChange}\n            items={ctrl.getItems()}\n            placeholder={ctrl.getPlaceholder()}\n            onMouseDown={ctrl.getModel().getAttr('itemSelectPage') ? ctrl.onItemSelect : null}\n        />;\n    }\n    renderEditButton() {\n        const ctrl = this.getCtrl();\n        return <Button\n            classList={[`${this.getCssBlockName()}__edit-button`]}\n            onClick={ctrl.onEditButtonClick}\n            enabled={!!ctrl.getValue()}\n        >...</Button>;\n    }\n    renderCreateButton() {\n        const ctrl = this.getCtrl();\n        return <Button\n            classList={[`${this.getCssBlockName()}__create-button`]}\n            onClick={ctrl.onCreateButtonClick}\n        >+</Button>;\n    }\n    render() {\n        // console.log('RowFormComboBoxFieldView.render', this.props.ctrl.getItems(), this.props.ctrl.getValue());\n        return (\n            <div className={this.getCssClassNames()}>\n                {this.renderSelect()}\n                {this.getCtrl().getModel().getAttr('itemEditPage') && !!this.getCtrl().getValue() &&\n                    this.renderEditButton()\n                }\n                {this.isCreateButtonVisible() &&\n                    this.renderCreateButton()\n                }\n            </div>\n        );\n    }\n}\nwindow.QForms.RowFormComboBoxFieldView = RowFormComboBoxFieldView;\n","class RowFormDateFieldView extends RowFormFieldView {\n    render() {\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <DropdownDatePicker\n                classList={[`${this.getCssBlockName()}__date-picker`]}\n                onCreate={this.onWidgetCreate}\n                value={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                onChange={ctrl.onChange}\n                placeholder={ctrl.getPlaceholder()}\n                format={ctrl.getFormat()}\n                oldDates={this.props.oldDates}\n                // getMinDate={this.props.getMinDate}\n                minDate={this.props.minDate}\n            />\n        </div>;\n    }\n}\nwindow.QForms.RowFormDateFieldView = RowFormDateFieldView;\n","class RowFormDateTimeFieldView extends RowFormFieldView {\n    onClear2 = async () => {\n        // console.log('RowFormDateTimeFieldView.onClear2');\n        this.getCtrl().onChange2(null);\n    }\n    isCloseVisible() {\n        if (this.props.readOnly) return false;\n        const ctrl = this.props.ctrl;\n        if (!ctrl.widget2) {\n            return this.props.value !== undefined;\n        }\n        return ctrl.widget2.state.value !== '';\n    }\n    renderDatePart() {\n        const ctrl = this.getCtrl();\n        return <DropdownDatePicker\n            classList={[`${this.getCssBlockName()}__dropdown-date-picker`]}\n            onCreate={this.onWidgetCreate}\n            value={ctrl.getValueForWidget()}\n            readOnly={!ctrl.isEditable()}\n            onChange={ctrl.onChange}\n            placeholder={ctrl.getPlaceholder()}\n            format={ctrl.getFormat()}\n            oldDates={this.props.oldDates}\n            // getMinDate={this.props.getMinDate}\n            highlightedDate={ctrl.getHighlightedDate ? ctrl.getHighlightedDate() : null}\n            selectToday={ctrl.getSelectToday ? ctrl.getSelectToday() : null}\n            minDate={ctrl.getMinDate ? ctrl.getMinDate() : null}\n        />;\n    }\n    renderTimePart() {\n        const ctrl = this.getCtrl();\n        return <TimeBox2 classList={[`${this.getCssBlockName()}__time-box`]}\n            onCreate={ctrl.onView2Create}\n            readOnly={!ctrl.isEditable()}\n            value={ctrl.getValueForTime()}\n            onChange={ctrl.onChange2}\n            onBlur={ctrl.isValidateOnBlur2() ? ctrl.onBlur2 : null}\n            placeholder={ctrl.getPlaceholder2()}\n            onClear={this.onClear2}\n        />;\n    }\n    getMode() {\n        return this.getCtrl().state.value ? 'datetime' : 'date';\n    }\n    render() {\n        // console.log('RowFormDateTimeFieldView.render');\n        return <div className={`${this.getCssClassNames()} ${this.getMode()}`} style={this.getStyle(this.getCtrl().getRow())}>\n            {this.renderDatePart()}\n            {this.renderTimePart()}\n        </div>;\n    }\n}\nwindow.QForms.RowFormDateTimeFieldView = RowFormDateTimeFieldView;\n","class RowFormFileFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.image = React.createRef();\n        this.div   = React.createRef();\n    }\n    getImage() {\n        return this.image.current;\n    }\n    getDiv() {\n        return this.div.current;\n    }\n    updateSize() {\n        if (this.getImage()) {\n            const ns = this.getImage().getNaturalSize();\n            this.getDiv().innerText = `${ns[0]}×${ns[1]}`;\n        }\n    }\n    onClearClick = e => {\n        this.props.ctrl.onChange('');\n    }\n    onChange = async e => {\n        const file = e.target.files[0];\n        const widgetValue = await Helper.readFileAsDataURL(file);\n        // console.log('widgetValue:', widgetValue);\n        this.props.ctrl.onChange(widgetValue);\n    }\n    onImageClick = async e => {\n        console.log('RowFormFileFieldView.onImageClick');\n        const ctrl = this.props.ctrl;\n        const app = ctrl.getApp();\n        const src = ctrl.getValueForWidget();\n        const imageDialogCtrl = new ImageDialogController({\n            app,\n            id: app.getNewId(),\n            src,\n            onClose: () => {\n                console.log('onClose');\n                this.getCtrl().getPage().getView().getElement().focus();\n            }\n        });\n        await app.openModal(imageDialogCtrl);\n    }\n    render() {\n        const ctrl = this.getCtrl();\n        const row = ctrl.getRow();\n        const value = ctrl.getValueForWidget();\n        return <div className={this.getCssClassNames()} style={this.getStyle(row)}>\n            {!!value ?\n                <div className={`${this.getCssBlockName()}__image-block`}>\n                    <Image classList={[`${this.getCssBlockName()}__image`]} ref={this.image} src={value} onClick={this.onImageClick}/>\n                    <span className={`${this.getCssBlockName()}__size`} ref={this.div}></span>\n                    <span className={`${this.getCssBlockName()}__length`}>{Helper.formatNumber(value.length)}</span>\n                </div> :\n                <div className={`${this.getCssBlockName()}__image-icon`}>\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width={48*2} height={48*2}  viewBox=\"0 0 48 48\"><path d=\"M38.65 15.3V11h-4.3V8h4.3V3.65h3V8H46v3h-4.35v4.3ZM4.7 44q-1.2 0-2.1-.9-.9-.9-.9-2.1V15.35q0-1.15.9-2.075.9-.925 2.1-.925h7.35L15.7 8h14v3H17.1l-3.65 4.35H4.7V41h34V20h3v21q0 1.2-.925 2.1-.925.9-2.075.9Zm17-7.3q3.6 0 6.05-2.45 2.45-2.45 2.45-6.1 0-3.6-2.45-6.025Q25.3 19.7 21.7 19.7q-3.65 0-6.075 2.425Q13.2 24.55 13.2 28.15q0 3.65 2.425 6.1Q18.05 36.7 21.7 36.7Zm0-3q-2.4 0-3.95-1.575-1.55-1.575-1.55-3.975 0-2.35 1.55-3.9 1.55-1.55 3.95-1.55 2.35 0 3.925 1.55 1.575 1.55 1.575 3.9 0 2.4-1.575 3.975Q24.05 33.7 21.7 33.7Zm0-5.5Z\"/></svg>\n                </div>\n            }\n            <input type=\"file\" onChange={this.onChange} disabled={!ctrl.isEditable()}/>\n            {!!value &&\n                <Button onClick={this.onClearClick} enabled={ctrl.isEditable()}>Clear</Button>\n            }\n        </div>;\n    }\n    componentDidMount() {\n        // console.log('RowFormFileFieldView.componentDidMount', this.props.ctrl.model.getFullName());\n        setTimeout(() => this.updateSize(), 0);\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // console.log('RowFormFileFieldView.componentDidUpdate', this.props.ctrl.model.getFullName(), snapshot);\n        setTimeout(() => this.updateSize(), 0);\n    }\n}\nwindow.QForms.RowFormFileFieldView = RowFormFileFieldView;\n","class RowFormImageFieldView extends RowFormFieldView {\n    onImageClick = async e => {\n        const ctrl = this.props.ctrl;\n        console.log('RowFormImageFieldView.onImageClick');\n    }\n    render() {\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()} style={this.getStyle(ctrl.getRow())}>\n            <Image src={ctrl.getValueForWidget()}\n                   onClick={this.onImageClick}\n            />\n        </div>;\n    }\n}\nwindow.QForms.RowFormImageFieldView = RowFormImageFieldView;\n","class RowFormLinkFieldView extends RowFormFieldView {\n    render() {\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={this.getCssClassNames()}>\n                <a href={ctrl.getValueForWidget()} onClick={ctrl.onClick} target={'_blank'}>\n                    {ctrl.getValueForWidget()}\n                </a>\n            </div>\n        );\n    }\n}\nwindow.QForms.RowFormLinkFieldView = RowFormLinkFieldView;\n","class RowFormPasswordFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classList: [],\n            type: 'password'\n        };\n    }\n    onCloseClick = async e => {\n        // console.log('RowFormPasswordFieldView.onCloseClick');\n        const ctrl = this.props.ctrl;\n        this.getWidget().state.value = '';\n        this.getWidget().setState({value: ''});\n        ctrl.onChange('');\n        this.getWidget().getElement().focus();\n    }\n    isCloseVisible() {\n        // console.log('RowFormPasswordFieldView.isCloseVisible', this.props.value);\n        const ctrl = this.props.ctrl;\n        if (!ctrl.isEditable()) return false;\n        if (!this.getWidget()) {\n            return this.props.value !== undefined;\n        }\n        // console.log('this.getWidget().state.value:', this.getWidget().state.value);\n        return this.getWidget().state.value !== '';\n    }\n    onFocus = async e => {\n        // console.log('RowFormPasswordFieldView.onFocus');\n        this.addCssClass('focus');\n        await this.rerender();\n    }\n    onBlur = async e => {\n        // console.log('RowFormPasswordFieldView.onBlur');\n        this.removeCssClass('focus');\n        await this.rerender();\n    }\n    onIconClick = e => {\n        this.setState(prevState => {\n            return {\n                type: prevState.type === 'password' ? 'text' : 'password'\n            };\n        });\n    }\n    render() {\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <TextBox\n                classList={[`${this.getCssBlockName()}__input`]}\n                type={this.state.type}\n                value={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                disabled={!ctrl.isEditable()}\n                autoFocus={ctrl.isAutoFocus()}\n                placeholder={ctrl.getPlaceholder() || null}\n                autocomplete={ctrl.getAutocomplete()}\n                onCreate={this.onWidgetCreate}\n                onChange={ctrl.onChange}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n            />\n            <div className={`${this.getCssBlockName()}__close ${this.isCloseVisible() ? 'visible' : ''}`}\n                 onClick={this.onCloseClick}\n            >\n                <CloseIcon/>\n            </div>\n            <div className={`${this.getCssBlockName()}__icon`} onClick={this.onIconClick}>\n                {this.state.type === 'password' ? <VisibilityIcon/> : <VisibilityOffIcon/>}\n            </div>\n        </div>;\n    }\n}\nwindow.QForms.RowFormPasswordFieldView = RowFormPasswordFieldView;\n","class RowFormPhoneFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classList: []\n        };\n    }\n    onClear = async e => {\n        this.getCtrl().onChange('');\n        setTimeout(() => {\n            this.getWidget().getElement().focus();\n        }, 0);\n    }\n    isCloseVisible() {\n        const ctrl = this.getCtrl();\n        if (!ctrl.isEditable()) return false;\n        return ctrl.getValueForWidget() !== '';\n    }\n    onFocus = async e => {\n        this.addCssClass('focus');\n        await this.rerender();\n    }\n    onBlur = async value => {\n        // console.log('RowFormPhoneFieldView.onBlur', value);\n        this.removeCssClass('focus');\n        this.getCtrl().onBlur(value);\n    }\n    renderPhoneBox() {\n        const ctrl = this.getCtrl();\n        return <PhoneBox classList={[`${this.getCssBlockName()}__input`]}\n                         value={ctrl.getValueForWidget()}\n                         readOnly={!ctrl.isEditable()}\n                         disabled={!ctrl.isEditable()}\n                         autoFocus={ctrl.isAutoFocus()}\n                         placeholder={ctrl.getPlaceholder() || null}\n                         autocomplete={ctrl.getAutocomplete()}\n                         onCreate={this.onWidgetCreate}\n                         onChange={ctrl.onChange}\n                         onFocus={this.onFocus}\n                         onBlur={this.onBlur}\n        />;\n    }\n    renderClearButton() {\n        return <div className={`${this.getCssBlockName()}__close ${this.isCloseVisible() ? 'visible' : ''}`} onMouseDown={this.onClear}>\n            <CloseIcon/>\n        </div>;\n    }\n    renderPhoneIcon() {\n        return <div className={`${this.getCssBlockName()}__icon`} >\n            <PhoneIcon/>\n        </div>;\n    }\n    render() {\n        // console.log('RowFormPhoneFieldView.render');\n        return <div className={this.getCssClassNames()}>\n            {this.renderPhoneBox()}\n            {this.renderClearButton()}\n            {this.renderPhoneIcon()}\n        </div>;\n    }\n}\nwindow.QForms.RowFormPhoneFieldView = RowFormPhoneFieldView;\n","class RowFormRadioFieldView extends RowFormFieldView {\n    onChange = async widgetValue => {\n        // console.log('RowFormRadioFieldView.onChange', widgetValue);\n        this.rerender();\n        await this.getCtrl().onChange(widgetValue);\n    }\n    /*render() {\n        return <div className={this.getCssClassNames()}>\n            <Radio  classList={[\n                        `${this.getCssBlockName()}__radio`,\n                        ...(!this.getCtrl().isEditable() ? ['readOnly'] : [])\n                    ]}\n                    name={this.getCtrl().getModel().getFullName()}\n                    items={this.getCtrl().getItems()}\n                    value={this.getCtrl().getValueForWidget()}\n                    readOnly={!this.getCtrl().isEditable()}\n                    onChange={this.onChange}\n            />\n        </div>;\n    }*/\n    render() {\n        console.log('RowFormRadioFieldView.render', this.getCtrl().getItems(), this.getCtrl().getValue());\n        const value = this.getCtrl().getValue();\n\n        return <div className={this.getCssClassNames()}>\n\n            {this.getCtrl().getItems().map(item => {\n\n\n                return <input className={`${this.getCssBlockName()}__toggle ${value === item.value ? 'selected' : ''}`}\n                              type={'button'}\n                              value={item.title || item.value}\n                              disabled={!this.getCtrl().isEditable()}\n                              data-value={JSON.stringify(item.value)}\n                />;\n            })}\n        </div>;\n    }\n}\n","class RowFormTextAreaFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classList: []\n        };\n    }\n    onFocus = async e => {\n        // console.log('RowFormTextAreaFieldView.onFocus');\n        this.addCssClass('focus');\n        await this.rerender();\n    }\n    onBlur = async e => {\n        // console.log('RowFormTextAreaFieldView.onBlur');\n        this.removeCssClass('focus');\n        await this.rerender();\n    }\n    render() {\n        // console.log('RowFormTextAreaFieldView.render', this.state);\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <TextArea\n                classList={[`${this.getCssBlockName()}__textarea`]}\n                onCreate={this.onWidgetCreate}\n                value={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                disabled={!ctrl.isEditable()}\n                onChange={ctrl.onChange}\n                placeholder={ctrl.getPlaceholder()}\n                rows={ctrl.model.getRows()}\n                cols={ctrl.model.getCols()}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n            />\n        </div>;\n    }\n}\nwindow.QForms.RowFormTextAreaFieldView = RowFormTextAreaFieldView;\n","class RowFormTextBoxFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classList: []\n        };\n    }\n    onClear = async e => {\n        this.getCtrl().onChange('');\n        setTimeout(() => {\n            this.getWidget().getElement().focus();\n        }, 0);\n    }\n    isCloseVisible() {\n        // console.log('RowFormTextBoxFieldView.isCloseVisible', this.props.value);\n        const ctrl = this.getCtrl();\n        if (!ctrl.isEnabled()) return false;\n        return ctrl.getValueForWidget() !== '';\n    }\n    onFocus = async e => {\n        // console.log('RowFormTextBoxFieldView.onFocus');\n        this.addCssClass('focus');\n        await this.rerender();\n    }\n    onBlur = async e => {\n        // console.log('RowFormTextBoxFieldView.onBlur');\n        const value = e.target.value;\n        this.removeCssClass('focus');\n        this.getCtrl().onBlur(value);\n    }\n    renderTextBox() {\n        const ctrl = this.props.ctrl;\n        return <TextBox\n            classList={[`${this.getCssBlockName()}__input`]}\n            value={ctrl.getValueForWidget()}\n            readOnly={!ctrl.isEnabled()}\n            enabled={ctrl.isEnabled()}\n            autoFocus={ctrl.isAutoFocus()}\n            placeholder={ctrl.getPlaceholder() || null}\n            autocomplete={ctrl.getAutocomplete()}\n            onCreate={this.onWidgetCreate}\n            onChange={ctrl.onChange}\n            onFocus={this.onFocus}\n            onBlur={this.onBlur}\n        />;\n    }\n    renderCloseIcon() {\n        return <div className={`${this.getCssBlockName()}__close ${this.isCloseVisible() ? 'visible' : ''}`}\n             onMouseDown={this.onClear}\n        >\n            <CloseIcon/>\n        </div>;\n    }\n    render() {\n        return <div className={this.getCssClassNames()}>\n            {this.renderTextBox()}\n            {this.renderCloseIcon()}\n        </div>;\n    }\n}\nwindow.QForms.RowFormTextBoxFieldView = RowFormTextBoxFieldView;\n","class RowFormTimeFieldView extends RowFormFieldView {\n    onCloseClick = async e => {\n        console.log('RowFormTimeFieldView.onCloseClick');\n        /*const ctrl = this.props.ctrl;\n        this.getWidget().state.value = '';\n        this.getWidget().setState({value: ''});\n        ctrl.onChange(null);*/\n    }\n    isCloseVisible() {\n        // console.log('RowFormTimeFieldView.isCloseVisible', this.props.value);\n        if (this.props.readOnly) return false;\n        if (!this.getWidget()) {\n            return this.props.value !== undefined;\n        }\n        // console.log('this.getWidget().state.value:', ctrl.view.state.value);\n        return this.getWidget().state.value !== '';\n    }\n    render() {\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <TimeBox\n                onCreate={this.onWidgetCreate}\n                value={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                onChange={ctrl.onChange}\n                onBlur={ctrl.onBlur}\n                placeholder={ctrl.getPlaceholder()}\n            />\n            <div className={`close ${this.isCloseVisible() ? 'visible' : ''}`} onClick={this.onCloseClick}>\n                <CloseIcon/>\n            </div>\n        </div>\n    }\n}\nwindow.QForms.RowFormTimeFieldView = RowFormTimeFieldView;\n","class TableFormFieldView extends FieldView {\n    constructor(props) {\n        super(props);\n        this.span = React.createRef();\n    }\n    getSpanOffsetWidth() {\n        // console.log('TableFormFieldView.getSpanOffsetWidth', this.span.current);\n        if (!this.span.current) return 0;\n        return this.span.current.offsetWidth;\n    }\n}\nwindow.QForms.TableFormFieldView = TableFormFieldView;\n","class TableFormCheckBoxFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={this.getCssClassNames()} style={this.getStyle(row)}>\n                <CheckBox\n                    ref={this.span}\n                    checked={ctrl.getValueForWidget(row)}\n                    readOnly={true}\n                    disabled={true}\n                />\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormCheckBoxFieldView = TableFormCheckBoxFieldView;\n","class TableFormComboBoxFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n                <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormComboBoxFieldView = TableFormComboBoxFieldView;\n","class TableFormDateFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n                <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormDateFieldView = TableFormDateFieldView;\n","class TableFormDateTimeFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n                <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormDateTimeFieldView = TableFormDateTimeFieldView;\n","class TableFormLinkFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n                <a href=\"#\" onClick={ctrl.onClick}>{ctrl.getValueForWidget(row)}</a>\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormLinkFieldView = TableFormLinkFieldView;\n","class TableFormPhoneFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        return <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n            <span ref={this.span}>{PhoneBox.formatPhoneNumber(this.getCtrl().getValueForWidget(row))}</span>\n        </div>;\n    }\n}\n","class TableFormTextAreaFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n            <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n        </div>;\n    }\n}\nwindow.QForms.TableFormTextAreaFieldView = TableFormTextAreaFieldView;\n","class TableFormTextBoxFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n            <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n        </div>;\n    }\n}\nwindow.QForms.TableFormTextBoxFieldView = TableFormTextBoxFieldView;\n","class TableFormTimeFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n            <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n        </div>;\n    }\n}\nwindow.QForms.TableFormTimeFieldView = TableFormTimeFieldView;\n","class FormView extends ModelView {\n    constructor(props) {\n        super(props);\n        this.checkParent();\n    }\n    onActionsClick = async li => {\n        // console.log('FormView.onActionsClick:', li);\n        const ctrl = this.props.ctrl;\n        const name = li.dataset.action;\n        try {\n            const result = await ctrl.onActionClick(name, ctrl.getActiveRow(true));\n            if (!result) {\n                throw new Error(`no handler for action '${name}'`);\n            }\n        } catch (err) {\n            console.error(err);\n            await this.getCtrl().getApp().alert({message: err.message});\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('FormView.shouldComponentUpdate', this.getCtrl().getModel().getFullName(), nextProps.updated - this.props.updated);\n        if (nextProps.updated - this.props.updated) return true;\n        return false;\n    }\n}\nwindow.QForms.FormView = FormView;\n","class RowFormView extends FormView {\n    renderToolbar() {\n        // console.log('RowFormView.renderToolbar');\n        const ctrl = this.props.ctrl;\n        const text = ctrl.getModel().getApp().getText();\n        return (\n            <div className={`${this.getCssBlockName()}__toolbar flex grid-gap-5`}>\n                {ctrl.model.hasDefaultSqlDataSource() &&\n                    <Button\n                        key=\"edit\"\n                        classList={['toolbar-button']}\n                        onClick={ctrl.onEditClick}\n                        visible={ctrl.getMode() === 'view'}\n                    >\n                        {/*<EditIcon/>*/}\n                        <div>{text.form.edit}</div>\n                    </Button>\n                }\n                {ctrl.model.hasDefaultSqlDataSource() &&\n                    <Button\n                        key=\"save\"\n                        classList={['toolbar-button']}\n                        enabled={(ctrl.state.changed || ctrl.state.hasNew) && ctrl.state.valid}\n                        onClick={ctrl.onSaveClick}\n                        visible={ctrl.getMode() === 'edit'}\n                    >\n                        {/*<SaveIcon/>*/}\n                        <div>{text.form.save}</div>\n                    </Button>\n                }\n                {ctrl.model.hasDefaultSqlDataSource() && ctrl.model.getKey() &&\n                    <Button\n                        key=\"cancel\"\n                        classList={['toolbar-button']}\n                        visible={ctrl.getMode() === 'edit' && !ctrl.state.changed && ctrl.state.valid}\n                        onClick={ctrl.onCancelClick}\n                    >\n                        {/*<CancelIcon/>*/}\n                        <div>{text.form.cancel}</div>\n                    </Button>\n                }\n                {ctrl.model.hasDefaultSqlDataSource() && ctrl.model.getKey() &&\n                    <Button\n                        key=\"discard\"\n                        classList={['toolbar-button']}\n                        enabled={ctrl.state.changed || !ctrl.isValid()}\n                        onClick={ctrl.onDiscardClick}\n                        visible={ctrl.getMode() === 'edit' && (ctrl.state.changed || !ctrl.state.valid)}\n                    >\n                        {/*<CloseIcon2/>*/}\n                        <div>{text.form.discard}</div>\n                    </Button>\n                }\n                {ctrl.model.hasDefaultSqlDataSource() && ctrl.getModel().getAttr('refreshButton') === 'true' &&\n                    <Button\n                        key=\"refresh\"\n                        classList={['toolbar-button']}\n                        enabled={!ctrl.state.changed && !ctrl.state.hasNew}\n                        onClick={ctrl.onRefreshClick}\n                        visible={ctrl.getMode() === 'view'}\n                    >\n                        {/*<RefreshIcon/>*/}\n                        <div>{text.form.refresh}</div>\n                    </Button>\n                }\n                {this.isActionsVisible() && ctrl.model.hasActions() &&\n                    <DropdownButton\n                        classList={['toolbar-dropdown-button']}\n                        actions={this.getActionsForDropdownButton()}\n                        onClick={this.onActionsClick}\n                        enabled={this.isActionsEnabled()}\n                    >\n                        <MoreVertIcon/>\n                    </DropdownButton>\n                }\n            </div>\n        );\n    }\n    isActionsEnabled() {\n        // return this.getCtrl().state.mode === 'view';\n        return true;\n    }\n    isActionsVisible() {\n        if (this.getCtrl().getModel().hasDefaultSqlDataSource()) {\n            return !!this.getCtrl().getModel().getKey();\n        }\n        return true;\n    }\n    renderLabel(fieldCtrl) {\n        const model = fieldCtrl.getModel();\n        const name = model.getName();\n        return <div key={`label.${name}`} className={`${this.getCssBlockName()}__label`}>\n            {model.getCaption()}:\n            {model.isNotNull() && <span style={{color: 'red'}}>*</span>}\n        </div>;\n    }\n    renderField(fieldCtrl) {\n        // console.log('RowFormView.renderField', fieldCtrl.model.getClassName());\n        const name = fieldCtrl.getModel().getName();\n        return <div key={`field.${name}`} className={`${this.getCssBlockName()}__field`}>\n            {this.renderFieldView(fieldCtrl)}\n        </div>;\n    }\n    renderFieldView(fieldCtrl) {\n        return RowFormView.renderFieldView(fieldCtrl);\n    }\n    static renderFieldView(fieldCtrl) {\n        /*return React.createElement(fieldCtrl.getViewClass(), {\n            onCreate: fieldCtrl.onViewCreate,\n            ctrl: fieldCtrl,\n        });*/\n        return fieldCtrl.renderView();\n    }\n    renderError(fieldCtrl) {\n        // console.log('RowFormView.renderError:', fieldCtrl.state);\n        const name = fieldCtrl.getModel().getName();\n        return <div key={`tooltip.${name}`} className={`${this.getCssBlockName()}__error`}>\n            <Tooltip position=\"left\" type=\"alert\" hidden={fieldCtrl.getErrorMessage() === null} tip={fieldCtrl.getErrorMessage()}/>\n        </div>;\n    }\n    renderGroup(fieldCtrl) {\n        return [\n            this.renderLabel(fieldCtrl),\n            this.renderField(fieldCtrl),\n            this.renderError(fieldCtrl)\n        ];\n        /*return <div key={fieldCtrl.getModel().getName()} className={`${this.getCssClassNames()}__group`}>\n            {this.renderLabel(fieldCtrl)}\n            {this.renderField(fieldCtrl)}\n            {this.renderError(fieldCtrl)}\n        </div>;*/\n    }\n    renderGroups() {\n        // console.log('RowFormView.renderGroups');\n        const ctrl = this.getCtrl();\n        return <div className={`${this.getCssBlockName()}__groups`}>\n            {Object.keys(ctrl.fields).filter(name => ctrl.getField(name).isVisible()).map(name => {\n                return this.renderGroup(ctrl.getField(name));\n            })}\n        </div>;\n    }\n    render() {\n        console.log('RowFormView.render', this.getCtrl().getModel().getFullName());\n        return <div className={`${this.getCssClassNames()} flex-column grid-gap-5`} style={this.getStyle()}>\n            {(this.getCtrl().getModel().hasDefaultSqlDataSource() || this.getCtrl().getModel().hasActions()) && this.renderToolbar()}\n            {this.renderGroups()}\n        </div>;\n    }\n    /*renderActionIcon() {\n        return <CancelIcon/>;\n    }*/\n}\n\nwindow.QForms.RowFormView = RowFormView;\n","class TableFormView extends FormView {\n    renderToolbar() {\n        const ctrl = this.props.ctrl;\n        const model = ctrl.model;\n        const dataSource = model.getDefaultDataSource();\n        return (\n            <div className={`${this.getCssBlockName()}__toolbar flex grid-gap-5`}>\n                {model.data.newRowMode !== 'disabled' &&\n                    <Button\n                        key=\"new\"\n                        classList={['toolbar-button', 'default']}\n                        onClick={ctrl.onNewClick}\n                        enabled={!ctrl.parent.model.hasNew()}\n                    >\n                        {/*<AddIcon/>*/}\n                        <div>{model.getApp().getText().form.new}</div>\n                    </Button>\n                }\n                {model.data.refreshButton === 'true' && dataSource.constructor.name === 'SqlDataSource' &&\n                <Button\n                    key=\"refresh\"\n                    classList={['toolbar-button']}\n                    onClick={ctrl.onRefreshClick}\n                    enabled={!ctrl.parent.model.hasNew()}\n                >\n                    {/*<RefreshIcon/>*/}\n                    <div>{model.getApp().getText().form.refresh}</div>\n                </Button>\n                }\n                {model.data.deleteRowMode !== 'disabled' &&\n                    <Button\n                        key=\"delete\"\n                        classList={['toolbar-button']}\n                        onClick={ctrl.onDeleteClick}\n                        enabled={ctrl.isRowSelected()}\n                    >\n                        {/*<DeleteIcon/>*/}\n                        <div>{model.getApp().getText().form.delete}</div>\n                    </Button>\n                }\n                {ctrl.model.hasActions() &&\n                    <DropdownButton\n                        classList={['toolbar-dropdown-button']}\n                        actions={this.getActionsForDropdownButton()}\n                        onClick={this.onActionsClick}\n                    >\n                        <MoreVertIcon/>\n                    </DropdownButton>\n                }\n            </div>\n        );\n    }\n    renderPaging() {\n        const ctrl = this.props.ctrl;\n        const model = this.props.ctrl.model;\n        const dataSource = model.getDefaultDataSource();\n        const text = model.getApp().getText();\n        return (\n            <div className=\"paging\">\n                <div className=\"paging__countBlock\">\n                    <span className=\"count\">{dataSource.getRowsLength()} {dataSource.getLimit() && `of ${dataSource.getCount()}`}</span>\n                </div>\n                {dataSource.getLimit() &&\n                    <div className=\"paging__gotoBlock\">\n                        <Button enabled={ctrl.canPrev()} onClick={ctrl.onPreviousClick}>\n                            <LeftIcon size={18}/>\n                        </Button>\n                        <ComboBox\n                            value={ctrl.model.getDefaultDataSource().getFrame().toString()}\n                            onChange={ctrl.onFrameChanged}\n                            items={new Array(dataSource.getFramesCount()).fill().map((val, i) =>\n                            ({value: (i+1).toString(), title: (i+1).toString()})\n                        )}/>\n                        <Button enabled={ctrl.canNext()} onClick={ctrl.onNextClick}>\n                            <RightIcon size={18}/>\n                        </Button>\n                    </div>\n                }\n            </div>\n        );\n    }\n    renderGridCellView = (row, column, onCreate, onUnmount) => {\n        // console.log('TableFormView.renderGridCellView');\n        const ctrl = this.props.ctrl.getField(column.name);\n        if (!ctrl) throw new Error(`no field: ${column.name}`);\n        // console.log(column.name, ctrl.constructor.name);\n        return React.createElement(ctrl.getViewClass(), {row, column, onCreate, onUnmount, ctrl});\n    }\n    getGridColumns() {\n        const ctrl = this.props.ctrl;\n        return Object.keys(ctrl.fields).filter(name => ctrl.getField(name).isVisible()).map(name => {\n            const field = ctrl.getField(name);\n            return {\n                name : field.getModel().getName(),\n                title: field.getModel().getCaption(),\n                width: field.getModel().getWidth()\n            };\n        });\n    }\n    getRows() {\n        const ctrl = this.props.ctrl;\n        return ctrl.model.getDefaultDataSource().getRows();\n    }\n    getGridExtraColumn() {\n        return true;\n    }\n    getGridClass() {\n        return Grid;\n    }\n    renderGrid() {\n        const ctrl = this.props.ctrl;\n        return React.createElement(this.getGridClass(), {\n            classList         : ['flex-max'],\n            onCreate          : ctrl.onGridCreate,\n            name              : ctrl.model.getFullName(),\n            columns           : this.getGridColumns(),\n            rows              : this.getRows(),\n            getRowKey         : row => ctrl.model.getDefaultDataSource().getRowKey(row),\n            onDoubleClick     : ctrl.onGridCellDblClick,\n            onDeleteKeyDown   : ctrl.onGridDeleteKeyDown,\n            onSelectionChange : ctrl.onGridSelectionChange,\n            onLinkClick       : ctrl.onGridLinkClick,\n            renderGridCellView: this.renderGridCellView,\n            updated           : ctrl.getUpdated(),\n            extraColumn       : this.getGridExtraColumn(),\n            selectedKey       : ctrl.getPage().getModel().getOptions().selectedKey,\n            createLinkCallback: this.createLinkCallback,\n        });\n    }\n    render() {\n        console.log('TableFormView.render', this.props.ctrl.model.getFullName());\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssClassNames()} full flex-column grid-gap-5`} style={this.getStyle()}>\n            {this.renderToolbar()}\n            {this.renderGrid()}\n            {ctrl.getModel().hasDefaultSqlDataSource() && this.renderPaging()}\n        </div>;\n    }\n    createLinkCallback = key => {\n        return PageController.createLink({\n            page: this.getCtrl().getModel().getAttr('itemEditPage'),\n            ...DataSource.keyToParams(key)\n        });\n    }\n}\nwindow.QForms.TableFormView = TableFormView;\n","class PageView extends ModelView {\n    constructor(props) {\n        super(props);\n        this.checkParent();\n        this.el = React.createRef();\n    }\n    onActionsClick = async li => {\n        // console.log('PageView.onActionsClick:', li);\n        const ctrl = this.getCtrl();\n        const name = li.dataset.action;\n        try {\n            const result = await ctrl.onActionClick(name);\n            if (!result) {\n                throw new Error(`no handler for action '${name}'`);\n            }\n        } catch (err) {\n            console.error(err);\n            await this.getCtrl().getApp().alert({message: err.message});\n        }\n    }\n    isToolbar() {\n        const model = this.getCtrl().getModel();\n        return model.isSelectMode()\n            //|| (model.isModal() && model.hasRowFormWithDefaultSqlDataSource())\n            || model.hasActions();\n    }\n    getFormTabs(forms) {\n        return forms.map(form => {\n            return {\n                name   : form.getModel().getName(),\n                title  : form.getTitle(),\n                content: this.renderForm(form)\n            };\n        });\n    }\n    getRowForms() {\n        return this.getCtrl().forms.filter(form => form.getModel().getClassName() === 'RowForm');\n    }\n    getTableForms() {\n        return this.getCtrl().forms.filter(form => form.getModel().getClassName() === 'TableForm');\n    }\n    renderForm(formCtrl, props = {}) {\n        return React.createElement(formCtrl.getViewClass(), {\n            parent  : this,\n            key     : formCtrl.getModel().getName(),\n            ctrl    : formCtrl,\n            onCreate: formCtrl.onViewCreate,\n            updated : formCtrl.getUpdated(),\n            ...props\n        });\n    }\n    renderRowForms() {\n        return this.getRowForms().map(form => this.renderForm(form));\n    }\n    renderTitle() {\n        const ctrl = this.getCtrl();\n        const model = ctrl.getModel();\n        return <h1 className={`${this.getCssBlockName()}__title`}>\n            {ctrl.getTitle()}\n            {model.hasRowFormWithDefaultSqlDataSource() && (ctrl.isChanged() || model.hasNew()) &&\n                [' ', <span key={'star'} className={`${this.getCssBlockName()}__star`}>*</span>]\n            }\n        </h1>;\n    }\n    renderSelectButton() {\n        const ctrl = this.getCtrl();\n        const model = ctrl.getModel();\n        return <Button\n            classList={['toolbar-button', 'default']}\n            onClick={ctrl.onSelectClick}\n            enabled={!!ctrl.getSelectedRowKey()}\n        >\n            <DoneIcon/>\n            <div>{model.getApp().getText().page.select}</div>\n        </Button>;\n    }\n    renderSaveAndCloseButton() {\n        const ctrl = this.getCtrl();\n        const model = ctrl.getModel();\n        return <Button\n            classList={['toolbar-button', 'default']}\n            onClick={ctrl.onSaveAndCloseClick}\n            enabled={ctrl.isValid() && (model.hasNew() || (ctrl.isChanged()))}\n        >\n            {/*<DoneIcon/>*/}\n            <div>{model.getApp().getText().page.saveAndClose}</div>\n        </Button>;\n    }\n    renderCloseButton() {\n        const ctrl = this.getCtrl();\n        const model = ctrl.getModel();\n        return <Button\n            classList={['toolbar-button']}\n            onClick={ctrl.onClosePageClick}\n        >\n            <div>{model.getApp().getText().page.close}</div>\n        </Button>\n    }\n    renderActionsDropdownButton() {\n        return <DropdownButton\n            classList={['toolbar-dropdown-button']}\n            actions={this.getActionsForDropdownButton()}\n            onClick={this.onActionsClick}\n        >\n            <MoreVertIcon/>\n        </DropdownButton>;\n    }\n    renderToolbar() {\n        const ctrl = this.getCtrl();\n        const model = ctrl.getModel();\n        return <div className={`${this.getCssBlockName()}__toolbar`}>\n            {model.isSelectMode() && this.renderSelectButton()}\n            {/*{model.isSelectMode() &&\n                    <Button classList={['toolbar-button']}\n                        title={model.getApp().getText().page.reset}\n                            onClick={ctrl.onResetClick}\n                    />\n                }*/}\n            {model.hasActions() && this.renderActionsDropdownButton()}\n        </div>;\n    }\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }*/\n    renderTableForms() {\n        const tableForms = this.getTableForms();\n        if (tableForms.length === 1) {\n            return this.renderForm(tableForms[0]);\n        } else {\n            return <div className={`${this.getCssBlockName()}__table-forms flex-max frame`}>\n                <div className=\"frame__container\">\n                    <Tab2 tabs={this.getFormTabs(tableForms)} classList={['Tab-blue', 'full']}/>\n                </div>\n            </div>;\n        }\n    }\n    renderOpenPageHeaderButton() {\n        const ctrl = this.getCtrl();\n        return <div key={'open'} className={`${this.getCssBlockName()}__open`} onClick={ctrl.onOpenPageClick}>\n            <OpenInNewIcon/>\n        </div>;\n    }\n    renderClosePageHeaderButton() {\n        const ctrl = this.getCtrl();\n        return <div key={'close'} className={`${this.getCssBlockName()}__close`} onClick={ctrl.onClosePageClick}>\n            <CloseIcon2/>\n        </div>;\n    }\n    renderHeader() {\n        const model = this.getCtrl().getModel();\n        return <div className={`${this.getCssBlockName()}__header`}>\n            {this.renderTitle()}\n            {model.isModal() &&\n                [\n                    ...(model.getKey() ? [this.renderOpenPageHeaderButton()] : []),\n                    this.renderClosePageHeaderButton()\n                ]\n            }\n        </div>;\n    }\n    renderMain() {\n        return <div className={`${this.getCssBlockName()}__main flex-max frame`}>\n            <div className={'frame__container flex-column grid-gap-10'}>\n                {this.isToolbar() && this.renderToolbar()}\n                {this.renderForms()}\n            </div>\n        </div>;\n    }\n    renderForms() {\n        const model = this.getCtrl().getModel();\n        return [\n            ...(model.hasRowForm() ? [this.renderRowForms()] : []),\n            ...(model.hasTableForm() ? [this.renderTableForms()] : [])\n        ];\n    }\n    renderForms2() {\n        return <Tab2 tabs={this.getFormTabs(this.getCtrl().forms)} classList={['Tab-blue', 'full']}/>;\n    }\n    renderFooter() {\n        const model = this.getCtrl().getModel();\n        return <div className={`${this.getCssBlockName()}__footer`}>\n            {this.renderCloseButton()}\n            {model.isModal() && model.hasRowFormWithDefaultSqlDataSource() && this.renderSaveAndCloseButton()}\n        </div>;\n    }\n    render() {\n        console.log('PageView.render', this.getCtrl().getModel().getFullName());\n        return <div className={`${this.getCssClassNames()} ${this.getCtrl().isModal() ? '' : 'full'} flex-column`}\n                    style={this.getStyle()}\n                    ref={this.el}\n                    tabIndex={0}\n                    onKeyDown={this.getCtrl().onKeyDown}\n        >\n            {this.renderHeader()}\n            {this.renderMain()}\n            {this.getCtrl().isModal() && this.renderFooter()}\n        </div>;\n    }\n    getStyle() {\n        if (this.getCtrl().isModal()) {\n            return {\n                width: 1000,\n                height: 750\n            };\n        }\n    }\n    componentDidMount() {\n        // console.log('PageView.componentDidMount', this.getCtrl().getModel().getFullName());\n        if (this.getCtrl().isAutoFocus() && !this.getCtrl().getModel().getKey()) {\n\n        } else {\n            this.focus();\n        }\n    }\n    focus() {\n        // console.log('PageView.focus', this.getCtrl().getModel().getFullName());\n        if (this.getElement()) {\n            // console.log('focus', this.getElement());\n            this.getElement().focus();\n        } else {\n            console.error(`${this.getCtrl().getModel().getFullName()}: el is null (ref={this.el})`);\n        }\n    }\n}\nwindow.QForms.PageView = PageView;\n"]}