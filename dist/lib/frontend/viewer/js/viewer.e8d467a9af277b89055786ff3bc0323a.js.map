{"version":3,"sources":["EventEmitter.js","LoginFrontHostApp.js","ViewerFrontHostApp.js","WebSocketClient.js","Controller/Controller.js","Controller/AlertController/AlertController.js","Controller/ConfirmController/ConfirmController.js","Controller/LoginController/LoginController.js","Controller/ModalController/ModalController.js","Controller/ModalController/ImageDialogController/ImageDialogController.js","Controller/ModelController/ModelController.js","Controller/ModelController/ApplicationController/ApplicationController.js","Controller/ModelController/FieldController/FieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxFieldController/RowFormCheckBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormComboBoxFieldController/RowFormComboBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateFieldController/RowFormDateFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateTimeFieldController/RowFormDateTimeFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFileFieldController/RowFormFileFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormImageFieldController/RowFormImageFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormLinkFieldController/RowFormLinkFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPasswordFieldController/RowFormPasswordFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPhoneFieldController/RowFormPhoneFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextAreaFieldController/RowFormTextAreaFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextBoxFieldController/RowFormTextBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTimeFieldController/RowFormTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormCheckBoxFieldController/TableFormCheckBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormComboBoxFieldController/TableFormComboBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateFieldController/TableFormDateFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateTimeFieldController/TableFormDateTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormLinkFieldController/TableFormLinkFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormPhoneFieldController/TableFormPhoneFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextAreaFieldController/TableFormTextAreaFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextBoxFieldController/TableFormTextBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTimeFieldController/TableFormTimeFieldController.js","Controller/ModelController/FormController/FormController.js","Controller/ModelController/FormController/RowFormController/RowFormController.js","Controller/ModelController/FormController/TableFormController/TableFormController.js","Controller/ModelController/PageController/PageController.js","Model/Model.js","Model/Application/Application.js","Model/Column/Column.js","Model/DataSource/DataSource.js","Model/DataSource/SqlDataSource/SqlDataSource.js","Model/Database/Database.js","Model/Field/Field.js","Model/Field/CheckBoxField/CheckBoxField.js","Model/Field/ComboBoxField/ComboBoxField.js","Model/Field/DateField/DateField.js","Model/Field/DateTimeField/DateTimeField.js","Model/Field/FileField/FileField.js","Model/Field/ImageField/ImageField.js","Model/Field/LabelField/LabelField.js","Model/Field/LinkField/LinkField.js","Model/Field/PasswordField/PasswordField.js","Model/Field/PhoneField/PhoneField.js","Model/Field/TextAreaField/TextAreaField.js","Model/Field/TextBoxField/TextBoxField.js","Model/Field/TimeField/TimeField.js","Model/Form/Form.js","Model/Form/RowForm/RowForm.js","Model/Form/TableForm/TableForm.js","Model/Page/Page.js","Model/Table/Table.js"],"names":["EventEmitter","constructor","this","list","on","name","cb","push","off","i","indexOf","Error","splice","emit","e","length","result","Promise","allSettled","map","status","reason","LoginFrontHostApp","FrontHostApp","data","console","log","super","run","loginController","LoginController","create","rootElement","document","querySelector","getViewClassCssBlockName","Helper","createReactComponent","getViewClass","ctrl","getText","text","getData","ViewerFrontHostApp","options","applicationController","application","Application","init","ApplicationController","rootElementName","createView","connect","err","logError","onWindowPopState","window","QForms","WebSocketClient","protocol","url","location","host","encodeURIComponent","route","uuid","userId","webSocket","refreshTimeoutId","RECONNECT_TIMEOUT","REFRESH_TIMEOUT","resolve","reject","WebSocket","onclose","code","onopen","onClose","bind","onmessage","onMessage","startRefreshTimeout","onRefreshTimeout","send","setTimeout","resetRefreshTimeout","clearTimeout","reconnect","error","async","JSON","parse","packet","type","getApp","getView","disableRerender","getModel","emitResult","enableRerender","rerender","Controller","view","onViewCreate","AlertController","message","AlertView","close","onOkButtonClick","onCloseClick","onKeyDown","key","ConfirmController","ConfirmView","onYesClick","frontHostApp","CustomClass","getClassByName","Class","LoginView","getFrontHostApp","ModalController","app","id","getId","closeModal","ImageDialogController","src","ImageDialogView","getSrc","ModelController","model","parent","deinited","deinit","getFullName","getParent","getTitle","getCaption","isAttr","viewClassName","getAttr","eval","lastId","activePage","modals","statusbar","homePageName","webSocketClient","getName","getSearchObj","search","split","reduce","acc","item","kv","isDebugMode","onRequest","pageData","pages","createPage","modal","params","getGlobalParams","title","ApplicationView","setLastQueryTime","time","versions","remoteAppVersion","createVersionNotificationIfNotExists","getCssBlockName","div","createElement","innerHTML","versionNotification","className","append","undefined","pageModel","Page","pc","PageController","getNextId","openPage","pageController","findPageControllerByPageNameAndKey","onPageSelect","request","action","page","newMode","activeElement","focus","isModal","addModal","addPage","removeModal","getNewId","closePage","pageName","getKey","onActionClick","getMenuItemsProp","menu","Object","keys","items","caption","getUser","getDomain","login","onStatusbarCreate","onLogout","href","getRootPath","onMenuItemClick","history","pushState","createLink","alert","getActivePageName","state","invalidate","filter","forEach","confirm","yesButton","yes","noButton","no","openModal","getHostApp","nodeEnv","user","FieldController","getPage","form","getForm","GeneralClass","getClassName","valueToString","value","Date","toISOString","stringify","toString","stringToValue","stringValue","fieldType","getType","trim","date","invalidDate","num","Number","isNaN","notNumber","getViewStyle","row","isVisible","isAutoFocus","getAutocomplete","getFormat","RowFormFieldController","parseError","changed","getRow","getValue","setValue","refill","resetErrors","refreshChanged","copyValueToModel","_onChange","widgetValue","putValue","onChange","fireEvent","setValueFromWidget","validateOnChange","validate","isValid","onFieldChange","source","onBlur","validateOnBlur","getValueForWidget","isChanged","getError","calcChangedState","getPlaceholder","getWidget","isNotNull","required","isEditable","getMode","isReadOnly","isParseError","getErrorMessage","hasColumn","fieldRawValue","valueToRaw","dsRawValue","getRawValue","let","original","modified","getDefaultDataSource","getRowWithChanges","substr","setError","RowFormCheckBoxFieldController","RowFormCheckBoxFieldView","RowFormComboBoxFieldController","dataSource","getComboBoxDataSource","onListInsert","onListUpdate","onListDelete","getItems","getRows","getValueValue","getDisplayValue","RowFormComboBoxFieldView","onEditButtonClick","itemEditPage","onCreateButtonClick","newRowMode","itemCreateForm","createPageName","onInsert","inserts","decodeValue","onItemSelect","button","preventDefault","selectedKey","selectMode","onSelect","RowFormDateFieldController","RowFormDateFieldView","RowFormDateTimeFieldController","args","widget2","defaultValue","parseError2","error2","RowFormDateTimeFieldView","getValueForTime","getHours","getMinutes","h","m","resetErrors2","TimeBox","splitTime","setHours","onView2Create","input","getElement","setSelectionRange","onChange2","setValueFromView2","validate2","onBlur2","getPlaceholder2","getStringValue","getDefaultValue","setDefaultValue","getIntegerValue","setValue2","getError2","isParseError2","setError2","getErrorMessage2","isValid2","join","RowFormFileFieldController","RowFormFileFieldView","RowFormImageFieldController","RowFormImageFieldView","RowFormLinkFieldController","RowFormLinkFieldView","onClick","RowFormPasswordFieldController","RowFormPasswordFieldView","RowFormPhoneFieldController","RowFormPhoneFieldView","RowFormTextAreaFieldController","RowFormTextAreaFieldView","RowFormTextBoxFieldController","RowFormTextBoxFieldView","RowFormTimeFieldController","RowFormTimeFieldView","TableFormFieldController","TableFormCheckBoxFieldController","TableFormCheckBoxFieldView","TableFormComboBoxFieldController","TableFormComboBoxFieldView","rawValue","cbRow","findRowByRawValue","TableFormDateFieldController","TableFormDateFieldView","formatDate","TableFormDateTimeFieldController","TableFormDateTimeFieldView","TableFormLinkFieldController","TableFormLinkFieldView","TableFormPhoneFieldController","TableFormPhoneFieldView","TableFormTextAreaFieldController","TableFormTextAreaFieldView","TableFormTextBoxFieldController","TableFormTextBoxFieldView","TableFormTimeFieldController","TableFormTimeFieldView","FormController","customClassName","fields","field","onFormChange","getUpdated","updated","now","getField","getSelectedRowKey","RowFormController","mode","hasNew","valid","onModelRefresh","onModelInsert","onModelUpdate","calcState","onFormInsert","onFormUpdate","clearFieldsError","onSaveClick","update","onDiscardClick","changedFields","discard","onFormDiscard","onRefreshClick","refresh","onEditClick","onCancelClick","RowFormView","getActiveRow","withChanges","isActionEnabled","isViewMode","isEditMode","TableFormController","grid","TableFormView","onModelDelete","onGridCreate","onNewClick","new","onDeleteClick","getActiveRowKey","areYouSure","delete","onGridCellDblClick","getOptions","selectRow","edit","onGridLinkClick","onGridDeleteKeyDown","fillDefaultValues","insert","database","table","DataSource","keyToParams","setActiveRowKey","updates","newKey","deletes","onGridSelectionChange","isRowSelected","onFrameChanged","frame","parseInt","setFrame","onNextClick","getFrame","onPreviousClick","canPrev","canNext","ds","getFramesCount","forms","onSaveAndCloseClick","onClosePageClick","onOpenPageClick","link","createOpenInNewLink","open","hasRowFormWithDefaultSqlDataSource","formController","getParams","PageView","pathname","encodeURI","find","arr","keyPart","selectedRowKey","onSelectClick","onResetClick","Model","class","getCol","hasOwnProperty","getDataSource","dataSources","createDataSources","deinitDataSources","hasActions","actions","databases","theme","Database","addDatabase","logout","start","headers","body","doHttpRequest2","remotePlatformVersion","getDatabase","domain","getVirtualPath","virtualPath","rpc","errorMessage","promises","getNodeEnv","Column","includes","rows","rowsByKey","news","changes","Map","setRows","getTable","onTableInsert","onTableUpdate","onTableDelete","onTableRefresh","fillRowsByKey","addRow","getRowKey","addRows","getRowsLength","column","discardRowColumn","has","get","changeRowColumn","newValue","set","size","isRowColumnChanged","getKeyValues","keyColumns","removeRow","newRow","getSingleRow","Form","getRowByIndex","clear","paramName","getChangesByKey","hasNewRows","copyNewValues","newValues","updateRow","columnName","getColumn","onDataSourceInsert","onDataSourceDelete","onDataSourceUpdate","reuslt","sourceRow","isSurrogate","SqlDataSource","count","lastFrame","insertEx","values","event","updateEx","getPageParams","onDataSourceRefresh","select","getLimit","fill","more","hasMore","Array","Math","ceil","getCount","getLastFrame","tables","Table","addTable","Field","replaceThis","replace","fillDefaultValue","js","templateToJsString","valueToPageParams","isParam","addParam","RowForm","rawToValue","encodeValue","readOnly","notNull","isNullable","getWidth","width","param","hasDefaultSqlDataSource","CheckBoxField","ComboBoxField","displayColumn","valueColumn","dataSourceName","DateField","raw","addMinutes","getTimezoneOffset","v","getTime","DateTimeField","FileField","ImageField","LabelField","LinkField","PasswordField","PhoneField","TextAreaField","getCols","cols","TextBoxField","TimeField","decodeRow","isNewMode","createRow","fillParams","TableForm","onCreate","createForms","deinitForms","FormClass","hasRowFormWithDefaultDs","hasRowForm","hasTableForm","keyParams","columns","addColumn","emitInsert","emitUpdate","emitDelete","emitRefresh"],"mappings":"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","file":"viewer.e8d467a9af277b89055786ff3bc0323a.js","sourcesContent":["class EventEmitter {\n    constructor() {\n        this.list = {};\n    }\n    on(name, cb) {\n        // console.log('EventEmitter.on', name);\n        if (!this.list[name]) {\n            this.list[name] = [];\n        }\n        this.list[name].push(cb);\n    }\n    off(name, cb) {\n        // console.log('EventEmitter.off', name);\n        const i = this.list[name].indexOf(cb);\n        if (i === -1) {\n            throw new Error(`cannot find cb for ${name}`);\n        }\n        // console.log(i);\n        this.list[name].splice(i, 1);\n    }\n    async emit(name, e) {\n        // console.log('EventEmitter.emit', name, e);\n        if (this.list[name] && this.list[name].length) {\n            const results = await Promise.allSettled(this.list[name].map(cb => cb(e)));\n            // console.log('results:', results);\n            for (const result of results) {\n                if (result.status === 'rejected') {\n                    throw result.reason;\n                }\n            }\n        }\n    }\n}\n","class LoginFrontHostApp extends FrontHostApp {\n    constructor(data) {\n        console.log('LoginFrontHostApp.constructor', data);\n        super();\n        this.data = data;\n    }\n    async run() {\n        console.log('LoginFrontHostApp.run');\n        const loginController = LoginController.create(this);\n        const rootElement = document.querySelector(`.${loginController.getViewClassCssBlockName()}__root`);\n        const loginView = Helper.createReactComponent(rootElement, loginController.getViewClass(), {ctrl: loginController});\n    }\n    getText() {\n        return this.data.text;\n    }\n    getData() {\n        return this.data;\n    }\n}\n","class ViewerFrontHostApp extends FrontHostApp {\n    constructor(options = {}) {\n        if (!options.data) throw new Error('no data');\n        super();\n        this.options = options;\n        this.applicationController = null;\n    }\n    async run() {\n        console.log('ViewerFrontHostApp.run', this.options.data);\n\n        // application\n        const application = new Application(this.options.data);\n        application.init();\n\n        // applicationController\n        const applicationController = this.applicationController = ApplicationController.create(application, this);\n        applicationController.init();\n\n        // view\n        const rootElementName = `.${applicationController.getViewClass().name}__root`;\n        const rootElement = document.querySelector(rootElementName);\n        if (!rootElement) {\n            throw new Error(`no root element: ${rootElementName}`);\n        }\n        applicationController.createView(rootElement);\n\n        // connect\n        try {\n            await applicationController.connect();\n        } catch (err) {\n            this.logError(err);\n        }\n    }\n    async onWindowPopState(e) {\n        // console.log('ViewerFrontHostApp.onWindowPopState', e.state);\n        await this.applicationController.onWindowPopState(e);\n    }\n}\n\nwindow.QForms.ViewerFrontHostApp = ViewerFrontHostApp;\n","class WebSocketClient {\n    constructor(options = {}) {\n        this.options = options;\n        if (!options.applicationController) throw new Error('no options.applicationController');\n        if (!options.protocol) throw new Error('no options.protocol');\n        this.url = `${options.protocol}://${window.location.host}/?route=${encodeURIComponent(options.route)}&uuid=${encodeURIComponent(options.uuid)}&userId=${encodeURIComponent(options.userId)}`;\n        this.webSocket         = null;\n        this.refreshTimeoutId  = null;\n        this.RECONNECT_TIMEOUT = 10;        // sec\n        this.REFRESH_TIMEOUT   = 60*60;     // sec\n    }\n    connect() {\n        console.log('WebSocketClient.connect', this.url);\n        return new Promise((resolve, reject) => {\n            this.webSocket = new WebSocket(this.url);\n            this.webSocket.onclose = async e => {\n                this.webSocket = null;\n                reject(new Error(`Connection failed ${e.code}`));\n            };\n            this.webSocket.onopen = e => {\n                this.webSocket.onclose   = this.onClose.bind(this);\n                this.webSocket.onmessage = this.onMessage.bind(this);\n                this.startRefreshTimeout();\n                resolve(e);\n            };\n        });\n    }\n    async onRefreshTimeout() {\n        // console.log('WebSocketClient.onRefreshTimeout');\n        this.refreshTimeoutId = null;\n        this.send('ping');\n        this.startRefreshTimeout();\n    }\n    send(data) {\n        console.log('WebSocketClient.send', data);\n        this.webSocket.send(data);\n    }\n    startRefreshTimeout() {\n        this.refreshTimeoutId = setTimeout(this.onRefreshTimeout.bind(this), this.REFRESH_TIMEOUT * 1000);\n    }\n    resetRefreshTimeout() {\n        if (this.refreshTimeoutId) {\n            clearTimeout(this.refreshTimeoutId);\n            this.refreshTimeoutId = null;\n        }\n    }\n    async reconnect() {\n        console.log('WebSocketClient.reconnect');\n        try {\n            await this.connect();\n        } catch (err) {\n            console.error(err);\n            console.log(`waiting ${this.RECONNECT_TIMEOUT} sec for socket reconnect...`);\n            setTimeout(async () => await this.reconnect(), this.RECONNECT_TIMEOUT * 1000);\n        }\n    }\n\n    async onClose(e) {\n        console.error('WebSocketClient.onClose', e);\n        this.resetRefreshTimeout();\n        this.webSocket.onclose = null;\n        this.webSocket.onmessage = null;\n        this.webSocket = null;\n        await this.reconnect();\n    }\n    async onMessage(e) {\n        console.log('WebSocketClient.onMessage', JSON.parse(e.data));\n        const packet = JSON.parse(e.data);\n        if (packet.type === 'result') {\n            this.getApp().getView().disableRerender();\n            await this.getApp().getModel().emitResult(packet.data);\n            this.getApp().getView().enableRerender();\n            this.getApp().getView().rerender();\n        }\n    }\n    getApp() {\n        return this.options.applicationController;\n    }\n}\n","class Controller extends EventEmitter {\n    constructor() {\n        super();\n        this.view = null;\n    }\n    onViewCreate = view => {\n        // console.log('Controller.onViewCreate');\n        this.view = view;\n    }\n    async rerender() {\n        if (this.view) {\n            return await this.view.rerender();\n        }\n        console.error(`${this.constructor.name}.rerender no view`);\n    }\n    getView() {\n        return this.view;\n    }\n    getViewClass() {\n        throw new Error(`${this.constructor.name}.getViewClass not implemented`);\n    }\n}\n","class AlertController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return AlertView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onOkButtonClick = async e => {\n        this.close(true);\n    }\n    onCloseClick = async e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class ConfirmController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return ConfirmView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onYesClick = e => {\n        this.close(true);\n    }\n    onCloseClick = e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class LoginController extends Controller {\n    constructor(frontHostApp) {\n        super();\n        console.log(`${this.constructor.name}.constructor`);\n        this.frontHostApp = frontHostApp;\n    }\n    static create(frontHostApp) {\n        const data = frontHostApp.getData();\n        if (!data.name) throw new Error('no app name');\n        const CustomClass = FrontHostApp.getClassByName(`${data.name}LoginController`);\n        const Class = CustomClass ? CustomClass : LoginController;\n        return new Class(frontHostApp);\n    }\n    getViewClass() {\n        return LoginView;\n    }\n    getText() {\n        return this.frontHostApp.getText();\n    }\n    getFrontHostApp() {\n        return this.frontHostApp;\n    }\n    getViewClassCssBlockName() {\n        return this.getViewClass().name;\n    }\n}\n","class ModalController extends Controller {\n    constructor(options = {}) {\n        super();\n        if (!options.app) throw new Error('no app');\n        if (!options.id) throw new Error('no id');\n        this.options = options;\n    }\n    getId() {\n        return this.options.id;\n    }\n    getApp() {\n        return this.options.app;\n    }\n    async close() {\n        await this.getApp().closeModal(this);\n        if (this.options.onClose) {\n            this.options.onClose();\n        }\n    }\n}\n","class ImageDialogController extends ModalController {\n    constructor(options) {\n        // console.log('ImageDialogController.constructor', options);\n        super(options);\n        if (!options.src) throw new Error('no src');\n    }\n    getViewClass() {\n        console.log('ImageDialogController.getViewClass');\n        return ImageDialogView;\n    }\n    getSrc() {\n        return this.options.src;\n    }\n    onCloseClick = async e => {\n        await this.close();\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            await this.close();\n        }\n    }\n}\n","class ModelController extends Controller {\n    constructor(model, parent) {\n        super();\n        this.model    = model;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.model.getFullName()}: controller already deinited`);\n        this.deinited = true;\n    }\n    getModel() {\n        return this.model;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getTitle() {\n        return this.getModel().getCaption();\n    }\n    getViewClass() {\n        // console.log(`${this.constructor.name}.getViewClass`, this.getModel().getAttr('viewClass'));\n        const model = this.getModel();\n        if (!model.isAttr('viewClass')) throw new Error(`${this.constructor.name} not supports view`);\n        const viewClassName = model.getAttr('viewClass');\n        return viewClassName ? eval(viewClassName) : null;\n    }\n}\n\nwindow.QForms.ModelController = ModelController;\n","class ApplicationController extends ModelController {\n    constructor(model, frontHostApp) {\n        // console.log('ApplicationController.constructor', model, view);\n        super(model, null);\n        this.frontHostApp = frontHostApp;\n        this.lastId = 0;\n        this.activePage = null;     // active non modal page\n        this.modals = [];\n        this.statusbar  = null;\n        this.homePageName = null;\n        this.webSocketClient = null;\n    }\n    static create(model, frontHostApp) {\n        // console.log('ApplicationController.create', 'debug:', ApplicationController.isDebugMode());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}ApplicationController`);\n        const Class = CustomClass ? CustomClass : ApplicationController;\n        return new Class(model, frontHostApp);\n    }\n    static getSearchObj() {\n        // console.log('ApplicationController.getSearchObj:', window.location);\n        if (!window.location.search.split('?')[1]) return {};\n        return window.location.search.split('?')[1].split('&').reduce((acc, item) => {\n            const kv = item.split('=');\n            acc[kv[0]] = kv[1];\n            return acc;\n        }, {});\n    }\n    static isDebugMode() {\n        return ApplicationController.getSearchObj()['debug'] === '1';\n    }\n    init() {\n        // console.log('ApplicationController.init');\n        super.init();\n        // this.model.on('logout' , this.onLogout);\n        this.model.on('request', this.onRequest);\n        const pageData = this.model.data.pages[0];\n        this.activePage = pageData ? this.createPage(pageData, {\n            modal : false,\n            params: this.getGlobalParams()\n        }) : null;\n        document.title = this.getTitle();\n        this.homePageName = this.activePage.getModel().getName();\n    }\n    deinit() {\n        // this.model.off('logout', this.onLogout);\n        this.model.off('request', this.onRequest);\n        super.deinit();\n    }\n    getViewClass() {\n        return super.getViewClass() || ApplicationView;\n    }\n    createView(rootElement) {\n        // console.log('ApplicationController.createView');\n        this.view = Helper.createReactComponent(rootElement, this.getViewClass(), {ctrl: this});\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(this.model.getAttr('time'));\n        }\n    }\n    onRequest = async e => {\n        console.log('onRequest', e);\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(e.time);\n        }\n        // console.log('e.remoteAppVersion', e.remoteAppVersion);\n        // console.log('this.getModel().getData().versions.app', this.getModel().getData().versions.app);\n        if (this.getModel().getData().versions.app !== e.remoteAppVersion) {\n            this.createVersionNotificationIfNotExists();\n        }\n    }\n    createVersionNotificationIfNotExists() {\n        // console.log('ApplicationController.createVersionNotificationIfNotExists');\n        if (!document.querySelector(`.${this.getView().getCssBlockName()}__version-notification`)) {\n            const div = document.createElement('div');\n            div.innerHTML = this.getModel().getText().application.versionNotification;\n            div.className = `${this.getView().getCssBlockName()}__version-notification`;\n            document.querySelector(`.${this.getView().getCssBlockName()}__body`).append(div);\n        } else {\n            // console.log(`version notification already exists`);\n        }\n    }\n    getGlobalParams() {\n        return {\n            // foo: 'bar'\n        };\n    }\n    // options\n    // - modal      : boolean,\n    // - newMode    : boolean,\n    // - selectMode : boolean,\n    // - selectedKey: string,\n    // - onCreate   : function,\n    // - onSelect   : function,\n    // - onClose    : function,\n    // - params     : object,\n    createPage(pageData, options) {\n        if (options.modal === undefined) throw new Error('no options.modal');\n\n        // model\n        const pageModel = new Page(pageData, this.model, options);\n        pageModel.init();\n\n        // controller\n        const pc = PageController.create(pageModel, this, `c${this.getNextId()}`);\n        pc.init();\n\n        return pc;\n    }\n    async openPage(options) {\n        console.log('ApplicationController.openPage', options);\n        if (!options.name) throw new Error('no name');\n        if (options.key) throw new Error('openPage: key param is deprecated');\n\n        // if this page with this key is already opened, then show it\n        const pageController = this.findPageControllerByPageNameAndKey(options.name, null);\n        // console.log('pageController:', pageController);\n        if (pageController) {\n            this.onPageSelect(pageController);\n            return pageController;\n        }\n\n        const {page: pageData} = await this.model.request({\n            action : 'page',\n            page   : options.name,\n            newMode: !!options.newMode,\n            params : options.params || {}\n        });\n\n        // modal by default\n        if (options.modal === undefined) {\n            options.modal = true;\n        }\n        if (!options.onClose) {\n            const activeElement = document.activeElement;\n            options.onClose = () => {\n                if (activeElement) activeElement.focus();\n            };\n        }\n        const pc = this.createPage(pageData, options);\n        // console.log('pc:', pc);\n\n        // show\n        pc.isModal() ? this.addModal(pc) : this.addPage(pc);\n        await this.rerender();\n\n        return pc;\n    }\n    addModal(ctrl) {\n        this.modals.push(ctrl);\n    }\n    removeModal(ctrl) {\n        // console.log('ApplicationController.removeModal', ctrl);\n        const i = this.modals.indexOf(ctrl);\n        if (i === -1) throw new Error(`cannot find modal: ${ctrl.getId()}`);\n        this.modals.splice(i, 1);\n    }\n    getNextId() {\n        this.lastId++;\n        return this.lastId;\n    }\n    getNewId() {\n        return `c${this.getNextId()}`;\n    }\n    addPage(pc) {\n        if (this.activePage) {\n            this.closePage(this.activePage);\n        }\n        this.activePage = pc;\n        document.title = this.getTitle();\n    }\n    findPageControllerByPageNameAndKey(pageName, key) {\n        if (this.activePage && this.activePage.model.getName() === pageName && this.activePage.model.getKey() === key) {\n            return this.activePage;\n        }\n        return null;\n    }\n    onPageSelect(pc) {\n        console.log('ApplicationController.onPageSelect', pc.model.getName());\n    }\n    async closePage(pageController) {\n        console.log('ApplicationController.closePage', pageController.model.getFullName());\n        if (this.modals.indexOf(pageController) > -1) {\n            this.modals.splice(this.modals.indexOf(pageController), 1);\n        } else if (this.activePage === pageController) {\n            this.activePage = null;\n            document.title = '';\n        } else  {\n            throw new Error('page not found');\n        }\n        await this.rerender();\n        pageController.deinit();\n        pageController.model.deinit();\n    }\n    async onActionClick(name) {\n        console.log('ApplicationController.onActionClick', name);\n    }\n    getMenuItemsProp() {\n        // console.log('ApplicationController.getMenuItemsProp');\n        return [\n            // pages & actions\n            ...(this.model.data.menu ? Object.keys(this.model.data.menu).map(key => ({\n                name : key,\n                title: key,\n                items: this.model.data.menu[key].map(item => ({\n                    type : item.type,\n                    name : item.page || item.action,\n                    title: item.caption\n                }))\n            })) : []),\n            // user\n            ...(this.model.getUser() ? [{\n                name : 'user',\n                title: `${this.model.getDomain()}/${this.model.getUser().login}`,\n                items: [\n                    {\n                        type : 'custom',\n                        name : 'logout',\n                        title: 'Logout'\n                    }\n                ]\n            }] : [])\n        ];\n    }\n    onStatusbarCreate = statusbar => {\n        this.statusbar = statusbar;\n    }\n    onLogout = async () => {\n        console.log('ApplicationController.onLogout');\n        const result = await this.model.request({action: 'logout'});\n        location.href = this.getRootPath();\n    }\n    onMenuItemClick = async (menu, type, name) => {\n        console.log('ApplicationController.onMenuItemClick', menu, type, name);\n        if (type === 'page') {\n            await this.openPage({name: name, modal: false});\n            history.pushState({pageName: name}, '', PageController.createLink({page: name}));\n        } else if (type === 'action') {\n            try {\n                const result = await this.onActionClick(name);\n                if (!result) {\n                    throw new Error(`no handler for action '${name}'`);\n                }\n            } catch (err) {\n                await this.alert({message: err.message});\n            }\n        } else if (type === 'custom' && name === 'logout') {\n            await this.onLogout();\n        } else {\n            throw new Error(`unknown menu type/name: ${type}/${name}`);\n        }\n    }\n    /*getFocusCtrl() {\n        if (this.modals.length > 0) {\n            return this.modals[this.modals.length - 1];\n        }\n        return this.activePage;\n    }*/\n    getActivePageName() {\n        if (this.activePage) {\n            return this.activePage.getModel().getName();\n        }\n        return null;\n    }\n    async onWindowPopState(e) {\n        console.log('ApplicationController.onWindowPopState', e.state);\n        await this.openPage({\n            name : e.state ? e.state.pageName : this.homePageName,\n            modal: false\n        });\n    }\n    getTitle() {\n        // console.log('ApplicationController.getTitle', this.activePage);\n        if (this.activePage) {\n            return `${this.activePage.getTitle()} - ${this.getModel().getCaption()}`;\n        }\n        return this.getModel().getCaption();\n    }\n    invalidate() {\n        if (this.activePage) this.activePage.invalidate();\n        this.modals.filter(ctrl => ctrl instanceof PageController).forEach(page => page.invalidate());\n    }\n    async alert(options) {\n        /*if (!options.title) {\n            options.title = this.getModel().getText().application.error;\n        }*/\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.alert(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    async confirm(options) {\n        if (!options.title) {\n            options.title = this.getModel().getText().application.confirm;\n        }\n        if (!options.yesButton) {\n            options.yesButton = this.getModel().getText().confirm.yes;\n        }\n        if (!options.noButton) {\n            options.noButton = this.getModel().getText().confirm.no;\n        }\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.confirm(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    getRootPath() {\n        return '/';\n    }\n    async openModal(ctrl) {\n        this.addModal(ctrl);\n        await this.rerender();\n    }\n    async closeModal(ctrl) {\n        this.removeModal(ctrl);\n        await this.rerender();\n    }\n    getHostApp() {\n        return this.frontHostApp;\n    }\n    async connect() {\n        const data = this.getModel().getData();\n        this.webSocketClient = new WebSocketClient({\n            applicationController: this,\n            protocol             : data.nodeEnv === 'development' ? 'ws' : 'wss',\n            route                : data.route,\n            uuid                 : data.uuid,\n            userId               : data.user ? data.user.id : null,\n        });\n        await this.webSocketClient.connect();\n    }\n}\n\nwindow.QForms.ApplicationController = ApplicationController;\n","class FieldController extends ModelController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    static create(model, parent) {\n        // console.log('FieldController.create', model.getFullName(), parent.model.getClassName());\n        const page = model.getPage();\n        const form = model.getForm();\n        const CustomClass = FrontHostApp.getClassByName(`${page.getName()}${form.getName()}${model.getName()}FieldController`);\n        const GeneralClass = FrontHostApp.getClassByName(`${parent.model.getClassName()}${model.getClassName()}Controller`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    valueToString(value) {\n        // console.log('Field.valueToString', this.model.getFullName(), typeof value, value);\n        switch (typeof value) {\n            case 'string':\n                return value;\n            case 'object':\n                if (value === null) return '';\n                if (value instanceof Date) return value.toISOString();\n                return JSON.stringify(value, null, 4);\n            case 'number':\n            case 'boolean':\n                return value.toString();\n            case 'undefined':\n                return '';\n            default: throw new Error(`${this.model.getFullName()}: unknown value type: ${typeof value}, value: ${value}`);\n        }\n    }\n    stringToValue(stringValue) {\n        // console.log('FieldController.stringToValue', this.model.getFullName(), stringValue);\n        // if (stringValue === undefined) return undefined;\n        // if (stringValue === null) return null;\n        const fieldType = this.model.getType();\n        // console.log('fieldType:', fieldType);\n        if (stringValue.trim() === '') return null;\n        if (fieldType === 'object' || fieldType === 'boolean') {\n            return JSON.parse(stringValue);\n        } else if (fieldType === 'date') {\n            const date = new Date(stringValue);\n            if (date.toString() === 'Invalid Date') throw new Error(`${this.getApp().getModel().getText().error.invalidDate}: ${stringValue}`);\n            return date;\n        } else if (fieldType === 'number') {\n            const num = Number(stringValue);\n            if (isNaN(num)) throw new Error(this.getApp().getModel().getText().error.notNumber);\n            return num;\n        }\n        return stringValue;\n    }\n    getViewStyle(row) {\n        return null;\n    }\n    async openPage(options) {\n        return await this.getParent().openPage(options);\n    }\n    getForm() {\n        return this.parent;\n    }\n    getPage() {\n        return this.parent.parent;\n    }\n    getApp() {\n        return this.parent.parent.parent;\n    }\n    isVisible() {\n        return this.getModel().getAttr('visible') === 'true';\n    }\n    isAutoFocus() {\n        return this.getModel().getAttr('autoFocus') === 'true';\n    }\n    getAutocomplete() {\n        return this.getModel().getAttr('autocomplete') || null;\n    }\n    getFormat() {\n        return this.getModel().getAttr('format');\n    }\n}\nwindow.QForms.FieldController = FieldController;\n","class RowFormFieldController extends FieldController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            value     : null,\n            parseError: null,\n            error     : null,\n            changed   : false,\n        };\n    }\n    init() {\n        const row = this.getRow();\n        const value = this.model.getValue(row);\n        this.setValue(value);\n        // console.log(this.model.getFullName(), value);\n    }\n    refill() {\n        // console.log('RowFormFieldController.refill', this.model.getFullName());\n        if (!this.view) return;\n        const value = this.model.getValue(this.getRow());\n        this.setValue(value);\n        this.resetErrors();\n        this.refreshChanged();\n    }\n    getRow() {\n        return this.model.getForm().getRow();\n    }\n    copyValueToModel() {\n        // console.log('RowFormFieldController.copyValueToModel', this.model.getFullName());\n        this.model.setValue(this.getRow(), this.getValue());\n    }\n    _onChange(widgetValue) {\n\n    }\n    putValue(widgetValue) {\n        // console.log('RowFormFieldController.putValue', widgetValue);\n        this.onChange(widgetValue, false);\n    }\n    onChange = async (widgetValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onChange', widgetValue);\n        this._onChange(widgetValue);\n        this.resetErrors();\n        try {\n            this.setValueFromWidget(widgetValue);\n        } catch (err) {\n            console.error(`${this.model.getFullName()}: cannot parse view value: ${err.message}`);\n            this.state.parseError = err.message;\n        }\n\n        if (this.model.validateOnChange()) {\n            this.validate();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    onBlur = (widgetValue, fireEvent = true) => {\n        // console.log('RowFormFieldController.onBlur', this.model.getFullName());\n        if (this.model.validateOnBlur()) {\n            console.log('validateOnBlur');\n            this.validate();\n            if (this.isValid()) {\n                this.model.setValue(this.getRow(), this.getValue());\n            }\n            this.refreshChanged();\n            if (fireEvent) {\n                try {\n                    this.emit('change', {value: widgetValue});\n                } catch (err) {\n                    console.error('unhandled change event error:', this.model.getFullName(), err);\n                }\n                this.parent.onFieldChange({source: this});\n            }\n        }\n    }\n    getValueForWidget() {\n        const value = this.getValue();\n        // console.log('value:', this.model.getFullName(), value, typeof value);\n        return this.valueToString(value);\n    }\n    setValueFromWidget(widgetValue) {\n        // console.log('RowFormFieldController.setValueFromWidget', this.model.getFullName(), typeof widgetValue, widgetValue);\n        if (typeof widgetValue !== 'string') throw new Error(`${this.model.getFullName()}: widgetValue must be string, but got ${typeof widgetValue}`);\n        const value = this.stringToValue(widgetValue);\n        // console.log('value:', value);\n        this.setValue(value);\n    }\n    setValue(value) {\n        // console.log('RowFormFieldController.setValue', this.model.getFullName(), value);\n        this.state.value = value;\n    }\n    getValue() {\n        return this.state.value;\n    }\n    isChanged() {\n        // console.log('RowFormFieldController.isChanged', this.model.getFullName(), this.state);\n        return this.state.changed;\n    }\n    isValid() {\n        return this.state.parseError === null && this.state.error === null;\n    }\n    validate() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        if (this.isVisible()) {\n            this.state.error = this.getError();\n        }\n    }\n    refreshChanged() {\n        this.state.changed = this.calcChangedState(this.getRow());\n    }\n    getPlaceholder() {\n        // console.log('RowFormFieldController.getPlaceholder', this.model.getFullName(), this.model.getAttr('placeholder'));\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        if (ApplicationController.isDebugMode()) {\n            const value = this.getValue();\n            if (value === undefined) return 'undefined';\n            if (value === null) return 'null';\n            if (value === '') return 'empty string';\n        }\n    }\n    getError() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.view && this.view.getWidget()) {\n            try {\n                const widgetValue = this.view.getWidget().getValue();\n            } catch (err) {\n                return `can't parse value: ${err.message}`;\n            }\n        }\n\n        // null validator\n        const value = this.getValue();\n        if (this.model.isNotNull() && (value === null || value === undefined)) {\n            return this.getModel().getApp().getText().form.required;\n        }\n        return null;\n    }\n    isEditable() {\n        return this.parent.getMode() === 'edit' && !this.model.isReadOnly();\n    }\n    isParseError() {\n        return this.state.parseError !== null;\n    }\n    calcChangedState(row) {\n        // console.log('RowFormFieldController.calcChangedState', this.model.getFullName());\n        if (!row) throw new Error('FieldController: no row');\n        if (this.isParseError()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: parse error: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (!this.isValid()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: not valid: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (this.model.hasColumn()) {\n            const fieldRawValue = this.model.valueToRaw(this.getValue());\n            const dsRawValue = this.model.getRawValue(row);\n            if (fieldRawValue !== dsRawValue) {\n                console.log(`FIELD CHANGED ${this.model.getFullName()}`, dsRawValue, fieldRawValue);\n                return true;\n            }\n        }\n        if (this.model.isChanged(row)) {\n            let original = row[this.model.getAttr('column')];\n            let modified = this.model.getDefaultDataSource().getRowWithChanges(row)[this.model.getAttr('column')];\n            if (original) original = original.substr(0, 100);\n            if (modified) modified = modified.substr(0, 100);\n            console.log(`MODEL CHANGED ${this.model.getFullName()}:`, original, modified);\n            return true;\n        }\n        return false;\n    }\n    setError(error) {\n        this.state.error = error;\n    }\n    resetErrors() {\n        this.setError(null);\n        this.state.parseError = null;\n    }\n    getErrorMessage() {\n        if (this.state.parseError) {\n            return this.state.parseError;\n        }\n        return this.state.error;\n    }\n}\nwindow.QForms.RowFormFieldController = RowFormFieldController;\n","class RowFormCheckBoxFieldController extends RowFormFieldController {\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n\n    getViewClass() {\n        return super.getViewClass() || RowFormCheckBoxFieldView;\n    }\n}\n\nwindow.QForms.RowFormCheckBoxFieldController = RowFormCheckBoxFieldController;\n","class RowFormComboBoxFieldController extends RowFormFieldController {\n    init() {\n        // console.log('RowFormComboBoxFieldController.init', this.getModel().getFullName());\n        super.init();\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.on('insert', this.onListInsert);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListDelete);\n    }\n    deinit() {\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.off('insert', this.onListInsert);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListDelete);\n        super.deinit();\n    }\n\n    getItems() {\n        try {\n            return this.getRows().map(row => ({\n                value: this.model.getValueValue(row).toString(),\n                title: this.model.getDisplayValue(row).toString()\n            }));\n        } catch (err) {\n            err.message = `${this.getModel().getFullName()}: ${err.message}`;\n            throw err;\n        }\n    }\n    getRows() {\n        return this.model.getComboBoxDataSource().getRows();\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormComboBoxFieldView;\n    }\n    getPlaceholder() {\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        return ApplicationController.isDebugMode() ? '[null]' : null;\n    }\n    onEditButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onEditButtonClick');\n        const itemEditPage = this.getModel().getAttr('itemEditPage');\n        const value = this.getValue();\n        // console.log('itemEditPage', itemEditPage);\n        // console.log('value:', value);\n        if (itemEditPage && value) {\n            await this.openPage({\n                name: itemEditPage,\n                params: {\n                    key: value\n                }\n            });\n        }\n    }\n    onCreateButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onCreateButtonClick');\n        const newRowMode = this.getModel().getAttr('newRowMode');\n        const itemCreateForm = this.getModel().getAttr('itemCreateForm');\n        if (!itemCreateForm) throw new Error('no itemCreateForm');\n\n        let createPageName;\n        if (newRowMode === 'editPage') {\n            createPageName = this.getModel().getAttr('itemEditPage');\n        } else if (newRowMode === 'createPage') {\n            createPageName = this.getModel().getAttr('itemCreatePage');\n        } else {\n            throw new Error(`wrong newRowMode value: ${newRowMode}`);\n        }\n\n        // page\n        const pc = await this.openPage({\n            name: createPageName,\n            newMode: true\n        });\n\n        // form\n        const form = pc.getModel().getForm(itemCreateForm);\n        const onInsert = async e => {\n            form.off('insert', onInsert);\n            const [key] = e.inserts;\n            const [id] = Helper.decodeValue(key);\n            // console.log('id:', id);\n            await this.onChange(id.toString());\n        }\n        form.on('insert', onInsert);\n    }\n    onListInsert = async e => {\n        console.log('RowFormComboBoxFieldController.onListInsert');\n        await this.rerender();\n    }\n    onListUpdate = async e => {\n        // console.log('RowFormComboBoxFieldController.onListUpdate');\n        await this.rerender();\n    }\n    onListDelete = async e => {\n        await this.rerender();\n    }\n    onItemSelect = async e => {\n        // console.log('RowFormComboBoxFieldController.onItemSelect');\n        if (e.button === 0) {\n            e.preventDefault();\n            const id = this.getValue();\n            const selectedKey = id ? JSON.stringify([id]) : null;\n            await this.openPage({\n                name       : this.getModel().getAttr('itemSelectPage'),\n                selectMode : true,\n                selectedKey: selectedKey,\n                onSelect   : async key => {\n                    if (key) {\n                        const [id] = Helper.decodeValue(key);\n                        // console.log('id:', id);\n                        if (this.getValue() !== id) {\n                            await this.getView().onChange(id.toString());\n                        }\n                    } else {\n                        if (this.getValue() !== null) {\n                            await this.getView().onChange('');\n                        }\n                    }\n                }\n            });\n        }\n    }\n}\n\nwindow.QForms.RowFormComboBoxFieldController = RowFormComboBoxFieldController;\n","class RowFormDateFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormDateFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n}\nwindow.QForms.RowFormDateFieldController = RowFormDateFieldController;\n","class RowFormDateTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.widget2 = null;\n        this.defaultValue = 0;\n        this.state.parseError2 = null;\n        this.state.error2 = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormDateTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    getValueForTime() {\n        // console.log('RowFormDateTimeFieldController.getValueForTime', this.model.getFullName(), this.defaultValue, TimeBox.getStringValue(this.defaultValue));\n        const date = this.getValue();\n        if (date) {\n            const value = date.getHours() * 60 + date.getMinutes();\n            // console.log('value:', value);\n            if (value !== this.defaultValue) {\n                // console.log('not equal to default value', value, this.defaultValue);\n                return value;\n            }\n        }\n        return null;\n    }\n    setValueFromWidget(widgetValue) {\n        if (widgetValue === null) {\n            this.state.parseError2 = null;\n            this.resetErrors2();\n            if (this.widget2) this.widget2.setValue(null);\n        } else {\n            const [h, m] = TimeBox.splitTime(this.defaultValue);\n            widgetValue.setHours(h, m);\n        }\n        this.setValue(widgetValue);\n    }\n    onView2Create = widget2 => {\n        // console.log('RowFormDateTimeFieldController.onView2Create', widget2);\n        this.widget2 = widget2;\n    };\n    _onChange(widgetValue) {\n        // console.log('RowFormDateTimeFieldController._onChange', this.widget2);\n        if (widgetValue !== null) {\n            setTimeout(() => {\n                const input = this.widget2.getElement();\n                input.focus();\n                input.setSelectionRange(0, input.value.length);\n            }, 0);\n        }\n    }\n    onChange2 = (widgetValue, fireEvent = true) => {\n        // console.log('RowFormDateTimeFieldController.onChange2', widgetValue);\n        this.resetErrors2();\n        try {\n            this.setValueFromView2(widgetValue);\n        } catch (err) {\n            console.log(`${this.model.getFullName()}: cannot parse time: ${err.message}`);\n            this.state.parseError2 = err.message;\n        }\n        if (!this.state.parseError2) {\n            this.validate2();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    };\n    onBlur2 = (widgetValue, fireEvent = false) => {\n        console.log('RowFormDateTimeFieldController.onBlur2', widgetValue);\n        if (!this.isEditable()) return;\n        this.validate2();\n        if (this.isValid()) {\n            this.copyValueToModel();\n        }\n        this.refreshChanged();\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n        }\n        this.parent.onFieldChange({source: this});\n    };\n    getPlaceholder2() {\n        return TimeBox.getStringValue(this.defaultValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue(defaultValue) {\n        // console.log('RowFormDateTimeFieldController.setDefaultValue', this.widget2 ? this.widget2.getValue() : null);\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24 * 60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n        if (this.widget2 && this.widget2.getValue() === null && this.state.value) {\n            this.setValue2(null);\n        }\n    }\n    setValueFromView2(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error('wrong time');\n        this.setValue2(widgetValue);\n    }\n    setValue2(widgetValue) {\n        const value = widgetValue !== null ? widgetValue : this.defaultValue;\n        const [h, m] = TimeBox.splitTime(value);\n        this.state.value.setHours(h, m);\n    }\n    validate2() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        this.state.error2 = this.getError2();\n    }\n    getError2() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.widget2) {\n            try {\n                const widgetValue = this.widget2.getValue();\n            } catch (err) {\n                return `can't parse time: ${err.message}`;\n            }\n        }\n\n        return null;\n    }\n    isParseError2() {\n        return this.state.parseError2 !== null;\n    }\n    resetErrors2() {\n        this.setError2(null);\n        this.state.parseError2 = null;\n    }\n    setError2(error2) {\n        this.state.error2 = error2;\n    }\n    getErrorMessage2() {\n        if (this.state.parseError2) {\n            return this.state.parseError2;\n        }\n        return this.state.error2;\n    }\n    isValid2() {\n        return this.state.parseError2 === null && this.state.error2 === null;\n    }\n    refill() {\n        // console.log('RowFormDateTimeFieldController.refill');\n        if (!this.widget2) return;\n        super.refill();\n        this.widget2.setValue(this.getValueForTime());\n        this.resetErrors2();\n        this.refreshChanged();\n    }\n    isParseError() {\n        return super.isParseError() || this.isParseError2();\n    }\n    isValid() {\n        return super.isValid() && this.isValid2();\n    }\n    getErrorMessage() {\n        if (super.getErrorMessage() === null && this.getErrorMessage2() === null) return null;\n        return [\n            ...(super.getErrorMessage() ? [super.getErrorMessage()] : []),\n            ...(this.getErrorMessage2() ? [this.getErrorMessage2()] : [])\n        ].join(', ');\n    }\n}\nwindow.QForms.RowFormDateTimeFieldController = RowFormDateTimeFieldController;\n","class RowFormFileFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormFileFieldView;\n    }\n}\nwindow.QForms.RowFormFileFieldController = RowFormFileFieldController;\n","class RowFormImageFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormImageFieldView;\n    }\n}\nwindow.QForms.RowFormImageFieldController = RowFormImageFieldController;\n","class RowFormLinkFieldController extends  RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('RowFormLinkFieldController.onClick', e);\n        this.emit({source: this});\n    }\n}\nwindow.QForms.RowFormLinkFieldController = RowFormLinkFieldController;\n","class RowFormPasswordFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPasswordFieldView;\n    }\n}\nwindow.QForms.RowFormPasswordFieldController = RowFormPasswordFieldController;\n","class RowFormPhoneFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPhoneFieldView;\n    }\n}\nwindow.QForms.RowFormPhoneFieldController = RowFormPhoneFieldController;\n","class RowFormTextAreaFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextAreaFieldView;\n    }\n}\nwindow.QForms.RowFormTextAreaFieldController = RowFormTextAreaFieldController;\n","class RowFormTextBoxFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextBoxFieldView;\n    }\n}\nwindow.QForms.RowFormTextBoxFieldController = RowFormTextBoxFieldController;\n","class RowFormTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.defaultValue = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error('wrong time');\n        this.setValue(widgetValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue(defaultValue) {\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24*60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n    }\n    getPlaceholder() {\n        // console.log('CarReservefromTimeController.getPlaceholder', this.defaultValue);\n        if (this.defaultValue !== null) return TimeBox.getStringValue(this.defaultValue);\n        return super.getPlaceholder();\n    }\n}\nwindow.QForms.RowFormTimeFieldController = RowFormTimeFieldController;\n","class TableFormFieldController extends FieldController {\n    getValueForWidget(row) {\n        // console.log('TableFormFieldController.getValueForWidget');\n        return this.valueToString(this.model.getValue(row));\n    }\n}\nwindow.QForms.TableFormFieldController = TableFormFieldController;\n","class TableFormCheckBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormCheckBoxFieldView;\n    }\n    getValueForWidget(row) {\n        return this.model.getValue(row);\n    }\n}\nwindow.QForms.TableFormCheckBoxFieldController = TableFormCheckBoxFieldController;\n","class TableFormComboBoxFieldController extends TableFormFieldController {\n\n    init() {\n        super.init();\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.on('insert', this.onListUpdate);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListUpdate);\n    }\n\n    deinit() {\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.off('insert', this.onListUpdate);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListUpdate);\n        super.deinit();\n    }\n\n    getViewClass() {\n        return super.getViewClass() || TableFormComboBoxFieldView;\n    }\n\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        const rawValue = this.model.valueToRaw(value);\n        if (rawValue === undefined || rawValue === 'null') return '';\n        const cbRow = this.model.findRowByRawValue(rawValue);\n        if (cbRow) {\n            return this.valueToString(this.model.getDisplayValue(cbRow));\n        }\n        return `[no row for id: ${rawValue}]`;\n    }\n\n    onListUpdate = async e => {\n        // console.log('TableFormComboBoxFieldController.onListUpdate', this.getModel().getFullName());\n        this.getForm().invalidate();\n        await this.getForm().rerender();\n    }\n\n}\nwindow.QForms.TableFormComboBoxFieldController = TableFormComboBoxFieldController;\n","class TableFormDateFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateFieldController = TableFormDateFieldController;\n","class TableFormDateTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateTimeFieldController = TableFormDateTimeFieldController;\n","class TableFormLinkFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('TableFormLinkFieldController.onClick', e);\n        e.preventDefault();\n        this.emit('click', {source: this});\n    }\n}\nwindow.QForms.TableFormLinkFieldController = TableFormLinkFieldController;\n","class TableFormPhoneFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormPhoneFieldView;\n    }\n}\n","class TableFormTextAreaFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextAreaFieldView;\n    }\n}\nwindow.QForms.TableFormTextAreaFieldController = TableFormTextAreaFieldController;\n","class TableFormTextBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextBoxFieldView;\n    }\n    /*beginEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'text';\n        view.firstElementChild.contentEditable = true;\n        const range = document.createRange();\n        range.selectNodeContents(view.firstElementChild);\n        window.getSelection().removeAllRanges();\n        window.getSelection().addRange(range);\n        view.firstElementChild.focus();\n        return true;\n    }*/\n\n    /*endEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'none';\n        view.firstElementChild.contentEditable = false;\n    }*/\n}\nwindow.QForms.TableFormTextBoxFieldController = TableFormTextBoxFieldController;\n","class TableFormTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        return TimeBox.getStringValue(value);\n    }\n}\nwindow.QForms.TableFormTimeFieldController = TableFormTimeFieldController;\n","class FormController extends ModelController {\n    static create(model, parent) {\n        // console.log('FormController.create', model.getFullName());\n        const page = model.getPage();\n        const customClassName = `${page.getName()}${model.getName()}FormController`;\n        const CustomClass = FrontHostApp.getClassByName(customClassName);\n        const GeneralClass = FrontHostApp.getClassByName(`${model.getClassName()}Controller`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    constructor(model, parent) {\n        super(model, parent);\n        this.fields = {};\n    }\n    init() {\n        for (const field of this.model.fields) {\n            const ctrl = this.fields[field.getName()] = FieldController.create(field, this);\n            ctrl.init();\n        }\n    }\n    deinit() {\n        // console.log('FormController.deinit:', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].deinit();\n        }\n        super.deinit();\n    }\n    isValid() {\n        return true;\n    }\n    async openPage(options) {\n        return await this.getPage().openPage(options);\n    }\n    getPage() {\n        return this.parent;\n    }\n    isChanged() {\n        return false;\n    }\n    async onFieldChange(e) {\n        // console.log('FormController.onFieldChange', this.model.getFullName());\n        await this.getPage().onFormChange(e);\n    }\n    getUpdated() {\n        return this.state.updated;\n    }\n    invalidate() {\n        this.state.updated = Date.now();\n    }\n    async onActionClick(name, row) {\n        console.log('FormController.onActionClick', name, row);\n    }\n    getField(name) {\n        return this.fields[name];\n    }\n    getApp() {\n        return this.parent.parent;\n    }\n    getSelectedRowKey() {\n        return null;\n    }\n    isAutoFocus() {\n        for (const name in this.fields) {\n            if (this.fields[name].isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nwindow.QForms.FormController = FormController;\n","class RowFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now(),\n            mode   : 'edit',\n            hasNew : false,\n            changed: false,\n            valid  : true\n        };\n    }\n\n    init() {\n        super.init();\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('insert' , this.onModelInsert);\n        this.model.on('update' , this.onModelUpdate);\n        if (this.model.getDefaultDataSource().getClassName() === 'SqlDataSource') {\n            this.state.mode = 'view';\n        }\n        this.calcState();\n        if (this.state.hasNew) {\n            this.state.mode = 'edit';\n        }\n    }\n\n    deinit() {\n        // console.log('RowFormController.deinit', this.model.getFullName());\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('insert' , this.onModelInsert);\n        this.model.off('update' , this.onModelUpdate);\n        super.deinit();\n    }\n\n    calcState() {\n        this.state.hasNew  = this.model.hasNew();\n        this.state.changed = this.isChanged();\n        this.state.valid   = this.isValid();\n        // console.log('hasNew:', hasNew);\n        // console.log('changed:', changed);\n        // console.log('valid:', valid);\n    }\n\n    refill() {\n        console.log('RowFormController.refill', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].refill();\n        }\n    }\n\n    onModelRefresh = async e => {\n        console.log('RowFormController.onModelRefresh', this.model.getFullName());\n        if (!this.view) return;\n        this.refill();\n        this.invalidate();\n        this.rerender();\n    }\n\n    onModelInsert = async e => {\n        console.log('RowFormController.onModelInsert', this.model.getFullName());\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormInsert(e);\n    }\n\n    onModelUpdate = async e => {\n        console.log('RowFormController.onModelUpdate', this.model.getFullName(), e);\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormUpdate(e);\n    }\n\n    isValid() {\n        // console.log('RowFormController.isValid', this.model.getFullName());\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (!field.isValid()) return false;\n        }\n        return true;\n    }\n    validate() {\n        // console.log('RowFormController.validate', this.getModel().getFullName());\n        for (const name in this.fields) {\n            this.fields[name].validate();\n        }\n        this.invalidate();\n    }\n    clearFieldsError() {\n        for (const name in this.fields) {\n            this.fields[name].setError(null);\n        }\n    }\n    onSaveClick = async () => {\n        console.log('RowFormController.onSaveClick');\n        this.validate();\n        this.calcState();\n        if (this.isValid()) {\n            this.state.mode = 'view';\n            try {\n                this.getApp().getView().disableRerender();\n                await this.model.update();\n                console.log('form model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n                await this.getApp().getView().rerender();\n            }\n        } else {\n            console.error(`cannot update invalid row form: ${this.model.getFullName()}`);\n            await this.rerender();\n        }\n    }\n\n    onDiscardClick = () => {\n        console.log('RowFormController.onDiscardClick', this.model.getFullName());\n        const changedFields = [];\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row) || !field.isValid()) {\n                changedFields.push(name);\n            }\n        }\n        // console.log('changedFields:', changedFields);\n        this.model.discard(changedFields);\n\n        // refill changed fields\n        changedFields.forEach(name => {\n            this.fields[name].refill();\n        });\n\n        // ui\n        this.calcState();\n        this.state.mode = 'view';\n        this.rerender();\n\n        // event\n        this.parent.onFormDiscard(this);\n    }\n\n    onRefreshClick = async () => {\n        // console.log('RowFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n    }\n\n    isChanged() {\n        // console.log('RowFormController.isChanged', this.model.getFullName());\n        if (this.model.isChanged()) return true;\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row)) return true;\n        }\n        return false;\n    }\n\n    async onFieldChange(e) {\n        // console.log('RowFormController.onFieldChange', this.model.getFullName());\n        this.calcState();\n        this.invalidate();\n        await super.onFieldChange(e);\n    }\n\n    onEditClick = e => {\n        console.log('RowFormController.onEditClick');\n        this.state.mode = 'edit';\n        this.rerender();\n    }\n    onCancelClick = e => {\n        console.log('RowFormController.onCancelClick');\n        this.state.mode = 'view';\n        this.rerender();\n    }\n    getViewClass() {\n        // console.log('RowFormController.getViewClass', this.model.getFullName());\n        return super.getViewClass() || RowFormView;\n    }\n    getActiveRow(withChanges) {\n        return this.model.getRow(withChanges);\n    }\n    getMode() {\n        return this.state.mode;\n    }\n    isActionEnabled(name) {\n        return this.isViewMode();\n    }\n    isEditMode() {\n        return this.getMode() === 'edit';\n    }\n    isViewMode() {\n        return this.getMode() === 'view';\n    }\n}\nwindow.QForms.RowFormController = RowFormController;\n","class TableFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now()\n        };\n        this.grid = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || TableFormView;\n    }\n    init() {\n        super.init();\n        // this.parent.on('hide', this.onHidePage);\n        // this.parent.on('show', this.onShowPage);\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('update' , this.onModelUpdate);\n        this.model.on('delete' , this.onModelDelete);\n        this.model.on('insert' , this.onModelInsert);\n    }\n    deinit() {\n        // this.parent.off('hide', this.onHidePage);\n        // this.parent.off('show', this.onShowPage);\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('update' , this.onModelUpdate);\n        this.model.off('delete' , this.onModelDelete);\n        this.model.off('insert' , this.onModelInsert);\n        super.deinit();\n    }\n    onGridCreate = grid => {\n        this.grid = grid;\n    }\n    onNewClick = async e => {\n        console.log('TableFormController.onNewClick');\n        await this.new();\n    }\n    onRefreshClick = async e => {\n        console.log('TableFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n        // console.error('refresh error handler:', err.message);\n        // alert(err.message);\n    }\n    onDeleteClick = async e => {\n        console.log('TableFormController.onDeleteClick', this.model.getFullName(), this.grid.getActiveRowKey());\n        const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n        if (result) {\n            await this.model.getDefaultDataSource().delete(this.grid.getActiveRowKey());\n        }\n    }\n    onGridCellDblClick = async (row, key) => {\n        // console.log('TableFormController.onGridCellDblClick', row);\n        // const bodyCell = e.bodyCell;\n        // const row = bodyCell.bodyRow.dbRow;\n        // console.log('row:', row);\n        // const key = this.model.getDefaultDataSource().getRowKey(row);\n        // console.log('key:', key);\n        switch (this.model.getAttr('editMethod')) {\n            // case 'table':\n            //     this.grid.gridColumns[bodyCell.qFieldName].beginEdit(bodyCell);\n            // break;\n            case 'form':\n                if (this.getPage().getModel().getOptions().selectMode) {\n                    await this.getPage().selectRow(key);\n                } else {\n                    await this.edit(key);\n                }\n            break;\n        }\n    }\n    onGridLinkClick = async key => {\n        console.log('TableFormController.onGridLinkClick', key);\n        await this.edit(key);\n    }\n    onGridDeleteKeyDown = async (row, key) => {\n        console.log('TableFormController.onGridDeleteKeyDown', row, key);\n        if (this.getModel().getAttr('deleteRowMode') !== 'disabled') {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n            if (result) {\n                await this.model.getDefaultDataSource().delete(key);\n            }\n        }\n    }\n    /*onHidePage = async () => {\n        this.grid.saveScroll();\n    }*/\n    /*onShowPage = async () => {\n        console.log('TableFormController.onShowPage', this.model.getFullName());\n        if (!this.grid.isHidden()) {\n            this.grid.restoreScroll();\n            this.grid.focus();\n            // console.log('document.activeElement:', document.activeElement);\n        }\n    }*/\n    async new() {\n        if (this.model.getAttr('newRowMode') === 'oneclick') {\n            const row = {};\n            this.model.fillDefaultValues(row);\n            await this.model.getDefaultDataSource().insert(row);\n        } else if (this.model.getAttr('newRowMode') === 'editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemEditPage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemCreatePage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemCreatePage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        }\n    }\n    async edit(key) {\n        // console.log('TableForm.edit', this.model.getFullName(), key);\n        if (!this.model.getAttr('itemEditPage')) {\n            throw new Error(`${this.model.getFullName()}: itemEditPage is empty`);\n        }\n        try {\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } catch (err) {\n            // console.error(`${this.model.getFullName()}: edit form error handler:`, err);\n            // alert(`${this.model.getFullName()}: ${err.message}`);\n            err.message = `${this.model.getFullName()} edit: ${err.message}`;\n            throw err;\n        }\n    }\n    onModelRefresh = async e => {\n        console.log('TableFormController.onModelRefresh', this.model.getFullName(), e);\n        if (!this.view) return;\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelInsert = async e => {\n        console.log('TableFormController.onModelInsert', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid && e.source) {\n            for (const key of e.inserts) {\n                this.grid.setActiveRowKey(key);\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelUpdate = async e => {\n        console.log('TableFormController.onModelUpdate', this.model.getFullName(), e, this.view);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key in e.updates) {\n                if (this.grid.getActiveRowKey() === key) {\n                    const newKey = e.updates[key];\n                    if (key !== newKey) {\n                        this.grid.setActiveRowKey(newKey);\n                    }\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelDelete = async e => {\n        console.log('TableFormController.onModelDelete', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key of e.deletes) {\n                if (this.grid.getActiveRowKey() === key) {\n                    this.grid.setActiveRowKey(null);\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n\n    onGridSelectionChange = async key => {\n        // console.log('TableFormController.onGridSelectionChange', key);\n        this.invalidate();\n        await this.getPage().rerender();\n    }\n    getActiveRow() {\n        const key = this.grid.getActiveRowKey();\n        if (!key) throw new Error(`${this.model.getFullName()}: no active row key`);\n        return this.model.getDefaultDataSource().getRow(key);\n    }\n    isRowSelected = () => {\n        // console.log('TableFormController.isRowSelected');\n        return !!this.grid && !!this.grid.getActiveRowKey();\n    }\n    onFrameChanged = async value => {\n        // console.log('TableFormController.onFrameChanged', parseInt(value));\n        const frame = parseInt(value);\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n    onNextClick = async () => {\n        console.log('TableFormController.onNextClick');\n        const frame = this.model.getDefaultDataSource().getFrame() + 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n\n    onPreviousClick = async () => {\n        console.log('TableFormController.onPreviousClick');\n        const frame = this.model.getDefaultDataSource().getFrame() - 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        this.rerender();\n    }\n    canPrev() {\n        return this.model.getDefaultDataSource().getFrame() > 1;\n    }\n    canNext() {\n        const ds = this.model.getDefaultDataSource();\n        return ds.getFrame() < ds.getFramesCount();\n    }\n    getSelectedRowKey() {\n        return this.grid ? this.grid.getActiveRowKey() : null;\n    }\n    isActionEnabled(name) {\n        return this.isRowSelected();\n    }\n}\nwindow.QForms.TableFormController = TableFormController;\n","class PageController extends ModelController {\n    constructor(model, parent, id) {\n        //console.log('PageController.constructor', model);\n        super(model, parent);\n        if (!id) throw new Error('no id');\n        this.id = id;\n        this.forms = [];\n    }\n\n    static create(model, parent, id, options) {\n        // console.log('PageController.create', model.getName());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}PageController`);\n        const Class = CustomClass ? CustomClass : PageController;\n        return new Class(model, parent, id, options);\n    }\n\n    init() {\n        for (const form of this.model.forms) {\n            const ctrl = FormController.create(form, this);\n            ctrl.init();\n            this.forms.push(ctrl);\n        }\n    }\n\n    deinit() {\n        console.log('PageController.deinit: ' + this.model.getFullName());\n        for (const form of this.forms) {\n            form.deinit();\n        }\n        super.deinit();\n    }\n\n    onSaveAndCloseClick = async () => {\n        console.log('PageController.onSaveAndCloseClick');\n        this.validate();\n        if (this.isValid()) {\n            try {\n                this.getApp().getView().disableRerender();\n                await this.getModel().update();\n                console.log('page model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n            }\n            await this.getApp().closePage(this);\n            if (this.getModel().getOptions().onClose) {\n                this.getModel().getOptions().onClose();\n            }\n        } else {\n            await this.rerender();\n        }\n    }\n\n    onClosePageClick = async e => {\n        console.log('PageController.onClosePageClick', this.getModel().getFullName());\n        await this.close();\n    }\n\n    onOpenPageClick = async e => {\n        const name = this.getModel().getName();\n        const key = this.getModel().getKey();\n        const link = this.createOpenInNewLink(name, key);\n        // console.log('link', link);\n        window.open(link, '_blank');\n    }\n    createOpenInNewLink(name, key) {\n        return PageController.createLink({\n            page: name,\n            ...DataSource.keyToParams(key)\n        });\n    }\n    async close() {\n        // console.log('PageController.close', this.model.getFullName());\n        const changed = this.isChanged();\n        // console.log('changed:', changed);\n        // const valid = this.isValid();\n        // console.log('valid:', valid);\n        if (this.model.hasRowFormWithDefaultSqlDataSource() && changed) {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure})\n            if (!result) return;\n        }\n        await this.getApp().closePage(this);\n        if (this.getModel().getOptions().onClose) {\n            this.getModel().getOptions().onClose();\n        }\n    }\n    validate() {\n        for (const form of this.forms) {\n            if (form instanceof RowFormController) {\n                form.validate();\n            }\n        }\n    }\n    isValid() {\n        // console.log('PageController.isValid', this.model.getFullName());\n        for (const form of this.forms) {\n            if (!form.isValid()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async onFormChange(e) {\n        // console.log('PageController.onFormChange', this.model.getFullName());\n        this.rerender();\n    }\n    onFormDiscard(formController) {\n        console.log('PageController.onFormDiscard', this.model.getFullName());\n        this.rerender();\n    }\n\n    onFormUpdate(e) {\n        console.log('PageController.onFormUpdate:', this.model.getFullName(), e);\n        this.rerender();\n    }\n\n    onFormInsert(e) {\n        console.log('PageController.onFormInsert:', this.model.getFullName());\n        // console.log('hasNew:', this.model.hasNew());\n        for (const form of this.forms) {\n            form.invalidate();\n        }\n        this.rerender();\n    }\n\n    async openPage(options) {\n        if (!options.params) {\n            options.params = {};\n        }\n        const params =  this.getModel().getParams();\n        for (const name in params) {\n            if (!options.params[name]) {\n                options.params[name] = params[name];\n            }\n        }\n        return await this.getApp().openPage(options);\n    }\n\n    isChanged() {\n        // console.log('PageController.isChanged', this.model.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged()) {\n                // console.log(`FORM CHANGED: ${form.model.getFullName()}`);\n                return true;\n            }\n        }\n        return false;\n    }\n    getApp() {\n        return this.parent;\n    }\n    getViewClass() {\n        return super.getViewClass() || PageView;\n    }\n    static createLink(params = null) {\n        // const query = window.location.search.split('?')[1];\n        // console.log('query:', query);\n        if (params) {\n            return [\n                window.location.pathname,\n                [\n                    // ...(query ? query.split('&') : []),\n                    ...(ApplicationController.isDebugMode() ? ['debug=1'] : []),\n                    ...Object.keys(params).map(name => `${name}=${encodeURI(params[name])}`)\n                ].join('&')\n            ].join('?');\n        }\n        return window.location.pathname;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.model.getName() === name);\n    }\n    async onActionClick(name) {\n        console.log('PageController.onActionClick', name);\n    }\n    onKeyDown = async e => {\n        // console.log('PageController.onKeyDown', this.getModel().getFullName(), e);\n        if (e.key === 'Escape') {\n            if (this.isModal()) {\n                await this.close();\n            }\n        }\n    }\n    getTitle() {\n        const model = this.getModel();\n        const key = model.getKey();\n        let keyPart;\n        if (key) {\n            const arr = JSON.parse(key);\n            if (arr.length === 1 && typeof arr[0] === 'number') {\n                keyPart = `#${arr[0]}`;\n            } else {\n                keyPart = `${key}`;\n            }\n        }\n        return [\n            model.getCaption(),\n            ...(ApplicationController.isDebugMode() ? [`(${this.getId()})`] : []),\n            ...(keyPart ? [keyPart] : [])\n        ].join(' ');\n    }\n    getSelectedRowKey() {\n        for (const form of this.forms) {\n            const selectedRowKey = form.getSelectedRowKey();\n            if (selectedRowKey) return selectedRowKey;\n        }\n        return null;\n    }\n    onSelectClick = async e => {\n        console.log('PageController.onSelectClick');\n        await this.selectRow(this.getSelectedRowKey());\n    }\n    onResetClick = async e => {\n        console.log('PageController.onResetClick');\n        await this.selectRow(null);\n    }\n    async selectRow(key) {\n        console.log('PageController.selectRow', key);\n        await this.close();\n        await this.getModel().getOptions().onSelect(key);\n    }\n    invalidate() {\n        this.forms.forEach(form => form.invalidate());\n    }\n    getId() {\n        return this.id;\n    }\n    isModal() {\n        return this.getModel().isModal();\n    }\n    isAutoFocus() {\n        for (const form of this.forms) {\n            if (form.isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nwindow.QForms.PageController = PageController;\n","class Model extends EventEmitter {\n    constructor(data, parent) {\n        if (!data.name) throw new Error(`${data.class} no name`);\n        super();\n        this.data     = data;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.getFullName()}: model already deinited`);\n        this.deinited = true;\n    }\n    static getAttr(data, name) {\n        return data[name];\n    }\n    static getCol(data, name) {\n        return data[name];\n    }\n    static getName(data) {\n        return Model.getAttr(data, 'name');\n    }\n    static getClassName(data) {\n        return Model.getAttr(data, 'class');\n    }\n    isAttr(name) {\n        // return this.data[name] !== undefined;\n        return this.data.hasOwnProperty(name);\n    }\n    getAttr(name) {\n        return this.data[name];\n    }\n    getCol(name) {\n        return this.data[name];\n    }\n    getClassName() {\n        return this.getAttr('class');\n    }\n    getName() {\n        return this.getAttr('name');\n    }\n    getFullName() {\n        if (this.parent) {\n            return `${this.parent.getFullName()}.${this.getName()}`;\n        }\n        return this.getName();\n    }\n    getCaption() {\n        return this.getAttr('caption');\n    }\n    getDataSource(name) {\n        return this.dataSources.find(dataSource => dataSource.getName() === name);\n    }\n    createDataSources() {\n        for (const data of this.data.dataSources) {\n            try {\n                const Class = FrontHostApp.getClassByName(data.class);\n                const dataSource = new Class(data, this);\n                dataSource.init();\n                this.dataSources.push(dataSource);\n            } catch (err) {\n                err.message = `${this.getFullName()}.${data.name}: ${err.message}`;\n                throw err;\n            }\n        }\n    }\n    deinitDataSources() {\n        for (const dataSource of this.dataSources) {\n            dataSource.deinit();\n        }\n    }\n    hasActions() {\n        return this.data.actions.length > 0;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getData() {\n        return this.data;\n    }\n}\nwindow.QForms.Model = Model;\n","class Application extends Model {\n    constructor(data) {\n        super(data);\n        this.databases   = [];\n        this.dataSources = [];\n    }\n\n    init() {\n        // console.log('Application.init');\n        if (!this.data.theme) throw new Error('no theme attr');\n\n        // databases\n        for (const data of this.data.databases) {\n            const database = new Database(data, this);\n            database.init();\n            this.addDatabase(database);\n        }\n\n        // data sources\n        this.createDataSources();\n    }\n\n    deinit() {\n        this.deinitDataSources();\n        // TODO: add deinit on opened pages\n        super.deinit();\n    }\n\n    addDatabase(database) {\n        this.databases.push(database);\n    }\n\n    async logout() {\n        const data = await this.request({\n            'action': 'logout'\n        });\n        this.emit('logout', {source: this});\n    }\n\n    async request(options) {\n        // console.warn('Application.request', data);\n        const start = Date.now();\n        const [headers, body] = await FrontHostApp.doHttpRequest2(options);\n        if (!headers['qforms-platform-version']) throw new Error('no qforms-platform-version header');\n        if (!headers['qforms-app-version']) throw new Error('no qforms-app-version header');\n        this.emit('request', {\n            time: Date.now() - start,\n            remotePlatformVersion: headers['qforms-platform-version'],\n            remoteAppVersion: headers['qforms-app-version']\n        });\n        return body;\n    }\n\n    getDatabase(name) {\n        // console.log('Application.getDatabase', name);\n        const database = this.databases.find(database => database.getName() === name);\n        if (!database) throw new Error(`no database: ${name}`);\n        return database;\n    }\n\n    getText() {\n        return this.data.text;\n    }\n    getUser() {\n        return this.data.user;\n    }\n    getDomain() {\n        return this.data.domain;\n    }\n    getVirtualPath() {\n        return this.data.virtualPath;\n    }\n    async rpc(name, params) {\n        console.log('Application.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.request({\n            uuid  : this.getAttr('uuid'),\n            action: 'rpc',\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    emitResult(result, source = null) {\n        console.log('Application.emitResult', result, source);\n        const promises = [];\n        for (const database in result) {\n            promises.push(...this.getDatabase(database).emitResult(result[database], source));\n        }\n        // console.log('promises:', promises);\n        return Promise.allSettled(promises);\n    }\n    getNodeEnv() {\n        return this.data.nodeEnv;\n    }\n}\nwindow.QForms.Application = Application;\n","class Column  extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        if (!this.getAttr('type')) throw new Error(`column ${this.getFullName()}: no type`);\n        if (!['string', 'number', 'boolean', 'object', 'date'].includes(this.getAttr('type'))) {\n            throw new Error(`${this.getFullName()}: wrong column type: ${this.getAttr('type')}`);\n        }\n    }\n    init() {\n        // console.log('Column.init', this.getFullName());\n    }\n    getType() {\n        return this.getAttr('type');\n    }\n}\nwindow.QForms.Column = Column;\n","class DataSource extends Model {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.rows      = null;\n        this.rowsByKey = null;\t\t\t\t\t\t// for row search by key\n        this.news      = [];                        // new rows\n        this.changes   = new Map();\n    }\n\n    init() {\n        // console.log('DataSource.init', this.getFullName(), this.getClassName());\n        this.setRows(this.data.rows);\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.on('insert' , this.onTableInsert);\n            table.on('update' , this.onTableUpdate);\n            table.on('delete' , this.onTableDelete);\n            table.on('refresh', this.onTableRefresh);\n        }\n    }\n\n    deinit() {\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.off('insert' , this.onTableInsert);\n            table.off('update' , this.onTableUpdate);\n            table.off('delete' , this.onTableDelete);\n            table.off('refresh', this.onTableRefresh);\n        }\n        super.deinit();\n    }\n\n    setRows(rows) {\n        this.rows = rows;\n        this.fillRowsByKey();\n    }\n\n    addRow(row) {\n        this.rows.push(row);\n        const key = this.getRowKey(row);\n        this.rowsByKey[key] = row;\n    }\n\n    addRows(rows) {\n        for (let i = 0; i < rows.length; i++) {\n            this.rows.push(rows[i]);\n        }\n        this.fillRowsByKey();\n    }\n\n    getRowsLength() {\n        return this.rows.length;\n    }\n\n    fillRowsByKey() {\n        // console.log('DataSource.fillRowsByKey', this.getFullName())\n        this.rowsByKey = {};\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            const key = this.getRowKey(row);\n            this.rowsByKey[key] = row;\n        }\n        // console.log('this.rowsByKey:', this.getFullName(), this.rowsByKey);\n    }\n\n    // deinit() {\n    //     console.log('DataSource.deinit', this.getFullName());\n    //     super.deinit();\n    // }\n\n    getType(column) {\n        // console.log('DataSource.getType', this.getClassName(), column);\n        throw new Error('DataSource column type not implemented');\n    }\n\n    discardRowColumn(row, column) {\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            delete this.changes.get(row)[column];\n        }\n    }\n\n    changeRowColumn(row, column, newValue) {\n        if (!this.changes.has(row)) this.changes.set(row, {});\n        this.changes.get(row)[column] = newValue;\n    }\n\n    setValue(row, column, value) {\n        // console.log('DataSource.setValue', this.getFullName(), column, value, typeof value);\n        if (value === undefined) throw new Error(`${this.getFullName()}: undefined is wrong value for data source`);\n        if (typeof value === 'object' && value !== null) {\n            throw new Error(`setValue: ${this.getFullName()}.${column}: object must be in JSON format`);\n        }\n        if (row[column] !== value) {\n            this.changeRowColumn(row, column, value);\n            if (row[column] === undefined && value === null) {  // workaround for new rows\n                this.discardRowColumn(row, column);\n            }\n        } else {\n            this.discardRowColumn(row, column);\n        }\n        if (this.changes.has(row) && !Object.keys(this.changes.get(row)).length) this.changes.delete(row);\n        // console.log('changes:', this.changes);\n    }\n\n    isChanged() {\n        // console.log('DataSource.isChanged', this.getFullName(), this.changes.size);\n        return !!this.changes.size;\n    }\n\n    hasNew() {\n        return !!this.news.length;\n    }\n\n    isRowColumnChanged(row, column) {\n        // console.log('DataSource.isRowColumnChanged', this.getFullName());\n        return row[column] !== this.getValue(row, column);\n    }\n\n    getValue(row, column) {\n        // console.log('DataSource.getValue', column);\n        let value;\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            value = this.changes.get(row)[column];\n        } else {\n            value = row[column];\n        }\n        if (value !== undefined && typeof value !== 'string') {\n            throw new Error(`getValue: ${this.getFullName()}.${column}: object must be in JSON format, value: ${value}`);\n        }\n        // console.log('DataSource.getValue:', value);\n        return value;\n    }\n\n    getKeyValues(row) {\n        return this.data.keyColumns.reduce((key, column) => {\n            key[column] = JSON.parse(row[column]);\n            return key;\n        }, {});\n    }\n\n    getRowKey(row) {\n        // console.log('DataSource.getRowKey', row);\n        const arr = [];\n        for (const column of this.data.keyColumns) {\n            if (row[column] === undefined) return null;\n            if (row[column] === null) throw new Error('wrong value null for data source value');\n            try {\n                const value = JSON.parse(row[column]);\n                arr.push(value);\n            } catch (err) {\n                console.log('getRowKey: cannot parse: ', row[column]);\n                throw err;\n            }\n        }\n        return JSON.stringify(arr);\n    }\n\n    removeRow(key) {\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key} to remove`);\n        const i = this.rows.indexOf(row);\n        if (i === -1) throw new Error(`${this.getFullName()}: no row with i ${i} to remove`);\n        this.rows.splice(i, 1);\n        delete this.rowsByKey[key];\n    }\n\n    newRow(row) {\n        console.log('DataSource.newRow', this.getFullName(), row);\n        if (this.rows.length > 0) {\n            throw new Error('rows can be added to empty data sources only in new mode');\n        }\n        this.news.push(row);\n    }\n\n    getSingleRow(withChanges = false) {\n        if (this.news[0]) return this.news[0];\n        const row = this.rows[0];\n        if (!row) throw new Error('no single row');\n        if (withChanges) return this.getRowWithChanges(row);\n        return row;\n    }\n\n    getForm() {\n        return this.parent instanceof Form ? this.parent : null;\n    }\n\n    getPage() {\n        if (this.parent instanceof Page) return this.parent;\n        if (this.parent instanceof Form) return this.parent.getPage();\n        return null;\n    }\n\n    getApp() {\n        if (this.parent instanceof Application) return this.parent;\n        return this.parent.getApp();\n    }\n\n    /*getNamespace() {\n        if (this.parent instanceof Form) {\n            return this.parent.getPage().getName() + '.' + this.parent.getName() + '.' + this.getName();\n        }\n        if (this.parent instanceof Page) {\n            return this.parent.getName() + '.' + this.getName();\n        }\n        return this.getName();\n    }*/\n\n    getRow(key) {\n        return this.rowsByKey[key] || null;\n    }\n\n    /*getRowByKey(key) {\n        return this.rowsByKey[key] || null;\n    }*/\n\n    getRows() {\n        return this.rows;\n    }\n\n    getRowByIndex(i) {\n        return this.rows[i];\n    }\n\n    discard() {\n        console.log('DataSource.discard', this.getFullName());\n        if (!this.isChanged()) throw new Error(`no changes in data source ${this.getFullName()}`);\n        this.changes.clear();\n    }\n\n    static keyToParams(key, paramName = 'key') {\n        if (typeof key !== 'string') throw new Error('key not string');\n        const params = {};\n        const arr = JSON.parse(key);\n        if (arr.length === 1) {\n            params[paramName] = arr[0];\n        } else  if (arr.length > 1) {\n            for (let i = 0; i < arr.length; i++) {\n                params[`${paramName}${i + 1}`] = arr[i];\n            }\n        } else {\n            throw new Error(`invalid key: ${key}`);\n        }\n        return params;\n    }\n\n    getChangesByKey() {\n        const changes = {};\n        for (const row of this.changes.keys()) {\n            changes[this.getRowKey(row)] = this.changes.get(row);\n        }\n        return changes;\n    }\n\n    getRowWithChanges(row) {\n        if (this.changes.has(row)) {\n            return {...row, ...this.changes.get(row)};\n        }\n        return row;\n    }\n\n    hasNewRows() {\n        return this.news.length > 0;\n    }\n\n    static copyNewValues(row, newValues) {\n        for (const name in newValues) {\n            row[name] = newValues[name];\n        }\n    }\n\n    updateRow(key, newValues) {\n        console.log('DataSource.updateRow', this.getFullName(), key, newValues);\n        if (!key) throw new Error('no key');\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key}`);\n        const newKey = this.getRowKey(newValues);\n        DataSource.copyNewValues(row, newValues);// copy new values to original row object\n        if (key !== newKey) {\n            delete this.rowsByKey[key];\n            this.rowsByKey[newKey] = row;\n        }\n        // console.log(`key: ${key} to ${newKey}`);\n        // console.log('this.rowsByKey:', this.rowsByKey);\n        // console.log('this.data.rows:', this.data.rows);\n    }\n\n    getTable() {\n        if (!this.getAttr('table')) throw new Error(`${this.getFullName()}: table attr empty`);\n        return this.getDatabase().getTable(this.getAttr('table'));\n    }\n\n    getDatabase() {\n        // console.log('DataSource.getDatabase', this.getFullName(), this.getAttr('database'));\n        if (!this.getAttr('database')) throw new Error(`${this.getFullName()}: database attr empty`);\n        return this.getApp().getDatabase(this.getAttr('database'));\n    }\n\n    getType(columnName) {\n        // console.log('DataSource.getType', columnName);\n        const type = this.getTable().getColumn(columnName).getType();\n        // console.log('type:', type);\n        return type;\n    }\n\n    async insert() {\n        console.log('DataSource.insert', this.news);\n        if (!this.news.length) throw new Error('no new rows to insert');\n        const inserts = [];\n        for (const row of this.news) {\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            DataSource.copyNewValues(row, newValues);\n            // console.log('row:', row);\n            const key = this.getRowKey(row);\n            if (!key) throw new Error('invalid insert row, no key');\n            // console.log('key:', key);\n            inserts.push(key);\n        }\n        this.changes.clear();\n        for (const row of this.news) {\n            this.addRow(row);\n        }\n        this.news = [];\n        console.log('rows:', this.getRows());\n        console.log('inserts:', inserts);\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert({source: this, inserts});\n        }\n        this.emit('insert', {source: this, inserts});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {insert: inserts}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async delete(key) {\n        console.log('DataSource.delete', key);\n        if (!key) throw new Error('no key');\n        this.removeRow(key);\n\n        // events\n        const deletes = [key];\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete({source: this, deletes});\n        }\n        this.emit('delete', {source: this, deletes});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {delete: deletes}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async update() {\n        console.log('DataSource.update', this.getFullName());\n        if (this.news.length) {\n            await this.insert();\n            return;\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n        const changes = this.getChangesByKey();\n        // console.log('changes:', changes);\n\n        // apply changes to rows\n        const updates = {};\n        for (const key in changes) {\n            // console.log('key:', key);\n            const row = this.getRow(key);\n            // console.log('row:', row);\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            const newKey = this.getRowKey(newValues);\n            // console.log('newKey:', newKey);\n            this.updateRow(key, newValues);\n            updates[key] = newKey;\n        }\n        this.changes.clear();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate({source: this, updates});\n        }\n        this.emit('update', {source: this, updates});\n\n        const database = this.getAttr('database');\n        const table    = this.getAttr('table');\n        if (database && table) {\n            const reuslt = {[database]: {\n                    [table]: {\n                        update: updates\n                    }\n                }};\n            await this.getApp().emitResult(reuslt, this);\n            return reuslt;\n        }\n        return null;\n    }\n\n    onTableInsert = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableInsert', this.getFullName(), e);\n        if (!e.inserts.length) throw new Error(`${this.getFullName()}: no inserts`);\n\n        for (const key of e.inserts) {\n            if (this.getRow(key)) {\n                console.log('rows:', this.rows);\n                console.log('rowsByKey:', this.rowsByKey);\n                throw new Error(`${this.getFullName()}: row already in this data source: ${key}`);\n            }\n            const newValues = e.source.getRow(key);\n            const newRow = {};\n            DataSource.copyNewValues(newRow, newValues);\n            // console.log('newRow:', newRow);\n            this.addRow(newRow);\n        }\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableUpdate = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableUpdate', this.getFullName(), e);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n        for (const key in e.updates) {\n            if (this.getRow(key)) {\n                const newKey = e.updates[key];\n                const sourceRow = e.source.getRow(newKey);\n                this.updateRow(key, sourceRow);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableDelete = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableDelete', this.getFullName(), e);\n        if (!e.deletes.length) throw new Error(`${this.getFullName()}: no deletes`);\n        for (const key of e.deletes) {\n            if (this.getRow(key)) {\n                this.removeRow(key);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        throw new Error('DataSource.onTableRefresh: not implemented');\n    }\n\n    isSurrogate() {\n        return this.isAttr('database');\n    }\n\n}\nwindow.QForms.DataSource = DataSource;\n","class SqlDataSource extends DataSource {\n    constructor(data, parent) {\n        super(data, parent);\n        this.frame  = 1;\n        this.count  = data.count !== undefined ? data.count : null;\n        this.lastFrame = 1;\n    }\n\n    /*init() {\n        super.init();\n    }*/\n\n    /*deinit() {\n        super.deinit();\n    }*/\n\n    async insert(row) {\n        console.log('SqlDataSource.insert', row);\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to insert');\n\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: 'insert',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            row   : this.getRowWithChanges(row),\n        });\n\n        // key & values\n        const [key] = Object.keys(result[database][table].insertEx);\n        if (!key) throw new Error('no inserted row key');\n        const values = result[database][table].insertEx[key];\n        for (const column in values) {\n            row[column] = values[column];\n        }\n        // console.log('key:', key);\n        // console.log('row:', row);\n\n        // clear news & changes\n        this.news.splice(this.news.indexOf(row), 1);\n        // console.log('this.news:', this.news);\n        this.changes.clear();\n\n        // add new row to rows\n        this.addRow(row);\n\n        // events\n        const event = {source : this, inserts: result[database][table].insert};\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(event);\n        }\n        this.emit('insert', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    async update() {\n        console.log('SqlDataSource.update', this.getFullName());\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to update');\n        if (this.news[0]) {\n            return await this.insert(this.news[0]);\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n\n        // specific to SqlDataSource\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action : 'update',\n            page   : this.getForm().getPage().getName(),\n            form   : this.getForm().getName(),\n            changes: this.getChangesByKey(),\n        });\n\n\n        const [key] = Object.keys(result[database][table].updateEx);\n        if (!key) throw new Error('no updated row');\n        const newValues = result[database][table].updateEx[key];\n        // const newKey = this.getRowKey(newValues);\n\n        this.changes.clear();\n        this.updateRow(key, newValues);\n\n        // events\n        const event = {source: this, updates: result[database][table].update};\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(event);\n        }\n        this.emit('update', event);\n        await this.getApp().emitResult(result, this);\n        return result;\n    }\n\n    async delete(key) {\n        console.log('SqlDataSource.delete:', this.getFullName(), key);\n        if (!key) throw new Error('no key');\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (!table) {\n            throw new Error(`no table in SqlDataSource: ${this.getFullName()}`);\n        }\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: '_delete',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            params: {key},\n        });\n        await this.refill();\n\n        // events\n        const event = {source: this, deletes: result[database][table].delete};\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(event);\n        }\n        this.emit('delete', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    onTableUpdate = async e => {\n        console.log('SqlDataSource.onTableUpdate', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        // console.log('updates:', e.updates);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableInsert = async (e) => {\n        console.log('SqlDataSource.onTableInsert', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableInsert`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableDelete = async (e) => {\n        console.log('SqlDataSource.onTableDelete', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self delete', this.getFullName());\n            return;\n        }\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        console.log('SqlDataSource.onTableRefresh', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source) throw new Error('refresh is foreign result so source must be null');\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('refresh', e);\n    }\n\n    getPageParams() {\n        const page = this.getPage();\n        return page ? page.getParams() : {};\n    }\n\n    async refresh() {\n        console.log('SqlDataSource.refresh', this.getFullName());\n        await this.refill();\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh({source: this});\n        }\n    }\n\n    async refill() {\n        if (this.isChanged()) throw new Error(`cannot refill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame : this.frame} : {});\n        this.count = data.count;\n        this.setRows(data.rows);\n        this.lastFrame = 1;\n    }\n\n    async fill(frame) {\n        if (this.isChanged()) throw new Error(`cannot fill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame} : {});\n        this.count = data.count;\n        this.addRows(data.rows);\n    }\n\n    async more() {\n        if (!this.hasMore()) throw new Error(`${this.getFullName()}: no more rows`);\n        this.lastFrame++;\n        await this.fill(this.lastFrame);\n    }\n\n    async select(params = {}) {\n        console.log('SqlDataSource.select', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action        : 'select',\n            page          : page ? page.getName()           : null,\n            form          : form ? form.getName()           : null,\n            ds            : this.getName(),\n            params        : {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!(data.rows instanceof Array)) throw new Error('rows must be array');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }\n\n    /*async selectSingle(params = {}) {\n        console.log('SqlDataSource.selectSingle', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action: 'selectSingle',\n            page  : page ? page.getName()           : null,\n            form  : form ? form.getName()           : null,\n            ds    : this.getName(),\n            params: {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!data.row) throw new Error('selectSingle must return row');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }*/\n\n    getFramesCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        if (this.count === 0) return 1;\n        if (this.getLimit()) return Math.ceil(this.count / this.getLimit());\n        return 1;\n    }\n    getLimit() {\n        if (this.getAttr('limit')) return parseInt(this.getAttr('limit'));\n        return null;\n    }\n    getCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        return this.count;\n    }\n    getFrame() {\n        return this.frame;\n    }\n    getLastFrame() {\n        return this.lastFrame;\n    }\n    setFrame(frame) {\n        this.frame = frame;\n    }\n    hasMore() {\n        return this.lastFrame < this.getFramesCount();\n    }\n}\nwindow.QForms.SqlDataSource = SqlDataSource;\n","class Database extends Model {\n    constructor(...args) {\n        super(...args);\n        this.tables = [];\n    }\n\n    init() {\n        // console.log('Database.init', this.getName());\n        for (const data of this.data.tables) {\n            const table = new Table(data, this);\n            table.init();\n            this.addTable(table);\n        }\n    }\n\n    addTable(table) {\n        this.tables.push(table);\n    }\n\n    getTable(name) {\n        const table = this.tables.find(table => table.getName() === name);\n        if (!table) throw new Error(`${this.getFullName()}: no table with name: ${name}`);\n        return table;\n    }\n\n    emitResult(result, source = null) {\n        console.log('Database.emitResult');\n        const promises = [];\n        for (const table in result) {\n            promises.push(...this.getTable(table).emitResult(result[table], source));\n        }\n        return promises;\n    }\n}\nwindow.QForms.Database = Database;\n","class Field extends Model {\n    // constructor(data, parent) {\n    //     super(data, parent);\n    // }\n\n    init() {\n    }\n\n    replaceThis(value) {\n        return value.replace(/\\{([@\\w\\.]+)\\}/g, (text, name) => {\n            if (name.indexOf('.') === -1) return text;\n            let arr = name.split('.');\n            if (arr[0] === 'this') arr[0] = this.getPage().getName();\n            return `{${arr.join('.')}}`;\n        });\n    }\n\n    fillDefaultValue(row) {\n        // console.log('Field.fillDefaultValue', this.getFullName());\n        const column = this.getAttr('column');\n        if (!column) return;\n        const defaultValue = this.replaceThis(this.getAttr('defaultValue'));\n        const js = Helper.templateToJsString(defaultValue, this.getPage().getParams());\n        if (typeof js !== 'string') throw new Error(`${this.getFullName()}: defaultValue must be templated to js string`);\n        // console.log('js', this.getFullName(), js);\n        try {\n            const value = eval(js);\n            if (value !== undefined) {\n                row[column] = this.valueToRaw(value);\n            }\n        } catch (err) {\n            throw new Error(`[${this.getFullName()}] fillDefaultValue: ${err.toString()}`);\n        }\n    }\n\n    valueToPageParams(row) {\n        // console.log('Field.valueToPageParams', this.getFullName());\n        if (this.isParam()) {\n            this.getPage().addParam(this.getFullName(), this.getValue(row));\n        }\n    }\n\n    isChanged(row) {\n        // console.log('Field.isChanged', this.getFullName());\n        if (!this.getAttr('column')) throw new Error(`${this.getFullName()}: field has no column`);\n        return this.getDefaultDataSource().isRowColumnChanged(row, this.getAttr('column'));\n    }\n\n    hasColumn() {\n        return !!this.getAttr('column');\n    }\n\n    getValue(row) {\n        // console.log('Field.getValue', this.getFullName());\n        if (!row && this.parent instanceof RowForm) {\n            row = this.parent.getRow();\n        }\n        if (!row) {\n            console.log(`${this.getFullName()}: need row`);\n        }\n        let rawValue;\n        if (this.getAttr('column')) {\n            rawValue = this.getRawValue(row);\n        } else if (this.getAttr('value')) {\n            const js = this.getAttr('value');\n            try {\n                rawValue = eval(js);\n            } catch (err) {\n                throw new Error(`${this.getFullName()}: value eval error: ${err.message}`);\n            }\n        } else {\n            throw new Error(`${this.getFullName()}: no column and no value in field`);\n        }\n\n        // use rawValue\n        if (rawValue === undefined) return undefined;\n        if (rawValue === null) throw new Error(`[${this.getFullName()}]: null is wrong raw value`);\n        try {\n            return this.rawToValue(rawValue);\n        } catch (err) {\n            console.log('raw value decode error:', this.getFullName(), rawValue);\n            throw err;\n        }\n    }\n\n    setValue(row, value) {\n        // console.log('Field.setValue', this.getFullName(), value);\n        if (!this.getAttr('column')) throw new Error(`field has no column: ${this.getFullName()}`);\n        const rawValue = this.valueToRaw(value);\n        this.getForm().getDefaultDataSource().setValue(row, this.getAttr('column'), rawValue);\n        this.valueToPageParams(row);\n    }\n\n    rawToValue(rawValue) {\n        return Helper.decodeValue(rawValue);\n    }\n\n    valueToRaw(value) {\n        return Helper.encodeValue(value);\n    }\n\n    getRawValue(row) {\n        if (!this.hasColumn()) throw new Error(`${this.getFullName()}: no column`);\n        return this.getForm().getDefaultDataSource().getValue(row, this.getAttr('column'));\n    }\n\n    getDefaultDataSource() {\n        return this.getForm().getDefaultDataSource();\n    }\n\n    getType() {\n        if (this.getAttr('type')) {\n            return this.getAttr('type');\n        }\n        if (this.getAttr('column')) {\n            const dataSource = this.getDefaultDataSource();\n            if (dataSource.isSurrogate()) {\n                return dataSource.getType(this.getAttr('column'));\n            }\n            throw new Error('field type empty');\n        }\n        throw new Error('field type and column empty');\n    }\n\n    getForm() {\n        return this.parent;\n    }\n\n    getPage() {\n        return this.parent.parent;\n    }\n\n    getApp() {\n        return this.parent.parent.parent;\n    }\n\n    isReadOnly() {\n        return this.data.readOnly === 'true';\n    }\n    isNotNull() {\n        return this.data.notNull === 'true';\n    }\n    isNullable() {\n        return this.data.notNull === 'false';\n    }\n    getWidth() {\n        const width = parseInt(this.data.width);\n        if (isNaN(width)) return null;\n        if (width === 0) return 100;\n        return width;\n    }\n    getFullName() {\n        return `${this.getPage().getName()}.${this.getForm().getName()}.${this.getName()}`;\n    }\n    isParam() {\n        return this.data.param === 'true';\n    }\n    validateOnChange() {\n        if (this.data.validateOnChange !== undefined) {\n            return this.data.validateOnChange === 'true';\n        }\n        return true;\n    }\n    validateOnBlur() {\n        if (this.data.validateOnBlur !== undefined) {\n            return this.data.validateOnBlur === 'true';\n        }\n        return false;\n    }\n    getCaption() {\n        const caption = this.getAttr('caption');\n        if (caption === '') {\n            const columnName = this.getAttr('column');\n            if (columnName && this.parent.hasDefaultSqlDataSource()) {\n                const ds = this.parent.getDataSource('default');\n                if (ds.getAttr('table')) {\n                    const column = ds.getTable().getColumn(columnName);\n                    return column.getCaption();\n                }\n            }\n        }\n        return caption;\n    }\n}\nwindow.QForms.Field = Field;\n","class CheckBoxField extends Field {\n\n}\nwindow.QForms.CheckBoxField = CheckBoxField;\n","class ComboBoxField extends Field {\n\n    getDisplayValue(row) {\n        let value = null;\n        if (row[this.data.displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[this.data.displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[this.data.displayColumn]);\n                throw err;\n            }\n        } else {\n            value = this.data.displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        if (!row[this.data.valueColumn]) {\n            throw new Error('no valueColumn in ComboBox data source');\n        }\n        return Helper.decodeValue(row[this.data.valueColumn]);\n    }\n\n    getComboBoxDataSource() {\n        const name = this.data.dataSourceName;\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        }\n        if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        }\n        if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        throw new Error(`${this.getFullName()}: no data source: ${name}`);\n    }\n\n    findRowByRawValue(rawValue) {\n        return this.getComboBoxDataSource().getRows().find(row => row[this.data.valueColumn] === rawValue);\n    }\n}\nwindow.QForms.ComboBoxField = ComboBoxField;\n","class DateField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n\n    rawToValue(raw) {\n        // console.log('DateField.rawToValue', this.getFullName(), raw);\n        const value = Helper.decodeValue(raw);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addMinutes(value, value.getTimezoneOffset());\n        }\n        // console.log('DateField.rawToValue:', raw, value);\n        return value;\n    }\n\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = new Date(value.getTime());\n            Helper.addMinutes(v, -v.getTimezoneOffset());\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateField = DateField;\n","class DateTimeField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n    rawToValue(rawValue) {\n        const value = Helper.decodeValue(rawValue);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addMinutes(value, value.getTimezoneOffset());\n        }\n        // console.log('DateTimeField.rawToValue:', value);\n        return value;\n    }\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = new Date(value.getTime());\n            Helper.addMinutes(v, -v.getTimezoneOffset());\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateTimeField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateTimeField = DateTimeField;\n","class FileField extends Field {\n}\nwindow.QForms.FileField = FileField;\n","class ImageField extends Field {\n}\nwindow.QForms.ImageField = ImageField;\n","class LabelField extends Field {\n}\nwindow.QForms.LabelField = LabelField;\n","class LinkField extends Field {\n}\nwindow.QForms.LinkField = LinkField;\n","class PasswordField extends Field {\n\n}\nwindow.QForms.PasswordField = PasswordField;\n","class PhoneField extends Field {\n}\nwindow.QForms.PhoneField = PhoneField;\n","class TextAreaField extends Field {\n    getRows() {\n        return this.data.rows;\n    }\n    getCols() {\n        return this.data.cols;\n    }\n}\nwindow.QForms.TextAreaField = TextAreaField;\n","class TextBoxField extends Field {\n\n}\nwindow.QForms.TextBoxField = TextBoxField;\n","class TimeField extends Field {\n\n}\nwindow.QForms.TimeField = TimeField;\n","class Form extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.dataSources = [];\n        this.fields      = [];\n    }\n\n    init() {\n        // data sources\n        this.createDataSources();\n\n        // fields\n        for (const data of this.data.fields) {\n            const Class = FrontHostApp.getClassByName(data.class);\n            const field = new Class(data, this);\n            field.init();\n            this.fields.push(field);\n        }\n    }\n\n    deinit() {\n        // console.log('Form.deinit:', this.getFullName());\n        this.deinitDataSources();\n        for (const field of this.fields) {\n            field.deinit();\n        }\n        super.deinit();\n    }\n\n    fillDefaultValues(row) {\n        for (const field of this.fields) {\n            field.fillDefaultValue(row);\n        }\n    }\n\n    onDataSourceRefresh(e) {\n        // console.log('Form.onDataSourceRefresh', this.getFullName());\n        this.emit('refresh', e);\n    }\n\n    onDataSourceInsert(e) {\n        // console.log('Form.onDataSourceInsert', this.getFullName());\n        this.parent.onFormInsert(e);\n        this.emit('insert', e);\n    }\n\n    onDataSourceUpdate(e) {\n        // console.log('Form.onDataSourceUpdate', this.getFullName());\n        this.emit('update', e);\n    }\n\n    onDataSourceDelete(e) {\n        // console.log('Form.onDataSourceDelete', this.getFullName());\n        this.emit('delete', e);\n    }\n\n    async update() {\n        console.log('Form.update', this.getFullName(), this.isChanged());\n        if (this.getPage().deinited) throw new Error('page already deinited');\n        if (!this.isChanged() && !this.getDefaultDataSource().hasNewRows()) throw new Error(`form model not changed or does not have new rows: ${this.getFullName()}`);\n        await this.getDefaultDataSource().update();\n    }\n\n    isChanged() {\n        // console.log('Form.isChanged', this.getFullName());\n        return this.getDefaultDataSource().isChanged();\n    }\n\n    hasNew() {\n        // console.log('Form.hasNew', this.getFullName());\n        return this.getDefaultDataSource().hasNew();\n    }\n\n    async rpc(name, params) {\n        console.log('Form.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getPage().getName(),\n            form  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n\n    getKey() {\n        return null;\n    }\n\n    getDefaultDataSource() {\n        const dataSource = this.getDataSource('default');\n        if (!dataSource) throw new Error(`${this.getFullName()}: no default data source`);\n        return dataSource;\n    }\n\n    getPage() {\n        return this.parent;\n    }\n\n    getApp() {\n        return this.parent.parent;\n    }\n    async refresh() {\n        await this.getDefaultDataSource().refresh();\n    }\n    getField(name) {\n        return this.fields.find(field => field.getName() === name);\n    }\n    hasDefaultSqlDataSource() {\n        return this.getDefaultDataSource().getClassName() === 'SqlDataSource';\n    }\n    decodeRow(row) {\n        const values = {};\n        for (const field of this.fields) {\n            const column = field.getAttr('column');\n            if (column) {\n                values[column] = field.getValue(row);\n            }\n        }\n        return values;\n    }\n}\nwindow.QForms.Form = Form;\n","class RowForm extends Form {\n    init() {\n        super.init();\n        if (this.isNewMode()) {\n            this.getDefaultDataSource().newRow(this.createRow());\n        }\n        this.fillParams(this.getRow()); // dump row values to page params\n    }\n\n    isNewMode() {\n        const newMode = this.getAttr('newMode');\n        if (newMode ===  'true') return  true;\n        if (newMode === 'false') return false;\n        return this.getPage().isNewMode();\n    }\n\n    fillParams(row) {\n        for (const field of this.fields) {\n            field.valueToPageParams(row);\n        }\n    }\n\n    onDataSourceUpdate(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceUpdate(e);\n    }\n\n    onDataSourceInsert(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceInsert(e);\n    }\n\n    getRow(withChanges) {\n        return this.getDefaultDataSource().getSingleRow(withChanges);\n    }\n\n    getKey() {\n        // console.log('RowForm.getKey', this.getFullName());\n        const dataSource = this.getDefaultDataSource();\n        if (dataSource.getClassName() === 'SqlDataSource') {\n            const row = this.getRow();\n            return dataSource.getRowKey(row);\n        }\n        return null;\n    }\n\n    createRow() {\n        const row = {};\n        this.fillDefaultValues(row);\n        return row;\n    }\n\n    discard(fields) {\n        console.log('RowForm.discard', fields);\n        if (this.getDefaultDataSource().isChanged()) {\n            this.getDefaultDataSource().discard();\n            fields.forEach(name => {\n                this.getField(name).valueToPageParams(this.getRow())\n            });\n        }\n    }\n\n}\nwindow.QForms.RowForm = RowForm;\n","class TableForm extends Form {\n\n}\nwindow.QForms.TableForm = TableForm;\n","class Page extends Model {\n    constructor(data, parent, options) {\n        // console.log('Page.constructor', options);\n        // if (!options.id) throw new Error('no page id');\n        super(data, parent);\n        this.options     = options; // {id, modal, newMode, selectMode, params}\n        this.dataSources = [];\n        this.forms       = [];\n        this.params      = {};\n        if (options.onCreate) {\n            options.onCreate(this);\n        }\n    }\n\n    init() {\n        this.createDataSources();\n        this.createForms();\n        console.log('page options:', this.options);\n        console.log('page params:', this.getParams());\n    }\n\n    deinit() {\n        // console.log('Page.deinit', this.getFullName());\n        if (this.deinited) throw new Error(`page ${this.getFullName()} is already deinited`);\n        this.deinitDataSources();\n        this.deinitForms();\n        super.deinit();\n    }\n\n    getOptions() {\n        return this.options;\n    }\n\n    createForms() {\n        // forms\n        for (const data of this.data.forms) {\n            const FormClass = FrontHostApp.getClassByName(Model.getClassName(data));\n            const form = new FormClass(data, this);\n            form.init();\n            this.forms.push(form);\n        }\n    }\n\n    deinitForms() {\n        for (const form of this.forms) {\n            form.deinit();\n        }\n    }\n\n    /*getId() {\n        return this.options.id;\n    }*/\n\n    getParams() {\n        return {\n            ...(this.options.params || {}),\n            ...this.params,\n        };\n    }\n\n    addParam(name, value) {\n        // console.log('Page.addParam', name);\n        this.params[name] = value !== undefined ? value : null;\n    }\n\n    async update() {\n        console.log('Page.update', this.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged() || form.hasNew()) {\n                await form.update();\n            }\n        }\n    }\n\n    discard() {\n        console.log('Page.discard', this.getFullName());\n        for (const form of this.forms) {\n            form.discard();\n        }\n    }\n\n    getKey() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') {\n                return form.getKey();\n            }\n        }\n        return null;\n    }\n\n    hasRowFormWithDefaultDs() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.getDefaultDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowFormWithDefaultSqlDataSource() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.hasDefaultSqlDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') return true;\n        }\n        return false;\n    }\n\n    hasTableForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'TableForm') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isNewMode() {\n        return !!this.options.newMode;\n    }\n\n    hasNew() {\n        for (const form of this.forms) {\n            if (form.hasNew()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getApp() {\n        return this.parent;\n    }\n\n    isModal() {\n        return !!this.options.modal;\n    }\n\n    onFormInsert(e) {\n        console.log('Page.onFormInsert', e);\n        for (const key of e.inserts) {\n            const keyParams = DataSource.keyToParams(key);// key params to page params\n            for (const name in keyParams) {\n                this.addParam(name, keyParams[name]);\n            }\n        }\n    }\n    async rpc(name, params) {\n        // console.log('Page.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result =  await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.getName() === name);\n    }\n}\nwindow.QForms.Page = Page;\n","class Table extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.columns = [];\n    }\n    init() {\n        // console.log('Table.init', this.getFullName());\n        for (const data of this.data.columns) {\n            const column = new Column(data, this);\n            column.init();\n            this.addColumn(column);\n        }\n    }\n    addColumn(column) {\n        this.columns.push(column);\n    }\n    getColumn(name) {\n        const column = this.columns.find(column => column.getName() === name);\n        if (!column) throw new Error(`table ${this.getFullName()}: no column ${name}`);\n        return column;\n    }\n    emitResult(result, source = null) {\n        console.log('Table.emitResult');\n        return [\n            ...(result.insert  ? [this.emitInsert(source, result.insert)] : []),\n            ...(result.update  ? [this.emitUpdate(source, result.update)] : []),\n            ...(result.delete  ? [this.emitDelete(source, result.delete)] : []),\n            ...(result.refresh ? [this.emitRefresh(source              )] : [])\n        ];\n    }\n    emitInsert(source, inserts) {\n        return this.emit('insert', {source, inserts});\n    }\n    emitUpdate(source, updates) {\n        return this.emit('update', {source, updates});\n    }\n    emitDelete(source, deletes) {\n        return this.emit('delete', {source, deletes});\n    }\n    emitRefresh(source) {\n        return this.emit('refresh', {source});\n    }\n}\nwindow.QForms.Table = Table;\n"]}