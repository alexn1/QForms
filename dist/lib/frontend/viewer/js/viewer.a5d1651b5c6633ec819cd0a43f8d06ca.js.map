{"version":3,"sources":["EventEmitter.js","LoginFrontHostApp.js","ViewerFrontHostApp.js","WebSocketClient.js","Controller/Controller.js","Controller/AlertController/AlertController.js","Controller/ConfirmController/ConfirmController.js","Controller/LoginController/LoginController.js","Controller/ModalController/ModalController.js","Controller/ModalController/ImageDialogController/ImageDialogController.js","Controller/ModelController/ModelController.js","Controller/ModelController/ApplicationController/ApplicationController.js","Controller/ModelController/FieldController/FieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxFieldController/RowFormCheckBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxListFieldController/RowFormCheckBoxListFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormComboBoxFieldController/RowFormComboBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateFieldController/RowFormDateFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateTimeFieldController/RowFormDateTimeFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormFileFieldController/RowFormFileFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormImageFieldController/RowFormImageFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormLinkFieldController/RowFormLinkFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPasswordFieldController/RowFormPasswordFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormPhoneFieldController/RowFormPhoneFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormRadioFieldController/RowFormRadioFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextAreaFieldController/RowFormTextAreaFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextBoxFieldController/RowFormTextBoxFieldController.js","Controller/ModelController/FieldController/RowFormFieldController/RowFormTimeFieldController/RowFormTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormCheckBoxFieldController/TableFormCheckBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormComboBoxFieldController/TableFormComboBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateFieldController/TableFormDateFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateTimeFieldController/TableFormDateTimeFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormLinkFieldController/TableFormLinkFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormPhoneFieldController/TableFormPhoneFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextAreaFieldController/TableFormTextAreaFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextBoxFieldController/TableFormTextBoxFieldController.js","Controller/ModelController/FieldController/TableFormFieldController/TableFormTimeFieldController/TableFormTimeFieldController.js","Controller/ModelController/FormController/FormController.js","Controller/ModelController/FormController/RowFormController/RowFormController.js","Controller/ModelController/FormController/TableFormController/TableFormController.js","Controller/ModelController/PageController/PageController.js","Model/Model.js","Model/Application/Application.js","Model/Column/Column.js","Model/DataSource/DataSource.js","Model/DataSource/SqlDataSource/SqlDataSource.js","Model/Database/Database.js","Model/Field/Field.js","Model/Field/CheckBoxField/CheckBoxField.js","Model/Field/CheckBoxListField/CheckBoxListField.js","Model/Field/ComboBoxField/ComboBoxField.js","Model/Field/DateField/DateField.js","Model/Field/DateTimeField/DateTimeField.js","Model/Field/FileField/FileField.js","Model/Field/ImageField/ImageField.js","Model/Field/LabelField/LabelField.js","Model/Field/LinkField/LinkField.js","Model/Field/PasswordField/PasswordField.js","Model/Field/PhoneField/PhoneField.js","Model/Field/RadioField/RadioField.js","Model/Field/TextAreaField/TextAreaField.js","Model/Field/TextBoxField/TextBoxField.js","Model/Field/TimeField/TimeField.js","Model/Form/Form.js","Model/Form/RowForm/RowForm.js","Model/Form/TableForm/TableForm.js","Model/Page/Page.js","Model/Table/Table.js"],"names":["EventEmitter","constructor","this","list","on","name","cb","push","off","i","indexOf","Error","splice","emit","e","length","result","Promise","allSettled","map","status","reason","LoginFrontHostApp","FrontHostApp","data","console","log","super","run","loginController","LoginController","create","rootElement","document","querySelector","getViewClassCssBlockName","Helper","createReactComponent","getViewClass","ctrl","getText","text","getData","ViewerFrontHostApp","options","applicationController","application","Application","init","ApplicationController","rootElementName","createView","connect","err","logError","onWindowPopState","error","values","type","source","message","stack","href","window","location","platformVersion","versions","platform","appVersion","app","logErrorUrl","fetch","method","headers","Content-Type","body","JSON","stringify","catch","alert","resolve","reject","root","childElementCount","alertCtrl","AlertController","onClose","ReactDOM","unmountComponentAtNode","confirm","ConfirmController","QForms","WebSocketClient","protocol","url","host","createUriParamsString","webSocket","refreshTimeoutId","RECONNECT_TIMEOUT","REFRESH_TIMEOUT","params","route","uuid","userId","version","getApp","getModel","Object","keys","key","encodeURIComponent","join","WebSocket","onclose","code","onopen","bind","onmessage","onMessage","startRefreshTimeout","onRefreshTimeout","send","setTimeout","resetRefreshTimeout","clearTimeout","reconnect","async","getHostApp","getDomain","getName","parse","packet","getView","disableRerender","emitResult","enableRerender","rerender","Controller","view","onViewCreate","createElement","React","onCreate","AlertView","close","onOkButtonClick","onCloseClick","onKeyDown","ConfirmView","onYesClick","frontHostApp","CustomClass","getClassByName","Class","LoginView","getFrontHostApp","ModalController","id","getId","closeModal","ImageDialogController","src","ImageDialogView","getSrc","onImageClick","ModelController","model","parent","deinited","deinit","getFullName","getParent","getTitle","getCaption","isAttr","viewClassName","getAttr","eval","lastId","activePage","modals","statusbar","homePageName","webSocketClient","isDebugMode","Search","getObj","onRequest","pageData","pages","createPage","modal","getGlobalParams","title","documentElement","classList","add","inIframe","activePageName","getActivePageName","ApplicationView","setLastQueryTime","time","remoteAppVersion","createVersionNotificationIfNotExists","div","innerHTML","versionNotification","className","getCssBlockName","append","undefined","pageModel","Page","pc","PageController","getNextId","openPage","pageController","findPageControllerByPageNameAndKey","onPageSelect","request","action","page","newMode","activeElement","focus","isModal","addModal","addPage","removeModal","getNewId","closePage","pageName","getKey","onActionClick","getMenuItemsProp","menu","items","item","caption","getUser","login","onStatusbarCreate","onLogout","getRootPath","onMenuItemClick","history","pushState","createLink","state","invalidate","filter","forEach","yesButton","yes","noButton","no","openModal","nodeEnv","user","rpc","FieldController","getPage","form","getForm","generalClassName","getClassName","GeneralClass","valueToString","value","Date","toISOString","toString","stringToValue","stringValue","fieldType","getType","trim","date","invalidDate","num","Number","isNaN","notNumber","getViewStyle","row","isVisible","isAutoFocus","getAutocomplete","getFormat","RowFormFieldController","parseError","changed","getRow","getValue","setValue","refill","resetErrors","refreshChangedState","copyValueToModel","putValue","widgetValue","onChange","fireEvent","setValueFromWidget","isValidateOnChange","validate","isValid","onFieldChange","onBlur","isEditable","isValidateOnBlur","getValueForWidget","isChanged","getError","calcChangedState","getPlaceholder","getWidget","isNotNull","getNullErrorText","required","getMode","isReadOnly","isParseError","getErrorMessage","hasColumn","fieldRawValue","valueToRaw","dsRawValue","getRawValue","let","original","modified","getDefaultDataSource","getRowWithChanges","substr","setError","renderView","validateOnChange","validateOnBlur","onChangePure","RowFormCheckBoxFieldController","RowFormCheckBoxFieldView","RowFormCheckBoxListFieldController","dataSource","getDataSource","onListInsert","onListUpdate","onListDelete","RowFormCheckBoxListFieldView","getRows","getItemFromRow","getValueValue","getDisplayValue","RowFormComboBoxFieldController","getComboBoxDataSource","RowFormComboBoxFieldView","getItems","onEditButtonClick","itemEditPage","onCreateButtonClick","newRowMode","itemCreateForm","createPageName","onInsert","inserts","decodeValue","onItemSelect","button","preventDefault","selectedKey","selectMode","onSelect","RowFormDateFieldController","RowFormDateFieldView","RowFormDateTimeFieldController","args","widget2","defaultValue","parseError2","error2","RowFormDateTimeFieldView","getValueForTime","getHours","getMinutes","h","m","resetErrors2","TimeBox","splitTime","setHours","onView2Create","onChange2","isValidateOnChange2","setValueFromView2","validate2","onBlur2","getPlaceholder2","getStringValue","getDefaultValue","setDefaultValue2","getIntegerValue","setValue2","getTimeErrorText","field","timeNotValid","getError2","isParseError2","setError2","getErrorMessage2","isValid2","isValidateOnBlur2","RowFormFileFieldController","RowFormFileFieldView","RowFormImageFieldController","RowFormImageFieldView","RowFormLinkFieldController","RowFormLinkFieldView","onClick","RowFormPasswordFieldController","RowFormPasswordFieldView","RowFormPhoneFieldController","RowFormPhoneFieldView","getPhoneFormatErrorText","phoneNumberFormatError","RowFormRadioFieldController","RowFormRadioFieldView","RowFormTextAreaFieldController","RowFormTextAreaFieldView","RowFormTextBoxFieldController","RowFormTextBoxFieldView","RowFormTimeFieldController","RowFormTimeFieldView","TableFormFieldController","TableFormCheckBoxFieldController","TableFormCheckBoxFieldView","TableFormComboBoxFieldController","TableFormComboBoxFieldView","rawValue","cbRow","findRowByRawValue","TableFormDateFieldController","TableFormDateFieldView","formatDate","TableFormDateTimeFieldController","TableFormDateTimeFieldView","TableFormLinkFieldController","TableFormLinkFieldView","TableFormPhoneFieldController","TableFormPhoneFieldView","TableFormTextAreaFieldController","TableFormTextAreaFieldView","TableFormTextBoxFieldController","TableFormTextBoxFieldView","TableFormTimeFieldController","TableFormTimeFieldView","FormController","customClassName","fields","onFormChange","getUpdated","updated","now","getField","getSelectedRowKey","RowFormController","mode","hasNew","valid","onModelRefresh","onModelInsert","onModelUpdate","calcState","onFormInsert","onFormUpdate","clearFieldsError","onSaveClick","update","onDiscardClick","changedFields","discard","hasDefaultSqlDataSource","onFormDiscard","onRefreshClick","refresh","onEditClick","onCancelClick","RowFormView","getActiveRow","withChanges","isActionEnabled","isViewMode","isEditMode","TableFormController","grid","TableFormView","onModelDelete","onGridCreate","onNewClick","new","onDeleteClick","getActiveRowKey","areYouSure","delete","onGridCellDblClick","isSelectMode","selectRow","edit","onGridLinkClick","onGridDeleteKeyDown","fillDefaultValues","insert","database","table","DataSource","keyToParams","setActiveRowKey","updates","newKey","deletes","onGridSelectionChange","isRowSelected","onFrameChanged","frame","parseInt","setFrame","onNextClick","getFrame","onPreviousClick","canPrev","canNext","ds","getFramesCount","forms","onSaveAndCloseClick","getOptions","onClosePageClick","onOpenPageClick","link","createOpenInNewLink","open","hasRowFormWithDefaultSqlDataSource","formController","getParams","PageView","pathname","encodeURI","find","arr","keyPart","selectedRowKey","onSelectClick","onResetClick","Model","class","getCol","hasOwnProperty","dataSources","createDataSources","deinitDataSources","hasActions","actions","databases","theme","Database","addDatabase","logout","start","doHttpRequest2","remotePlatformVersion","getDatabase","domain","getVirtualPath","virtualPath","errorMessage","promises","getNodeEnv","Column","includes","rows","rowsByKey","news","changes","Map","setRows","getTable","onTableInsert","onTableUpdate","onTableDelete","onTableRefresh","fillRowsByKey","addRow","getRowKey","addRows","getRowsLength","column","discardRowColumn","has","get","changeRowColumn","newValue","set","size","isRowColumnChanged","getKeyValues","keyColumns","reduce","removeRow","newRow","getSingleRow","Form","getRowByIndex","clear","paramName","getChangesByKey","hasNewRows","copyNewValues","newValues","updateRow","columnName","getColumn","onDataSourceInsert","onDataSourceDelete","onDataSourceUpdate","reuslt","sourceRow","isSurrogate","moveRow","offset","moveArrItem","event","onDataSourceRefresh","SqlDataSource","count","lastFrame","insertEx","updateEx","getPageParams","select","getLimit","fill","more","hasMore","Array","Math","ceil","getCount","getLastFrame","tables","Table","addTable","Field","replaceThis","replace","split","fillDefaultValue","js","templateToJsString","valueToPageParams","isParam","paramValue","setParam","RowForm","rawToValue","encodeValue","readOnly","notNull","isNullable","getWidth","width","param","CheckBoxField","CheckBoxListField","displayColumn","valueColumn","dataSourceName","ComboBoxField","DateField","raw","addTimezoneOffset","v","cloneDate","removeTimezoneOffset","DateTimeField","FileField","ImageField","LabelField","LinkField","PasswordField","PhoneField","RadioField","TextAreaField","getCols","cols","TextBoxField","TimeField","decodeRow","isNewMode","createRow","fillParams","TableForm","createForms","deinitForms","FormClass","hasRowFormWithDefaultDs","hasRowForm","hasTableForm","keyParams","columns","addColumn","emitInsert","emitUpdate","emitDelete","emitRefresh"],"mappings":"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","file":"viewer.a5d1651b5c6633ec819cd0a43f8d06ca.js","sourcesContent":["class EventEmitter {\n    constructor() {\n        this.list = {};\n    }\n    on(name, cb) {\n        // console.log('EventEmitter.on', name);\n        if (!this.list[name]) {\n            this.list[name] = [];\n        }\n        this.list[name].push(cb);\n    }\n    off(name, cb) {\n        // console.log('EventEmitter.off', name);\n        const i = this.list[name].indexOf(cb);\n        if (i === -1) {\n            throw new Error(`cannot find cb for ${name}`);\n        }\n        // console.log(i);\n        this.list[name].splice(i, 1);\n    }\n    async emit(name, e) {\n        // console.log('EventEmitter.emit', name, e);\n        if (this.list[name] && this.list[name].length) {\n            const results = await Promise.allSettled(this.list[name].map(cb => cb(e)));\n            // console.log('results:', results);\n            for (const result of results) {\n                if (result.status === 'rejected') {\n                    throw result.reason;\n                }\n            }\n        }\n    }\n}\n","class LoginFrontHostApp extends FrontHostApp {\n    constructor(data) {\n        console.log('LoginFrontHostApp.constructor', data);\n        super();\n        this.data = data;\n    }\n    async run() {\n        console.log('LoginFrontHostApp.run');\n        const loginController = LoginController.create(this);\n        const rootElement = document.querySelector(`.${loginController.getViewClassCssBlockName()}__root`);\n        const loginView = Helper.createReactComponent(rootElement, loginController.getViewClass(), {ctrl: loginController});\n    }\n    getText() {\n        return this.data.text;\n    }\n    getData() {\n        return this.data;\n    }\n}\n","class ViewerFrontHostApp extends FrontHostApp {\n    constructor(options = {}) {\n        if (!options.data) throw new Error('no data');\n        super();\n        this.options = options;\n        this.applicationController = null;\n    }\n    async run() {\n        console.log('ViewerFrontHostApp.run', this.getData());\n\n        // application\n        const application = new Application(this.getData());\n        application.init();\n\n        // applicationController\n        const applicationController = this.applicationController = ApplicationController.create(application, this);\n        applicationController.init();\n\n        // view\n        const rootElementName = `.${applicationController.getViewClass().name}__root`;\n        const rootElement = document.querySelector(rootElementName);\n        if (!rootElement) {\n            throw new Error(`no root element: ${rootElementName}`);\n        }\n        applicationController.createView(rootElement);\n\n        // connect\n        try {\n            await applicationController.connect();\n        } catch (err) {\n            this.logError(err);\n        }\n    }\n    async onWindowPopState(e) {\n        // console.log('ViewerFrontHostApp.onWindowPopState', e.state);\n        await this.applicationController.onWindowPopState(e);\n    }\n    logError(err) {\n        console.error('FrontHostApp.logError', err);\n        const values = {\n            type   : 'error',\n            source : 'client',\n            message: err.message,\n            stack  : err.stack,\n            data   : {\n                href           : window.location.href,\n                platformVersion: this.getData().versions.platform,\n                appVersion     : this.getData().versions.app,\n            }\n        };\n        console.log(`POST ${this.getData().logErrorUrl}`, values);\n        fetch(this.getData().logErrorUrl, {\n            method : 'POST',\n            headers: {'Content-Type': 'application/json;charset=utf-8'},\n            body   : JSON.stringify(values)\n        }).catch(err => {\n            console.error(err.message);\n        });\n    }\n    getData() {\n        if (!this.options.data) throw new Error('no data');\n        return this.options.data;\n    }\n    alert(options) {\n        console.log('ViewerFrontHostApp.alert', options);\n        return new Promise((resolve, reject) => {\n            try {\n                const root = document.querySelector('.alert-root');\n                if (root.childElementCount === 0) {\n                    const ctrl = this.alertCtrl = new AlertController({\n                        ...options,\n                        onClose: result => {\n                            this.alertCtrl = null;\n                            ReactDOM.unmountComponentAtNode(root);\n                            resolve(result);\n                        }});\n                    // console.log('ctrl:', ctrl);\n                    const view = Helper.createReactComponent(root, ctrl.getViewClass(), {ctrl});\n                    // console.log('view', view);\n                } else {\n                    reject(new Error('alert already exists'));\n                }\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n    confirm(options) {\n        console.log('ViewerFrontHostApp.confirm', options);\n        return new Promise((resolve, reject) => {\n            try {\n                const root = document.querySelector('.alert-root');\n                if (root.childElementCount === 0) {\n                    const ctrl = this.alertCtrl = new ConfirmController({\n                        ...options,\n                        onClose: result => {\n                            this.alertCtrl = null;\n                            ReactDOM.unmountComponentAtNode(root);\n                            resolve(result);\n                        }});\n                    // console.log('ctrl:', ctrl);\n                    const view = Helper.createReactComponent(root, ctrl.getViewClass(), {ctrl});\n                    // console.log('view', view);\n                } else {\n                    reject(new Error('confirm already exists'));\n                }\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n}\n\nwindow.QForms.ViewerFrontHostApp = ViewerFrontHostApp;\n","class WebSocketClient {\n    constructor(options = {}) {\n        this.options = options;\n        if (!options.applicationController) throw new Error('no options.applicationController');\n        if (!options.protocol) throw new Error('no options.protocol');\n        this.url = `${options.protocol}://${window.location.host}/?${this.createUriParamsString(options)}`;\n        this.webSocket         = null;\n        this.refreshTimeoutId  = null;\n        this.RECONNECT_TIMEOUT = 10;        // sec\n        this.REFRESH_TIMEOUT   = 60*60;     // sec\n    }\n    createUriParamsString(options) {\n        const params = {\n            route  : options.route,\n            uuid   : options.uuid,\n            userId : options.userId,\n            version: this.getApp().getModel().getData().versions.app\n        };\n        return Object.keys(params).map(key => `${key}=${encodeURIComponent(params[key])}`).join('&');\n    }\n    connect() {\n        console.log('WebSocketClient.connect', this.url);\n        return new Promise((resolve, reject) => {\n            this.webSocket = new WebSocket(this.url);\n            this.webSocket.onclose = async e => {\n                this.webSocket = null;\n                reject(new Error(`Connection failed ${e.code}`));\n            };\n            this.webSocket.onopen = e => {\n                this.webSocket.onclose   = this.onClose.bind(this);\n                this.webSocket.onmessage = this.onMessage.bind(this);\n                this.startRefreshTimeout();\n                resolve(e);\n            };\n        });\n    }\n    async onRefreshTimeout() {\n        // console.log('WebSocketClient.onRefreshTimeout');\n        this.refreshTimeoutId = null;\n        this.send('ping');\n        this.startRefreshTimeout();\n    }\n    send(data) {\n        console.log('WebSocketClient.send', data);\n        this.webSocket.send(data);\n    }\n    startRefreshTimeout() {\n        this.refreshTimeoutId = setTimeout(this.onRefreshTimeout.bind(this), this.REFRESH_TIMEOUT * 1000);\n    }\n    resetRefreshTimeout() {\n        if (this.refreshTimeoutId) {\n            clearTimeout(this.refreshTimeoutId);\n            this.refreshTimeoutId = null;\n        }\n    }\n    async reconnect() {\n        console.log('WebSocketClient.reconnect');\n        try {\n            await this.connect();\n        } catch (err) {\n            console.error(err);\n            console.log(`waiting ${this.RECONNECT_TIMEOUT} sec for socket reconnect...`);\n            setTimeout(async () => await this.reconnect(), this.RECONNECT_TIMEOUT * 1000);\n        }\n    }\n\n    async onClose(e) {\n        console.error('WebSocketClient.onClose', e);\n        this.getApp().getHostApp().logError(new Error(`websocket close ${this.getApp().getModel().getDomain()}/${this.getApp().getModel().getName()}`));\n        this.resetRefreshTimeout();\n        this.webSocket.onclose = null;\n        this.webSocket.onmessage = null;\n        this.webSocket = null;\n        await this.reconnect();\n    }\n    async onMessage(e) {\n        console.log('WebSocketClient.onMessage', JSON.parse(e.data));\n        const packet = JSON.parse(e.data);\n        if (packet.type === 'result') {\n            this.getApp().getView().disableRerender();\n            await this.getApp().getModel().emitResult(packet.data);\n            this.getApp().getView().enableRerender();\n            this.getApp().getView().rerender();\n        }\n    }\n    getApp() {\n        return this.options.applicationController;\n    }\n}\n","class Controller extends EventEmitter {\n    constructor() {\n        super();\n        this.view = null;\n    }\n    onViewCreate = view => {\n        // console.log('Controller.onViewCreate');\n        this.view = view;\n    }\n    async rerender() {\n        if (this.view) {\n            return await this.view.rerender();\n        }\n        console.error(`${this.constructor.name}.rerender no view`);\n    }\n    getView() {\n        return this.view;\n    }\n    getViewClass() {\n        throw new Error(`${this.constructor.name}.getViewClass not implemented`);\n    }\n    createElement() {\n        return React.createElement(this.getViewClass(), {\n            ctrl    : this,\n            onCreate: this.onViewCreate\n        });\n    }\n}\n","class AlertController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return AlertView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onOkButtonClick = async e => {\n        this.close(true);\n    }\n    onCloseClick = async e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class ConfirmController extends Controller {\n    constructor(options) {\n        super();\n        this.options = options;\n        if (!options.message) throw new Error('no message');\n        if (!options.onClose) throw new Error('no onClose');\n    }\n    getViewClass() {\n        return ConfirmView;\n    }\n    close(result) {\n        this.options.onClose(result);\n    }\n    onYesClick = e => {\n        this.close(true);\n    }\n    onCloseClick = e => {\n        this.close(false);\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            this.close(false);\n        }\n    }\n}\n","class LoginController extends Controller {\n    constructor(frontHostApp) {\n        super();\n        console.log(`${this.constructor.name}.constructor`);\n        this.frontHostApp = frontHostApp;\n    }\n    static create(frontHostApp) {\n        const data = frontHostApp.getData();\n        if (!data.name) throw new Error('no app name');\n        const CustomClass = FrontHostApp.getClassByName(`${data.name}LoginController`);\n        const Class = CustomClass ? CustomClass : LoginController;\n        return new Class(frontHostApp);\n    }\n    getViewClass() {\n        return LoginView;\n    }\n    getText() {\n        return this.frontHostApp.getText();\n    }\n    getFrontHostApp() {\n        return this.frontHostApp;\n    }\n    getViewClassCssBlockName() {\n        return this.getViewClass().name;\n    }\n}\n","class ModalController extends Controller {\n    constructor(options = {}) {\n        super();\n        if (!options.app) throw new Error('no app');\n        if (!options.id) throw new Error('no id');\n        this.options = options;\n    }\n    getId() {\n        return this.options.id;\n    }\n    getApp() {\n        return this.options.app;\n    }\n    async close() {\n        await this.getApp().closeModal(this);\n        if (this.options.onClose) {\n            this.options.onClose();\n        }\n    }\n}\n","class ImageDialogController extends ModalController {\n    constructor(options) {\n        // console.log('ImageDialogController.constructor', options);\n        super(options);\n        if (!options.src) throw new Error('no src');\n    }\n    getViewClass() {\n        console.log('ImageDialogController.getViewClass');\n        return ImageDialogView;\n    }\n    getSrc() {\n        return this.options.src;\n    }\n    onCloseClick = async e => {\n        await this.close();\n    }\n    onKeyDown = async e => {\n        if (e.key === 'Escape') {\n            await this.close();\n        }\n    }\n    onImageClick = async e => {\n        console.log('ImageDialogController.onImageClick');\n        await this.close();\n    }\n}\n","class ModelController extends Controller {\n    constructor(model, parent) {\n        super();\n        this.model    = model;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.model.getFullName()}: controller already deinited`);\n        this.deinited = true;\n    }\n    getModel() {\n        return this.model;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getTitle() {\n        return this.getModel().getCaption();\n    }\n    getViewClass() {\n        // console.log(`${this.constructor.name}.getViewClass`, this.getModel().getAttr('viewClass'));\n        const model = this.getModel();\n        if (!model.isAttr('viewClass')) throw new Error(`${this.constructor.name} not supports view`);\n        const viewClassName = model.getAttr('viewClass');\n        return viewClassName ? eval(viewClassName) : null;\n    }\n}\n\nwindow.QForms.ModelController = ModelController;\n","class ApplicationController extends ModelController {\n    constructor(model, frontHostApp) {\n        // console.log('ApplicationController.constructor', model, view);\n        super(model, null);\n        this.frontHostApp = frontHostApp;\n        this.lastId = 0;\n        this.activePage = null;     // active non modal page\n        this.modals = [];\n        this.statusbar  = null;\n        this.homePageName = null;\n        this.webSocketClient = null;\n    }\n    static create(model, frontHostApp) {\n        // console.log('ApplicationController.create', 'debug:', ApplicationController.isDebugMode());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}ApplicationController`);\n        const Class = CustomClass ? CustomClass : ApplicationController;\n        return new Class(model, frontHostApp);\n    }\n    static isDebugMode() {\n        return Search.getObj()['debug'] === '1';\n    }\n    init() {\n        // console.log('ApplicationController.init');\n        super.init();\n        // this.model.on('logout' , this.onLogout);\n        this.model.on('request', this.onRequest);\n        const pageData = this.model.data.pages[0];\n        this.activePage = pageData ? this.createPage(pageData, {\n            modal : false,\n            params: this.getGlobalParams()\n        }) : null;\n        document.title = this.getTitle();\n        document.documentElement.classList.add(Helper.inIframe() ? 'iframe' : 'not-iframe');\n        const activePageName = this.getActivePageName();\n        this.homePageName = activePageName ? activePageName : document.title;\n    }\n    deinit() {\n        // this.model.off('logout', this.onLogout);\n        this.model.off('request', this.onRequest);\n        super.deinit();\n    }\n    getViewClass() {\n        return super.getViewClass() || ApplicationView;\n    }\n    createView(rootElement) {\n        // console.log('ApplicationController.createView');\n        this.view = Helper.createReactComponent(rootElement, this.getViewClass(), {ctrl: this});\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(this.model.getAttr('time'));\n        }\n    }\n    onRequest = async e => {\n        console.log('onRequest', e);\n        if (this.statusbar) {\n            this.statusbar.setLastQueryTime(e.time);\n        }\n        // console.log('e.remoteAppVersion', e.remoteAppVersion);\n        // console.log('this.getModel().getData().versions.app', this.getModel().getData().versions.app);\n        if (this.getModel().getData().versions.app && this.getModel().getData().versions.app !== e.remoteAppVersion) {\n            this.createVersionNotificationIfNotExists();\n        }\n    }\n    createVersionNotificationIfNotExists() {\n        // console.log('ApplicationController.createVersionNotificationIfNotExists');\n        if (!document.querySelector('.version-notification')) {\n            const div = document.createElement('div');\n            div.innerHTML = this.getModel().getText().application.versionNotification;\n            div.className = 'version-notification';\n            document.querySelector(`.${this.getView().getCssBlockName()}__body`).append(div);\n        } else {\n            // console.log(`version notification already exists`);\n        }\n    }\n    getGlobalParams() {\n        return {\n            // foo: 'bar'\n        };\n    }\n    // options\n    // - modal      : boolean,\n    // - newMode    : boolean,\n    // - selectMode : boolean,\n    // - selectedKey: string,\n    // - onCreate   : function,\n    // - onSelect   : function,\n    // - onClose    : function,\n    // - params     : object,\n    createPage(pageData, options) {\n        if (options.modal === undefined) throw new Error('no options.modal');\n\n        // model\n        const pageModel = new Page(pageData, this.model, options);\n        pageModel.init();\n\n        // controller\n        const pc = PageController.create(pageModel, this, `c${this.getNextId()}`);\n        pc.init();\n\n        return pc;\n    }\n    async openPage(options) {\n        console.log('ApplicationController.openPage', options);\n        if (!options.name) throw new Error('no name');\n        if (options.key) throw new Error('openPage: key param is deprecated');\n\n        // if this page with this key is already opened, then show it\n        const pageController = this.findPageControllerByPageNameAndKey(options.name, null);\n        // console.log('pageController:', pageController);\n        if (pageController) {\n            this.onPageSelect(pageController);\n            return pageController;\n        }\n\n        const {page: pageData} = await this.model.request({\n            action : 'page',\n            page   : options.name,\n            newMode: !!options.newMode,\n            params : options.params || {}\n        });\n\n        // modal by default\n        if (options.modal === undefined) {\n            options.modal = true;\n        }\n        if (!options.onClose) {\n            const activeElement = document.activeElement;\n            options.onClose = () => {\n                if (activeElement) activeElement.focus();\n            };\n        }\n        const pc = this.createPage(pageData, options);\n        // console.log('pc:', pc);\n\n        // show\n        pc.isModal() ? this.addModal(pc) : this.addPage(pc);\n        await this.rerender();\n\n        return pc;\n    }\n    addModal(ctrl) {\n        this.modals.push(ctrl);\n    }\n    removeModal(ctrl) {\n        // console.log('ApplicationController.removeModal', ctrl);\n        const i = this.modals.indexOf(ctrl);\n        if (i === -1) throw new Error(`cannot find modal: ${ctrl.getId()}`);\n        this.modals.splice(i, 1);\n    }\n    getNextId() {\n        this.lastId++;\n        return this.lastId;\n    }\n    getNewId() {\n        return `c${this.getNextId()}`;\n    }\n    addPage(pc) {\n        if (this.activePage) {\n            this.closePage(this.activePage);\n        }\n        this.activePage = pc;\n        document.title = this.getTitle();\n    }\n    findPageControllerByPageNameAndKey(pageName, key) {\n        if (this.activePage && this.activePage.model.getName() === pageName && this.activePage.model.getKey() === key) {\n            return this.activePage;\n        }\n        return null;\n    }\n    onPageSelect(pc) {\n        console.log('ApplicationController.onPageSelect', pc.model.getName());\n    }\n    async closePage(pageController) {\n        console.log('ApplicationController.closePage', pageController.model.getFullName());\n        if (this.modals.indexOf(pageController) > -1) {\n            this.modals.splice(this.modals.indexOf(pageController), 1);\n        } else if (this.activePage === pageController) {\n            this.activePage = null;\n            document.title = '';\n        } else  {\n            throw new Error('page not found');\n        }\n        await this.rerender();\n        pageController.deinit();\n        pageController.model.deinit();\n    }\n    async onActionClick(name) {\n        console.log('ApplicationController.onActionClick', name);\n    }\n    getMenuItemsProp() {\n        // console.log('ApplicationController.getMenuItemsProp');\n        return [\n            // pages & actions\n            ...(this.model.data.menu ? Object.keys(this.model.data.menu).map(key => ({\n                name : key,\n                title: key,\n                items: this.model.data.menu[key].map(item => ({\n                    type : item.type,\n                    name : item.page || item.action,\n                    title: item.caption\n                }))\n            })) : []),\n            // user\n            ...(this.model.getUser() ? [{\n                name : 'user',\n                title: `${this.model.getDomain()}/${this.model.getUser().login}`,\n                items: [\n                    {\n                        type : 'custom',\n                        name : 'logout',\n                        title: 'Logout'\n                    }\n                ]\n            }] : [])\n        ];\n    }\n    onStatusbarCreate = statusbar => {\n        this.statusbar = statusbar;\n    }\n    onLogout = async () => {\n        console.log('ApplicationController.onLogout');\n        const result = await this.model.request({action: 'logout'});\n        location.href = this.getRootPath();\n    }\n    onMenuItemClick = async (menu, type, name) => {\n        console.log('ApplicationController.onMenuItemClick', menu, type, name);\n        if (type === 'page') {\n            await this.openPage({name: name, modal: false});\n            history.pushState({pageName: name}, '', PageController.createLink({page: name}));\n        } else if (type === 'action') {\n            try {\n                const result = await this.onActionClick(name);\n                if (!result) {\n                    throw new Error(`no handler for action '${name}'`);\n                }\n            } catch (err) {\n                console.error(err);\n                await this.alert({message: err.message});\n            }\n        } else if (type === 'custom' && name === 'logout') {\n            await this.onLogout();\n        } else {\n            throw new Error(`unknown menu type/name: ${type}/${name}`);\n        }\n    }\n    /*getFocusCtrl() {\n        if (this.modals.length > 0) {\n            return this.modals[this.modals.length - 1];\n        }\n        return this.activePage;\n    }*/\n    getActivePageName() {\n        if (this.activePage) {\n            return this.activePage.getModel().getName();\n        }\n        return null;\n    }\n    async onWindowPopState(e) {\n        console.log('ApplicationController.onWindowPopState', e.state);\n        await this.openPage({\n            name : e.state ? e.state.pageName : this.homePageName,\n            modal: false\n        });\n    }\n    getTitle() {\n        // console.log('ApplicationController.getTitle', this.activePage);\n        if (this.activePage) {\n            return `${this.activePage.getTitle()} - ${this.getModel().getCaption()}`;\n        }\n        return this.getModel().getCaption();\n    }\n    invalidate() {\n        if (this.activePage) this.activePage.invalidate();\n        this.modals.filter(ctrl => ctrl instanceof PageController).forEach(page => page.invalidate());\n    }\n    async alert(options) {\n        if (!options.title) {\n            options.title = this.getModel().getText().application.alert;\n        }\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.alert(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    async confirm(options) {\n        if (!options.title) {\n            options.title = this.getModel().getText().application.confirm;\n        }\n        if (!options.yesButton) {\n            options.yesButton = this.getModel().getText().confirm.yes;\n        }\n        if (!options.noButton) {\n            options.noButton = this.getModel().getText().confirm.no;\n        }\n        const activeElement = document.activeElement;\n        try {\n            return await this.frontHostApp.confirm(options);\n        } finally {\n            if (activeElement) activeElement.focus();\n        }\n    }\n    getRootPath() {\n        return '/';\n    }\n    async openModal(ctrl) {\n        this.addModal(ctrl);\n        await this.rerender();\n    }\n    async closeModal(ctrl) {\n        this.removeModal(ctrl);\n        await this.rerender();\n    }\n    getHostApp() {\n        return this.frontHostApp;\n    }\n    async connect() {\n        const data = this.getModel().getData();\n        this.webSocketClient = new WebSocketClient({\n            applicationController: this,\n            protocol             : data.nodeEnv === 'development' ? 'ws' : 'wss',\n            route                : data.route,\n            uuid                 : data.uuid,\n            userId               : data.user ? data.user.id : null,\n        });\n        await this.webSocketClient.connect();\n    }\n    async rpc(name, params) {\n        const result = await this.getModel().rpc(name, params);\n        /*if (result.errorMessage) {\n            this.getHostApp().logError(new Error(result.errorMessage));\n            await this.alert({\n                title     : this.getModel().getText().application.error,\n                titleStyle: {color: 'red'},\n                message   : result.errorMessage\n            });\n        }*/\n        return result;\n    }\n}\n\nwindow.QForms.ApplicationController = ApplicationController;\n","class FieldController extends ModelController {\n    /*constructor(model, parent) {\n        super(model, parent);\n    }*/\n    static create(model, parent) {\n        // console.log('FieldController.create', model.getFullName(), parent.model.getClassName());\n        const page = model.getPage();\n        const form = model.getForm();\n        const CustomClass = FrontHostApp.getClassByName(`${page.getName()}${form.getName()}${model.getName()}FieldController`);\n        const generalClassName = `${parent.model.getClassName()}${model.getClassName()}Controller`;\n        const GeneralClass = FrontHostApp.getClassByName(generalClassName);\n        if (!GeneralClass) throw new Error(`no class ${generalClassName}`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    valueToString(value) {\n        // console.log('Field.valueToString', this.model.getFullName(), typeof value, value);\n        switch (typeof value) {\n            case 'string':\n                return value;\n            case 'object':\n                if (value === null) return '';\n                if (value instanceof Date) return value.toISOString();\n                return JSON.stringify(value, null, 4);\n            case 'number':\n            case 'boolean':\n                return value.toString();\n            case 'undefined':\n                return '';\n            default: throw new Error(`${this.model.getFullName()}: unknown value type: ${typeof value}, value: ${value}`);\n        }\n    }\n    stringToValue(stringValue) {\n        // console.log('FieldController.stringToValue', this.model.getFullName(), stringValue);\n        // if (stringValue === undefined) return undefined;\n        // if (stringValue === null) return null;\n        const fieldType = this.model.getType();\n        // console.log('fieldType:', fieldType);\n        if (stringValue.trim() === '') return null;\n        if (fieldType === 'object' || fieldType === 'boolean') {\n            return JSON.parse(stringValue);\n        } else if (fieldType === 'date') {\n            const date = new Date(stringValue);\n            if (date.toString() === 'Invalid Date') throw new Error(`${this.getApp().getModel().getText().error.invalidDate}: ${stringValue}`);\n            return date;\n        } else if (fieldType === 'number') {\n            const num = Number(stringValue);\n            if (isNaN(num)) throw new Error(this.getApp().getModel().getText().error.notNumber);\n            return num;\n        }\n        return stringValue;\n    }\n    getViewStyle(row) {\n        return null;\n    }\n    async openPage(options) {\n        return await this.getParent().openPage(options);\n    }\n    getForm() {\n        return this.parent;\n    }\n    getPage() {\n        return this.parent.parent;\n    }\n    getApp() {\n        return this.parent.parent.parent;\n    }\n    isVisible() {\n        return this.getModel().getAttr('visible') === 'true';\n    }\n    isAutoFocus() {\n        return this.getModel().getAttr('autoFocus') === 'true';\n    }\n    getAutocomplete() {\n        return this.getModel().getAttr('autocomplete') || null;\n    }\n    getFormat() {\n        return this.getModel().getAttr('format');\n    }\n}\nwindow.QForms.FieldController = FieldController;\n","class RowFormFieldController extends FieldController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            value     : null,\n            parseError: null,\n            error     : null,\n            changed   : false,\n        };\n    }\n    init() {\n        const row = this.getRow();\n        const value = this.model.getValue(row);\n        this.setValue(value);\n        // console.log(this.model.getFullName(), value);\n    }\n    refill() {\n        // console.log('RowFormFieldController.refill', this.model.getFullName());\n        if (!this.view) return;\n        const value = this.model.getValue(this.getRow());\n        this.setValue(value);\n        this.resetErrors();\n        this.refreshChangedState();\n    }\n    getRow() {\n        return this.model.getForm().getRow();\n    }\n    copyValueToModel() {\n        // console.log('RowFormFieldController.copyValueToModel', this.model.getFullName());\n        this.getModel().setValue(this.getRow(), this.getValue());\n    }\n    /*_onChange(widgetValue) {\n\n    }*/\n    putValue(widgetValue) {\n        // console.log('RowFormFieldController.putValue', widgetValue);\n        this.onChange(widgetValue, false);\n    }\n    onChange = async (widgetValue, fireEvent = true) => {\n        console.log('RowFormFieldController.onChange', JSON.stringify(widgetValue));\n        // this._onChange(widgetValue);\n\n        this.resetErrors();\n        this.rerender();\n\n        // get value from widget\n        try {\n            this.setValueFromWidget(widgetValue);\n        } catch (err) {\n            console.error(`${this.model.getFullName()}: cannot parse view value: ${err.message}`);\n            this.state.parseError = err.message;\n        }\n\n        // validate\n        if (!this.state.parseError && this.isValidateOnChange()) {\n            this.validate();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n\n        // changed\n        this.refreshChangedState();\n\n        // event\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    onBlur = (widgetValue, fireEvent = true) => {\n        console.log('RowFormFieldController.onBlur', this.model.getFullName(), JSON.stringify(widgetValue));\n        if (!this.isEditable()) return;\n\n        // this.resetErrors();\n        this.rerender();    // to clear field focus class\n\n        if (!this.isValidateOnBlur()) return;\n\n        // get value from widget\n        try {\n            this.setValueFromWidget(widgetValue);\n        } catch (err) {\n            console.error(`${this.model.getFullName()}: cannot parse view value: ${err.message}`);\n            this.state.parseError = err.message;\n        }\n\n        // validate\n        if (!this.state.parseError && this.isValidateOnBlur()) {\n            this.validate();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n\n        // changed\n        this.refreshChangedState();\n\n        // event\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    getValueForWidget() {\n        const value = this.getValue();\n        // console.log('value:', this.model.getFullName(), value, typeof value);\n        return this.valueToString(value);\n    }\n    setValueFromWidget(widgetValue) {\n        // console.log('RowFormFieldController.setValueFromWidget', this.model.getFullName(), typeof widgetValue, widgetValue);\n        if (typeof widgetValue !== 'string') throw new Error(`${this.model.getFullName()}: widgetValue must be string, but got ${typeof widgetValue}`);\n        const value = this.stringToValue(widgetValue);\n        // console.log('value:', value);\n        this.setValue(value);\n    }\n    setValue(value) {\n        // console.log('RowFormFieldController.setValue', this.model.getFullName(), value);\n        this.state.value = value;\n    }\n    getValue() {\n        return this.state.value;\n    }\n    isChanged() {\n        // console.log('RowFormFieldController.isChanged', this.model.getFullName(), this.state);\n        return this.state.changed;\n    }\n    isValid() {\n        return this.state.parseError === null && this.state.error === null;\n    }\n    validate() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        if (this.isVisible()) {\n            this.state.error = this.getError();\n        }\n    }\n    refreshChangedState() {\n        this.state.changed = this.calcChangedState(this.getRow());\n    }\n    getPlaceholder() {\n        // console.log('RowFormFieldController.getPlaceholder', this.model.getFullName(), this.model.getAttr('placeholder'));\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        if (ApplicationController.isDebugMode()) {\n            const value = this.getValue();\n            if (value === undefined) return 'undefined';\n            if (value === null) return 'null';\n            if (value === '') return 'empty string';\n        }\n    }\n    getError() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.view && this.view.getWidget()) {\n            try {\n                const widgetValue = this.view.getWidget().getValue();\n            } catch (err) {\n                return `can't parse value: ${err.message}`;\n            }\n        }\n\n        // null validator\n        const value = this.getValue();\n        if (this.getModel().isNotNull() && (value === null || value === undefined)) {\n            return this.getNullErrorText();\n        }\n\n        return null;\n    }\n    getNullErrorText() {\n        return this.getModel().getApp().getText().form.required;\n    }\n    isEditable() {\n        return this.parent.getMode() === 'edit' && !this.model.isReadOnly();\n    }\n    isParseError() {\n        return this.state.parseError !== null;\n    }\n    calcChangedState(row) {\n        // console.log('RowFormFieldController.calcChangedState', this.model.getFullName());\n        if (!row) throw new Error('FieldController: no row');\n        if (this.isParseError()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: parse error: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (!this.isValid()) {\n            console.log(`FIELD CHANGED ${this.model.getFullName()}: not valid: ${this.getErrorMessage()}`);\n            return true;\n        }\n        if (this.model.hasColumn()) {\n            const fieldRawValue = this.model.valueToRaw(this.getValue());\n            const dsRawValue = this.model.getRawValue(row);\n            if (fieldRawValue !== dsRawValue) {\n                console.log(`FIELD CHANGED ${this.model.getFullName()}`, JSON.stringify(dsRawValue), JSON.stringify(fieldRawValue));\n                return true;\n            }\n            if (this.model.isChanged(row)) {\n                let original = row[this.model.getAttr('column')];\n                let modified = this.model.getDefaultDataSource().getRowWithChanges(row)[this.model.getAttr('column')];\n                if (original) original = original.substr(0, 100);\n                if (modified) modified = modified.substr(0, 100);\n                console.log(`MODEL CHANGED ${this.model.getFullName()}:`, original, modified);\n                return true;\n            }\n        }\n        return false;\n    }\n    setError(error) {\n        this.state.error = error;\n    }\n    resetErrors() {\n        this.setError(null);\n        this.state.parseError = null;\n    }\n    getErrorMessage() {\n        if (this.state.parseError) {\n            return this.state.parseError;\n        }\n        return this.state.error;\n    }\n    renderView() {\n        return React.createElement(this.getViewClass(), {\n            onCreate: this.onViewCreate,\n            ctrl: this,\n        });\n    }\n    isValidateOnChange() {\n        return this.getModel().validateOnChange();\n    }\n    isValidateOnBlur() {\n        return this.getModel().validateOnBlur();\n    }\n    onChangePure = async (value, fireEvent = true) => {\n        console.log('RowFormFieldController.onChangePure', JSON.stringify(value));\n\n        // value\n        this.setValue(value);\n        this.resetErrors();\n        this.rerender();\n\n        // validate\n        if (this.isValidateOnChange()) {\n            this.validate();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n\n        // changed\n        this.refreshChangedState();\n\n        // event\n        if (fireEvent) {\n            try {\n                this.emit('change', {value});\n            } catch (err) {\n                console.error('unhandled change event error:', this.getModel().getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n}\nwindow.QForms.RowFormFieldController = RowFormFieldController;\n","class RowFormCheckBoxFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormCheckBoxFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n}\n\nwindow.QForms.RowFormCheckBoxFieldController = RowFormCheckBoxFieldController;\n","class RowFormCheckBoxListFieldController extends RowFormFieldController {\n    init() {\n        // console.log('RowFormCheckBoxListFieldController.init', this.getModel().getFullName());\n        super.init();\n        const dataSource = this.model.getDataSource();\n        dataSource.on('insert', this.onListInsert);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListDelete);\n    }\n    deinit() {\n        const dataSource = this.model.getDataSource();\n        dataSource.off('insert', this.onListInsert);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListDelete);\n        super.deinit();\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormCheckBoxListFieldView;\n    }\n    getRows() {\n        return this.model.getDataSource().getRows();\n    }\n    onListInsert = async e => {\n        console.log('RowFormCheckBoxListFieldController.onListInsert');\n        await this.rerender();\n    }\n    onListUpdate = async e => {\n        // console.log('RowFormCheckBoxListFieldController.onListUpdate');\n        await this.rerender();\n    }\n    onListDelete = async e => {\n        await this.rerender();\n    }\n    getValueForWidget() {\n        // console.log('RowFormCheckBoxListFieldController.getValueForWidget');\n        const value = this.getValue();\n        // console.log('value:', value);\n        return value;\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n    getItemFromRow(row) {\n        return {\n            value: this.valueToString(this.getModel().getValueValue(row)),\n            title: this.getModel().getDisplayValue(row)\n        };\n    }\n}\n\nwindow.QForms.RowFormCheckBoxListFieldController = RowFormCheckBoxListFieldController;\n","class RowFormComboBoxFieldController extends RowFormFieldController {\n    init() {\n        // console.log('RowFormComboBoxFieldController.init', this.getModel().getFullName());\n        super.init();\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.on('insert', this.onListInsert);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListDelete);\n    }\n    deinit() {\n        const dataSource = this.model.getComboBoxDataSource();\n        dataSource.off('insert', this.onListInsert);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListDelete);\n        super.deinit();\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormComboBoxFieldView;\n    }\n    getItems() {\n        try {\n            return this.getRows().map(row => ({\n                value: this.valueToString(this.getModel().getValueValue(row)),\n                title: this.getModel().getDisplayValue(row)\n            }));\n        } catch (err) {\n            err.message = `${this.getModel().getFullName()}: ${err.message}`;\n            throw err;\n        }\n    }\n    getRows() {\n        return this.model.getComboBoxDataSource().getRows();\n    }\n    getPlaceholder() {\n        if (this.model.getAttr('placeholder')) return this.model.getAttr('placeholder');\n        return ApplicationController.isDebugMode() ? '[null]' : null;\n    }\n    onEditButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onEditButtonClick');\n        const itemEditPage = this.getModel().getAttr('itemEditPage');\n        const value = this.getValue();\n        // console.log('itemEditPage', itemEditPage);\n        // console.log('value:', value);\n        if (itemEditPage && value) {\n            await this.openPage({\n                name: itemEditPage,\n                params: {\n                    key: value\n                }\n            });\n        }\n    }\n    onCreateButtonClick = async e => {\n        console.log('RowFormComboBoxFieldController.onCreateButtonClick');\n        const newRowMode = this.getModel().getAttr('newRowMode');\n        const itemCreateForm = this.getModel().getAttr('itemCreateForm');\n        if (!itemCreateForm) throw new Error('no itemCreateForm');\n\n        let createPageName;\n        if (newRowMode === 'editPage') {\n            createPageName = this.getModel().getAttr('itemEditPage');\n        } else if (newRowMode === 'createPage') {\n            createPageName = this.getModel().getAttr('itemCreatePage');\n        } else {\n            throw new Error(`wrong newRowMode value: ${newRowMode}`);\n        }\n\n        // page\n        const pc = await this.openPage({\n            name: createPageName,\n            newMode: true\n        });\n\n        // form\n        const form = pc.getModel().getForm(itemCreateForm);\n        const onInsert = async e => {\n            form.off('insert', onInsert);\n            const [key] = e.inserts;\n            const [id] = Helper.decodeValue(key);\n            // console.log('id:', id);\n            await this.onChange(id.toString());\n        }\n        form.on('insert', onInsert);\n    }\n    onListInsert = async e => {\n        console.log('RowFormComboBoxFieldController.onListInsert');\n        await this.rerender();\n    }\n    onListUpdate = async e => {\n        // console.log('RowFormComboBoxFieldController.onListUpdate');\n        await this.rerender();\n    }\n    onListDelete = async e => {\n        await this.rerender();\n    }\n    onItemSelect = async e => {\n        // console.log('RowFormComboBoxFieldController.onItemSelect');\n        if (e.button === 0) {\n            e.preventDefault();\n            const id = this.getValue();\n            const selectedKey = id ? JSON.stringify([id]) : null;\n            await this.openPage({\n                name       : this.getModel().getAttr('itemSelectPage'),\n                selectMode : true,\n                selectedKey: selectedKey,\n                onSelect   : async key => {\n                    if (key) {\n                        const [id] = Helper.decodeValue(key);\n                        // console.log('id:', id);\n                        if (this.getValue() !== id) {\n                            await this.getView().onChange(id.toString());\n                        }\n                    } else {\n                        if (this.getValue() !== null) {\n                            await this.getView().onChange('');\n                        }\n                    }\n                }\n            });\n        }\n    }\n}\n\nwindow.QForms.RowFormComboBoxFieldController = RowFormComboBoxFieldController;\n","class RowFormDateFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormDateFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        this.setValue(widgetValue);\n    }\n}\nwindow.QForms.RowFormDateFieldController = RowFormDateFieldController;\n","class RowFormDateTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.widget2 = null;\n        this.defaultValue = 0;\n        this.state.parseError2 = null;\n        this.state.error2 = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormDateTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    getValueForTime() {\n        // console.log('RowFormDateTimeFieldController.getValueForTime', this.model.getFullName(), this.defaultValue, TimeBox.getStringValue(this.defaultValue));\n        const date = this.getValue();\n        if (date) {\n            const value = date.getHours() * 60 + date.getMinutes();\n            // console.log('value:', value);\n            if (value !== this.defaultValue) {\n                // console.log('not equal to default value', value, this.defaultValue);\n                return value;\n            }\n        }\n        return null;\n    }\n    setValueFromWidget(widgetValue) {\n        if (widgetValue === null) {\n            this.state.parseError2 = null;\n            this.resetErrors2();\n            if (this.widget2) this.widget2.setValue(null);\n        } else {\n            const [h, m] = TimeBox.splitTime(this.defaultValue);\n            widgetValue.setHours(h, m);\n        }\n        this.setValue(widgetValue);\n    }\n    onView2Create = widget2 => {\n        // console.log('RowFormDateTimeFieldController.onView2Create', widget2);\n        this.widget2 = widget2;\n    }\n    /*_onChange(widgetValue) {\n        // console.log('RowFormDateTimeFieldController._onChange', this.widget2);\n        if (widgetValue !== null) {\n            setTimeout(() => {\n                const input = this.widget2.getInputElement();\n                input.focus();\n                input.setSelectionRange(0, input.value.length);\n            }, 0);\n        }\n    }*/\n    onChange2 = (widgetValue, fireEvent = true) => {\n        // console.log('RowFormDateTimeFieldController.onChange2', widgetValue);\n        this.resetErrors();\n        this.resetErrors2();\n        this.rerender();\n\n        if (!this.isValidateOnChange2()) return;\n\n        try {\n            this.setValueFromView2(widgetValue);\n        } catch (err) {\n            console.log(`${this.model.getFullName()}: cannot parse time: ${err.message}`);\n            this.state.parseError2 = err.message;\n        }\n\n        // validate\n        if (!this.state.parseError2) {\n            this.validate2();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n\n        // changed\n        this.refreshChangedState();\n\n        // event\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    onBlur2 = (widgetValue, fireEvent = true) => {\n        console.log('RowFormDateTimeFieldController.onBlur2', widgetValue);\n        if (!this.isEditable()) return;\n\n        this.resetErrors2();\n        this.rerender();\n\n        // get value from widget\n        try {\n            this.setValueFromView2(widgetValue);\n        } catch (err) {\n            console.log(`${this.model.getFullName()}: cannot parse time: ${err.message}`);\n            this.state.parseError2 = err.message;\n        }\n\n        // validate\n        if (!this.state.parseError2) {\n            this.validate2();\n            if (this.isValid()) {\n                this.copyValueToModel();\n            }\n        }\n\n        // changed\n        this.refreshChangedState();\n\n        // event\n        if (fireEvent) {\n            try {\n                this.emit('change', {value: widgetValue});\n            } catch (err) {\n                console.error('unhandled change event error:', this.model.getFullName(), err);\n            }\n            this.parent.onFieldChange({source: this});\n        }\n    }\n    getPlaceholder2() {\n        return TimeBox.getStringValue(this.defaultValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue2(defaultValue) {\n        // console.log('RowFormDateTimeFieldController.setDefaultValue2', this.widget2 ? this.widget2.getValue() : null);\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24 * 60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n        if (this.widget2 && this.widget2.getValue() === null && this.state.value) {\n            this.setValue2(null);\n        }\n    }\n    setValueFromView2(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error(this.getTimeErrorText());\n        this.setValue2(widgetValue);\n    }\n    getTimeErrorText() {\n        return this.getModel().getApp().getText().field.timeNotValid;\n    }\n    setValue2(widgetValue) {\n        const value = widgetValue !== null ? widgetValue : this.defaultValue;\n        const [h, m] = TimeBox.splitTime(value);\n        this.state.value.setHours(h, m);\n    }\n    validate2() {\n        // console.log('RowFormFieldController.validate', this.model.getFullName());\n        this.state.error2 = this.getError2();\n    }\n    getError2() {\n        // console.log('RowFormFieldController.getError', this.model.getFullName());\n\n        // parse validator\n        if (this.widget2) {\n            try {\n                const widgetValue = this.widget2.getValue();\n            } catch (err) {\n                return `can't parse time: ${err.message}`;\n            }\n        }\n\n        return null;\n    }\n    isParseError2() {\n        return this.state.parseError2 !== null;\n    }\n    resetErrors2() {\n        this.setError2(null);\n        this.state.parseError2 = null;\n    }\n    setError2(error2) {\n        this.state.error2 = error2;\n    }\n    getErrorMessage2() {\n        if (this.state.parseError2) {\n            return this.state.parseError2;\n        }\n        return this.state.error2;\n    }\n    isValid2() {\n        return this.state.parseError2 === null && this.state.error2 === null;\n    }\n    refill() {\n        // console.log('RowFormDateTimeFieldController.refill');\n        if (!this.widget2) return;\n        super.refill();\n        this.widget2.setValue(this.getValueForTime());\n        this.resetErrors2();\n        this.refreshChangedState();\n    }\n    isParseError() {\n        return super.isParseError() || this.isParseError2();\n    }\n    isValid() {\n        return super.isValid() && this.isValid2();\n    }\n    getErrorMessage() {\n        if (super.getErrorMessage() === null && this.getErrorMessage2() === null) return null;\n        return [\n            ...(super.getErrorMessage() ? [super.getErrorMessage()] : []),\n            ...(this.getErrorMessage2() ? [this.getErrorMessage2()] : [])\n        ].join(', ');\n    }\n    isValidateOnChange2() {\n        return true;\n    }\n    isValidateOnBlur2() {\n        return false;\n    }\n}\nwindow.QForms.RowFormDateTimeFieldController = RowFormDateTimeFieldController;\n","class RowFormFileFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormFileFieldView;\n    }\n}\nwindow.QForms.RowFormFileFieldController = RowFormFileFieldController;\n","class RowFormImageFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormImageFieldView;\n    }\n}\nwindow.QForms.RowFormImageFieldController = RowFormImageFieldController;\n","class RowFormLinkFieldController extends  RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('RowFormLinkFieldController.onClick', e);\n        this.emit({source: this});\n    }\n}\nwindow.QForms.RowFormLinkFieldController = RowFormLinkFieldController;\n","class RowFormPasswordFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPasswordFieldView;\n    }\n}\nwindow.QForms.RowFormPasswordFieldController = RowFormPasswordFieldController;\n","class RowFormPhoneFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormPhoneFieldView;\n    }\n    getPhoneFormatErrorText() {\n        return this.getModel().getApp().getText().form.phoneNumberFormatError;\n    }\n\n    getError() {\n        const error = super.getError();\n        if (error) return error;\n\n        // russian phone format validator\n        const value = this.getValue();\n        if (value && value.substr(0,2) === '+7' && value.length < 12) {\n            return this.getPhoneFormatErrorText();\n        }\n\n        return null;\n    }\n}\nwindow.QForms.RowFormPhoneFieldController = RowFormPhoneFieldController;\n","class RowFormRadioFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormRadioFieldView;\n    }\n    getItems() {\n        try {\n            return this.getRows().map(row => ({\n                // value: this.valueToString(this.getModel().getValueValue(row)),\n                value: this.getModel().getValueValue(row),\n                title: this.getModel().getDisplayValue(row)\n            }));\n        } catch (err) {\n            err.message = `${this.getModel().getFullName()}: ${err.message}`;\n            throw err;\n        }\n    }\n    getRows() {\n        return this.getModel().getDataSource().getRows();\n    }\n}\n","class RowFormTextAreaFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextAreaFieldView;\n    }\n}\nwindow.QForms.RowFormTextAreaFieldController = RowFormTextAreaFieldController;\n","class RowFormTextBoxFieldController extends RowFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || RowFormTextBoxFieldView;\n    }\n}\nwindow.QForms.RowFormTextBoxFieldController = RowFormTextBoxFieldController;\n","class RowFormTimeFieldController extends RowFormFieldController {\n    constructor(...args) {\n        super(...args);\n        this.defaultValue = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || RowFormTimeFieldView;\n    }\n    getValueForWidget() {\n        return this.getValue();\n    }\n    setValueFromWidget(widgetValue) {\n        if (isNaN(widgetValue)) throw new Error('wrong time');\n        this.setValue(widgetValue);\n    }\n    getDefaultValue() {\n        return this.defaultValue;\n    }\n    setDefaultValue2(defaultValue) {\n        if (typeof defaultValue === 'string') {\n            this.defaultValue = TimeBox.getIntegerValue(defaultValue);\n        } else {\n            if (defaultValue >= 24*60) throw new Error(`wrong default value: ${defaultValue}`);\n            this.defaultValue = defaultValue;\n        }\n    }\n    getPlaceholder() {\n        // console.log('CarReservefromTimeController.getPlaceholder', this.defaultValue);\n        if (this.defaultValue !== null) return TimeBox.getStringValue(this.defaultValue);\n        return super.getPlaceholder();\n    }\n}\nwindow.QForms.RowFormTimeFieldController = RowFormTimeFieldController;\n","class TableFormFieldController extends FieldController {\n    getValueForWidget(row) {\n        // console.log('TableFormFieldController.getValueForWidget');\n        return this.valueToString(this.model.getValue(row));\n    }\n}\nwindow.QForms.TableFormFieldController = TableFormFieldController;\n","class TableFormCheckBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormCheckBoxFieldView;\n    }\n    getValueForWidget(row) {\n        return this.model.getValue(row);\n    }\n}\nwindow.QForms.TableFormCheckBoxFieldController = TableFormCheckBoxFieldController;\n","class TableFormComboBoxFieldController extends TableFormFieldController {\n\n    init() {\n        super.init();\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.on('insert', this.onListUpdate);\n        dataSource.on('update', this.onListUpdate);\n        dataSource.on('delete', this.onListUpdate);\n    }\n\n    deinit() {\n        const dataSource = this.getModel().getComboBoxDataSource();\n        dataSource.off('insert', this.onListUpdate);\n        dataSource.off('update', this.onListUpdate);\n        dataSource.off('delete', this.onListUpdate);\n        super.deinit();\n    }\n\n    getViewClass() {\n        return super.getViewClass() || TableFormComboBoxFieldView;\n    }\n\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        const rawValue = this.model.valueToRaw(value);\n        if (rawValue === undefined || rawValue === 'null') return '';\n        const cbRow = this.model.findRowByRawValue(rawValue);\n        if (cbRow) {\n            return this.valueToString(this.model.getDisplayValue(cbRow));\n        }\n        return `[no row for id: ${rawValue}]`;\n    }\n\n    onListUpdate = async e => {\n        // console.log('TableFormComboBoxFieldController.onListUpdate', this.getModel().getFullName());\n        this.getForm().invalidate();\n        await this.getForm().rerender();\n    }\n\n}\nwindow.QForms.TableFormComboBoxFieldController = TableFormComboBoxFieldController;\n","class TableFormDateFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateFieldController = TableFormDateFieldController;\n","class TableFormDateTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormDateTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        if (value) return Helper.formatDate(value, this.getFormat() || '{DD}.{MM}.{YYYY} {hh}:{mm}:{ss}');\n        return '';\n    }\n}\nwindow.QForms.TableFormDateTimeFieldController = TableFormDateTimeFieldController;\n","class TableFormLinkFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormLinkFieldView;\n    }\n    onClick = e => {\n        console.log('TableFormLinkFieldController.onClick', e);\n        e.preventDefault();\n        this.emit('click', {source: this});\n    }\n}\nwindow.QForms.TableFormLinkFieldController = TableFormLinkFieldController;\n","class TableFormPhoneFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormPhoneFieldView;\n    }\n}\n","class TableFormTextAreaFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextAreaFieldView;\n    }\n}\nwindow.QForms.TableFormTextAreaFieldController = TableFormTextAreaFieldController;\n","class TableFormTextBoxFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTextBoxFieldView;\n    }\n    /*beginEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'text';\n        view.firstElementChild.contentEditable = true;\n        const range = document.createRange();\n        range.selectNodeContents(view.firstElementChild);\n        window.getSelection().removeAllRanges();\n        window.getSelection().addRange(range);\n        view.firstElementChild.focus();\n        return true;\n    }*/\n\n    /*endEdit(view) {\n        view.firstElementChild.style.MozUserSelect = 'none';\n        view.firstElementChild.contentEditable = false;\n    }*/\n}\nwindow.QForms.TableFormTextBoxFieldController = TableFormTextBoxFieldController;\n","class TableFormTimeFieldController extends TableFormFieldController {\n    getViewClass() {\n        return super.getViewClass() || TableFormTimeFieldView;\n    }\n    getValueForWidget(row) {\n        const value = this.model.getValue(row);\n        return TimeBox.getStringValue(value);\n    }\n}\nwindow.QForms.TableFormTimeFieldController = TableFormTimeFieldController;\n","class FormController extends ModelController {\n    static create(model, parent) {\n        // console.log('FormController.create', model.getFullName());\n        const page = model.getPage();\n        const customClassName = `${page.getName()}${model.getName()}FormController`;\n        const CustomClass = FrontHostApp.getClassByName(customClassName);\n        const GeneralClass = FrontHostApp.getClassByName(`${model.getClassName()}Controller`);\n        const Class = CustomClass ? CustomClass : GeneralClass;\n        return new Class(model, parent);\n    }\n    constructor(model, parent) {\n        super(model, parent);\n        this.fields = {};\n    }\n    init() {\n        for (const field of this.model.fields) {\n            const ctrl = this.fields[field.getName()] = FieldController.create(field, this);\n            ctrl.init();\n        }\n    }\n    deinit() {\n        // console.log('FormController.deinit:', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].deinit();\n        }\n        super.deinit();\n    }\n    isValid() {\n        return true;\n    }\n    async openPage(options) {\n        return await this.getPage().openPage(options);\n    }\n    getPage() {\n        return this.parent;\n    }\n    isChanged() {\n        return false;\n    }\n    async onFieldChange(e) {\n        // console.log('FormController.onFieldChange', this.model.getFullName());\n        await this.getPage().onFormChange(e);\n    }\n    getUpdated() {\n        return this.state.updated;\n    }\n    invalidate() {\n        this.state.updated = Date.now();\n    }\n    async onActionClick(name, row) {\n        console.log('FormController.onActionClick', name, row);\n    }\n    getField(name) {\n        return this.fields[name];\n    }\n    getApp() {\n        return this.parent.parent;\n    }\n    getSelectedRowKey() {\n        return null;\n    }\n    isAutoFocus() {\n        for (const name in this.fields) {\n            if (this.fields[name].isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    isVisible() {\n        return this.getModel().getAttr('visible') === 'true';\n    }\n}\nwindow.QForms.FormController = FormController;\n","class RowFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now(),\n            mode   : 'edit',\n            hasNew : false,\n            changed: false,\n            valid  : true\n        };\n    }\n\n    init() {\n        super.init();\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('insert' , this.onModelInsert);\n        this.model.on('update' , this.onModelUpdate);\n        if (this.model.getDefaultDataSource().getClassName() === 'SqlDataSource') {\n            this.state.mode = 'view';\n        }\n        this.calcState();\n        if (this.state.hasNew) {\n            this.state.mode = 'edit';\n        }\n    }\n\n    deinit() {\n        // console.log('RowFormController.deinit', this.model.getFullName());\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('insert' , this.onModelInsert);\n        this.model.off('update' , this.onModelUpdate);\n        super.deinit();\n    }\n\n    calcState() {\n        this.state.hasNew  = this.model.hasNew();\n        this.state.changed = this.isChanged();\n        this.state.valid   = this.isValid();\n        // console.log('hasNew:', hasNew);\n        // console.log('changed:', changed);\n        // console.log('valid:', valid);\n    }\n\n    refill() {\n        console.log('RowFormController.refill', this.model.getFullName());\n        for (const name in this.fields) {\n            this.fields[name].refill();\n        }\n    }\n\n    onModelRefresh = async e => {\n        console.log('RowFormController.onModelRefresh', this.model.getFullName());\n        if (!this.view) return;\n        this.refill();\n        this.invalidate();\n        this.rerender();\n    }\n\n    onModelInsert = async e => {\n        console.log('RowFormController.onModelInsert', this.model.getFullName());\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormInsert(e);\n    }\n\n    onModelUpdate = async e => {\n        console.log('RowFormController.onModelUpdate', this.model.getFullName(), e);\n        this.refill();\n        this.invalidate();\n        this.calcState();\n        this.parent.onFormUpdate(e);\n    }\n\n    isValid() {\n        // console.log('RowFormController.isValid', this.model.getFullName());\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (!field.isValid()) return false;\n        }\n        return true;\n    }\n    validate() {\n        // console.log('RowFormController.validate', this.getModel().getFullName());\n        for (const name in this.fields) {\n            this.fields[name].validate();\n        }\n        this.invalidate();\n    }\n    clearFieldsError() {\n        for (const name in this.fields) {\n            this.fields[name].setError(null);\n        }\n    }\n    onSaveClick = async () => {\n        console.log('RowFormController.onSaveClick');\n        this.validate();\n        this.calcState();\n        if (this.isValid()) {\n            try {\n                this.getApp().getView().disableRerender();\n                await this.model.update();\n                this.state.mode = 'view';\n                console.log('form model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n                await this.getApp().getView().rerender();\n            }\n        } else {\n            console.error(`cannot update invalid row form: ${this.model.getFullName()}`);\n            await this.rerender();\n        }\n    }\n\n    onDiscardClick = () => {\n        console.log('RowFormController.onDiscardClick', this.model.getFullName());\n        const changedFields = [];\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row) || !field.isValid()) {\n                changedFields.push(name);\n            }\n        }\n        // console.log('changedFields:', changedFields);\n        this.model.discard(changedFields);\n\n        // refill changed fields\n        changedFields.forEach(name => {\n            this.fields[name].refill();\n        });\n\n        // ui\n        this.calcState();\n        if (this.getModel().hasDefaultSqlDataSource()) {\n            this.state.mode = 'view';\n        }\n        this.rerender();\n\n        // event\n        this.parent.onFormDiscard(this);\n    }\n\n    onRefreshClick = async () => {\n        // console.log('RowFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n    }\n\n    isChanged() {\n        // console.log('RowFormController.isChanged', this.model.getFullName());\n        if (this.model.isChanged()) return true;\n        const row = this.model.getRow();\n        for (const name in this.fields) {\n            const field = this.fields[name];\n            if (field.isChanged(row)) return true;\n        }\n        return false;\n    }\n\n    async onFieldChange(e) {\n        // console.log('RowFormController.onFieldChange', this.model.getFullName());\n        this.calcState();\n        this.invalidate();\n        await super.onFieldChange(e);\n    }\n\n    onEditClick = e => {\n        console.log('RowFormController.onEditClick');\n        this.state.mode = 'edit';\n        this.rerender();\n    }\n    onCancelClick = e => {\n        console.log('RowFormController.onCancelClick');\n        this.state.mode = 'view';\n        this.rerender();\n    }\n    getViewClass() {\n        // console.log('RowFormController.getViewClass', this.model.getFullName());\n        return super.getViewClass() || RowFormView;\n    }\n    getActiveRow(withChanges) {\n        return this.model.getRow(withChanges);\n    }\n    getMode() {\n        return this.state.mode;\n    }\n    isActionEnabled(name) {\n        return this.isViewMode();\n    }\n    isEditMode() {\n        return this.getMode() === 'edit';\n    }\n    isViewMode() {\n        return this.getMode() === 'view';\n    }\n}\nwindow.QForms.RowFormController = RowFormController;\n","class TableFormController extends FormController {\n    constructor(model, parent) {\n        super(model, parent);\n        this.state = {\n            updated: Date.now()\n        };\n        this.grid = null;\n    }\n    getViewClass() {\n        return super.getViewClass() || TableFormView;\n    }\n    init() {\n        super.init();\n        // this.parent.on('hide', this.onHidePage);\n        // this.parent.on('show', this.onShowPage);\n        this.model.on('refresh', this.onModelRefresh);\n        this.model.on('update' , this.onModelUpdate);\n        this.model.on('delete' , this.onModelDelete);\n        this.model.on('insert' , this.onModelInsert);\n    }\n    deinit() {\n        // this.parent.off('hide', this.onHidePage);\n        // this.parent.off('show', this.onShowPage);\n        this.model.off('refresh', this.onModelRefresh);\n        this.model.off('update' , this.onModelUpdate);\n        this.model.off('delete' , this.onModelDelete);\n        this.model.off('insert' , this.onModelInsert);\n        super.deinit();\n    }\n    onGridCreate = grid => {\n        this.grid = grid;\n    }\n    onNewClick = async e => {\n        console.log('TableFormController.onNewClick');\n        await this.new();\n    }\n    onRefreshClick = async e => {\n        console.log('TableFormController.onRefreshClick', this.model.getFullName());\n        await this.model.refresh();\n        // console.error('refresh error handler:', err.message);\n        // alert(err.message);\n    }\n    onDeleteClick = async e => {\n        console.log('TableFormController.onDeleteClick', this.model.getFullName(), this.grid.getActiveRowKey());\n        const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n        if (result) {\n            await this.model.getDefaultDataSource().delete(this.grid.getActiveRowKey());\n        }\n    }\n    onGridCellDblClick = async (row, key) => {\n        // console.log('TableFormController.onGridCellDblClick', row);\n        // const bodyCell = e.bodyCell;\n        // const row = bodyCell.bodyRow.dbRow;\n        // console.log('row:', row);\n        // const key = this.model.getDefaultDataSource().getRowKey(row);\n        // console.log('key:', key);\n        switch (this.model.getAttr('editMethod')) {\n            // case 'table':\n            //     this.grid.gridColumns[bodyCell.qFieldName].beginEdit(bodyCell);\n            // break;\n            case 'form':\n                if (this.getPage().getModel().isSelectMode()) {\n                    await this.getPage().selectRow(key);\n                } else {\n                    await this.edit(key);\n                }\n            break;\n        }\n    }\n    onGridLinkClick = async key => {\n        console.log('TableFormController.onGridLinkClick', key);\n        await this.edit(key);\n    }\n    onGridDeleteKeyDown = async (row, key) => {\n        console.log('TableFormController.onGridDeleteKeyDown', row, key);\n        if (this.getModel().getAttr('deleteRowMode') !== 'disabled') {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure});\n            if (result) {\n                await this.model.getDefaultDataSource().delete(key);\n            }\n        }\n    }\n    /*onHidePage = async () => {\n        this.grid.saveScroll();\n    }*/\n    /*onShowPage = async () => {\n        console.log('TableFormController.onShowPage', this.model.getFullName());\n        if (!this.grid.isHidden()) {\n            this.grid.restoreScroll();\n            this.grid.focus();\n            // console.log('document.activeElement:', document.activeElement);\n        }\n    }*/\n    async new() {\n        if (this.model.getAttr('newRowMode') === 'oneclick') {\n            const row = {};\n            this.model.fillDefaultValues(row);\n            await this.model.getDefaultDataSource().insert(row);\n        } else if (this.model.getAttr('newRowMode') === 'editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemEditPage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            await this.openPage({\n                name   : this.model.getAttr('itemCreatePage'),\n                newMode: true,\n                modal  : true\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick editform') {\n            if (!this.model.getAttr('itemEditPage')) {\n                throw new Error(`[${this.model.getFullName()}] itemEditPage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } else if (this.model.getAttr('newRowMode') === 'oneclick createform') {\n            if (!this.model.getAttr('itemCreatePage')) {\n                throw new Error(`[${this.model.getFullName()}] itemCreatePage is empty`);\n            }\n            const row = {};\n            this.model.fillDefaultValues(row);\n            const result = await this.model.getDefaultDataSource().insert(row);\n            const database = this.model.getDefaultDataSource().getAttr('database');\n            const table = this.model.getDefaultDataSource().getAttr('table');\n            const [key] = result[database][table].insert;\n            await this.openPage({\n                name : this.model.getAttr('itemCreatePage'),\n                // key  : key,\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        }\n    }\n    async edit(key) {\n        // console.log('TableForm.edit', this.model.getFullName(), key);\n        if (!this.model.getAttr('itemEditPage')) {\n            throw new Error(`${this.model.getFullName()}: itemEditPage is empty`);\n        }\n        try {\n            await this.openPage({\n                name : this.model.getAttr('itemEditPage'),\n                modal: true,\n                params: {\n                    ...DataSource.keyToParams(key)\n                }\n            });\n        } catch (err) {\n            // console.error(`${this.model.getFullName()}: edit form error handler:`, err);\n            // alert(`${this.model.getFullName()}: ${err.message}`);\n            err.message = `${this.model.getFullName()} edit: ${err.message}`;\n            throw err;\n        }\n    }\n    onModelRefresh = async e => {\n        console.log('TableFormController.onModelRefresh', this.model.getFullName(), e);\n        if (!this.view) return;\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelInsert = async e => {\n        console.log('TableFormController.onModelInsert', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid && e.source) {\n            for (const key of e.inserts) {\n                this.grid.setActiveRowKey(key);\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelUpdate = async e => {\n        console.log('TableFormController.onModelUpdate', this.model.getFullName(), e, this.view);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key in e.updates) {\n                if (this.grid.getActiveRowKey() === key) {\n                    const newKey = e.updates[key];\n                    if (key !== newKey) {\n                        this.grid.setActiveRowKey(newKey);\n                    }\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n    onModelDelete = async e => {\n        console.log('TableFormController.onModelDelete', this.model.getFullName(), e);\n        if (!this.view) return;\n        if (this.grid) {\n            for (const key of e.deletes) {\n                if (this.grid.getActiveRowKey() === key) {\n                    this.grid.setActiveRowKey(null);\n                }\n            }\n        }\n        this.invalidate();\n        await this.rerender();\n    }\n\n    onGridSelectionChange = async key => {\n        // console.log('TableFormController.onGridSelectionChange', key);\n        this.invalidate();\n        await this.getPage().rerender();\n    }\n    getActiveRow() {\n        const key = this.grid.getActiveRowKey();\n        if (!key) throw new Error(`${this.model.getFullName()}: no active row key`);\n        return this.model.getDefaultDataSource().getRow(key);\n    }\n    isRowSelected = () => {\n        // console.log('TableFormController.isRowSelected');\n        return !!this.grid && !!this.grid.getActiveRowKey();\n    }\n    onFrameChanged = async value => {\n        // console.log('TableFormController.onFrameChanged', parseInt(value));\n        const frame = parseInt(value);\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n    onNextClick = async () => {\n        console.log('TableFormController.onNextClick');\n        const frame = this.model.getDefaultDataSource().getFrame() + 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        await this.rerender();\n    }\n\n    onPreviousClick = async () => {\n        console.log('TableFormController.onPreviousClick');\n        const frame = this.model.getDefaultDataSource().getFrame() - 1;\n        this.model.getDefaultDataSource().setFrame(frame);\n        this.model.getDefaultDataSource().refresh();\n        this.rerender();\n    }\n    canPrev() {\n        return this.model.getDefaultDataSource().getFrame() > 1;\n    }\n    canNext() {\n        const ds = this.model.getDefaultDataSource();\n        return ds.getFrame() < ds.getFramesCount();\n    }\n    getSelectedRowKey() {\n        return this.grid ? this.grid.getActiveRowKey() : null;\n    }\n    isActionEnabled(name) {\n        return this.isRowSelected();\n    }\n}\nwindow.QForms.TableFormController = TableFormController;\n","class PageController extends ModelController {\n    constructor(model, parent, id) {\n        //console.log('PageController.constructor', model);\n        super(model, parent);\n        if (!id) throw new Error('no id');\n        this.id = id;\n        this.forms = [];\n    }\n\n    static create(model, parent, id, options) {\n        // console.log('PageController.create', model.getName());\n        const CustomClass = FrontHostApp.getClassByName(`${model.getName()}PageController`);\n        const Class = CustomClass ? CustomClass : PageController;\n        return new Class(model, parent, id, options);\n    }\n\n    init() {\n        for (const form of this.model.forms) {\n            const ctrl = FormController.create(form, this);\n            ctrl.init();\n            this.forms.push(ctrl);\n        }\n    }\n\n    deinit() {\n        console.log('PageController.deinit: ' + this.model.getFullName());\n        for (const form of this.forms) {\n            form.deinit();\n        }\n        super.deinit();\n    }\n\n    onSaveAndCloseClick = async () => {\n        console.log('PageController.onSaveAndCloseClick');\n        this.validate();\n        if (this.isValid()) {\n            try {\n                this.getApp().getView().disableRerender();\n                await this.getModel().update();\n                console.log('page model updated', this.getModel().getFullName());\n            } finally {\n                this.getApp().getView().enableRerender();\n            }\n            await this.getApp().closePage(this);\n            if (this.getModel().getOptions().onClose) {\n                this.getModel().getOptions().onClose();\n            }\n        } else {\n            await this.rerender();\n        }\n    }\n\n    onClosePageClick = async e => {\n        console.log('PageController.onClosePageClick', this.getModel().getFullName());\n        await this.close();\n    }\n\n    onOpenPageClick = async e => {\n        const name = this.getModel().getName();\n        const key = this.getModel().getKey();\n        const link = this.createOpenInNewLink(name, key);\n        // console.log('link', link);\n        window.open(link, '_blank');\n    }\n    createOpenInNewLink(name, key) {\n        return PageController.createLink({\n            page: name,\n            ...DataSource.keyToParams(key)\n        });\n    }\n    async close() {\n        // console.log('PageController.close', this.model.getFullName());\n        const changed = this.isChanged();\n        // console.log('changed:', changed);\n        // const valid = this.isValid();\n        // console.log('valid:', valid);\n        if (this.model.hasRowFormWithDefaultSqlDataSource() && changed) {\n            const result = await this.getApp().confirm({message: this.model.getApp().getText().form.areYouSure})\n            if (!result) return;\n        }\n        await this.getApp().closePage(this);\n        if (this.getModel().getOptions().onClose) {\n            this.getModel().getOptions().onClose();\n        }\n    }\n    validate() {\n        for (const form of this.forms) {\n            if (form instanceof RowFormController) {\n                form.validate();\n            }\n        }\n    }\n    isValid() {\n        // console.log('PageController.isValid', this.model.getFullName());\n        for (const form of this.forms) {\n            if (!form.isValid()) {\n                return false;\n            }\n        }\n        return true;\n    }\n    async onFormChange(e) {\n        // console.log('PageController.onFormChange', this.model.getFullName());\n        this.rerender();\n    }\n    onFormDiscard(formController) {\n        console.log('PageController.onFormDiscard', this.model.getFullName());\n        this.rerender();\n    }\n\n    onFormUpdate(e) {\n        console.log('PageController.onFormUpdate:', this.model.getFullName(), e);\n        this.rerender();\n    }\n\n    onFormInsert(e) {\n        console.log('PageController.onFormInsert:', this.model.getFullName());\n        // console.log('hasNew:', this.model.hasNew());\n        for (const form of this.forms) {\n            form.invalidate();\n        }\n        this.rerender();\n    }\n\n    async openPage(options) {\n        if (!options.params) {\n            options.params = {};\n        }\n        const params =  this.getModel().getParams();\n        for (const name in params) {\n            if (!options.params[name]) {\n                options.params[name] = params[name];\n            }\n        }\n        return await this.getApp().openPage(options);\n    }\n\n    isChanged() {\n        // console.log('PageController.isChanged', this.model.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged()) {\n                // console.log(`FORM CHANGED: ${form.model.getFullName()}`);\n                return true;\n            }\n        }\n        return false;\n    }\n    getApp() {\n        return this.parent;\n    }\n    getViewClass() {\n        return super.getViewClass() || PageView;\n    }\n    static createLink(params = null) {\n        // const query = window.location.search.split('?')[1];\n        // console.log('query:', query);\n        if (params) {\n            return [\n                window.location.pathname,\n                [\n                    // ...(query ? query.split('&') : []),\n                    ...(ApplicationController.isDebugMode() ? ['debug=1'] : []),\n                    ...Object.keys(params).map(name => `${name}=${encodeURI(params[name])}`)\n                ].join('&')\n            ].join('?');\n        }\n        return window.location.pathname;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.model.getName() === name);\n    }\n    async onActionClick(name) {\n        console.log('PageController.onActionClick', name);\n    }\n    onKeyDown = async e => {\n        // console.log('PageController.onKeyDown', this.getModel().getFullName(), e);\n        if (e.key === 'Escape') {\n            if (this.isModal()) {\n                await this.close();\n            }\n        }\n    }\n    getTitle() {\n        const model = this.getModel();\n        const key = model.getKey();\n        let keyPart;\n        if (key) {\n            const arr = JSON.parse(key);\n            if (arr.length === 1 && typeof arr[0] === 'number') {\n                keyPart = `#${arr[0]}`;\n            } else {\n                keyPart = `${key}`;\n            }\n        }\n        return [\n            model.getCaption(),\n            ...(ApplicationController.isDebugMode() ? [`(${this.getId()})`] : []),\n            ...(keyPart ? [keyPart] : [])\n        ].join(' ');\n    }\n    getSelectedRowKey() {\n        for (const form of this.forms) {\n            const selectedRowKey = form.getSelectedRowKey();\n            if (selectedRowKey) return selectedRowKey;\n        }\n        return null;\n    }\n    onSelectClick = async e => {\n        console.log('PageController.onSelectClick');\n        await this.selectRow(this.getSelectedRowKey());\n    }\n    onResetClick = async e => {\n        console.log('PageController.onResetClick');\n        await this.selectRow(null);\n    }\n    async selectRow(key) {\n        console.log('PageController.selectRow', key);\n        await this.close();\n        await this.getModel().getOptions().onSelect(key);\n    }\n    invalidate() {\n        this.forms.forEach(form => form.invalidate());\n    }\n    getId() {\n        return this.id;\n    }\n    isModal() {\n        return this.getModel().isModal();\n    }\n    isAutoFocus() {\n        for (const form of this.forms) {\n            if (form.isAutoFocus()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\nwindow.QForms.PageController = PageController;\n","class Model extends EventEmitter {\n    constructor(data, parent) {\n        if (!data.name) throw new Error(`${data.class} no name`);\n        super();\n        this.data     = data;\n        this.parent   = parent;\n        this.deinited = false;\n    }\n    init() {\n    }\n    deinit() {\n        if (this.deinited) throw new Error(`${this.getFullName()}: model already deinited`);\n        this.deinited = true;\n    }\n    static getAttr(data, name) {\n        return data[name];\n    }\n    static getCol(data, name) {\n        return data[name];\n    }\n    static getName(data) {\n        return Model.getAttr(data, 'name');\n    }\n    static getClassName(data) {\n        return Model.getAttr(data, 'class');\n    }\n    isAttr(name) {\n        // return this.data[name] !== undefined;\n        return this.data.hasOwnProperty(name);\n    }\n    getAttr(name) {\n        return this.data[name];\n    }\n    getCol(name) {\n        return this.data[name];\n    }\n    getClassName() {\n        return this.getAttr('class');\n    }\n    getName() {\n        return this.getAttr('name');\n    }\n    getFullName() {\n        if (this.parent) {\n            return `${this.parent.getFullName()}.${this.getName()}`;\n        }\n        return this.getName();\n    }\n    getCaption() {\n        return this.getAttr('caption');\n    }\n    getDataSource(name) {\n        return this.dataSources.find(dataSource => dataSource.getName() === name);\n    }\n    createDataSources() {\n        for (const data of this.data.dataSources) {\n            try {\n                const Class = FrontHostApp.getClassByName(data.class);\n                if (!Class) throw new Error(`no class ${data.class} class`);\n                const dataSource = new Class(data, this);\n                dataSource.init();\n                this.dataSources.push(dataSource);\n            } catch (err) {\n                err.message = `${this.getFullName()}.${data.name}: ${err.message}`;\n                throw err;\n            }\n        }\n    }\n    deinitDataSources() {\n        for (const dataSource of this.dataSources) {\n            dataSource.deinit();\n        }\n    }\n    hasActions() {\n        return this.data.actions.length > 0;\n    }\n    getParent() {\n        return this.parent;\n    }\n    getData() {\n        return this.data;\n    }\n}\nwindow.QForms.Model = Model;\n","class Application extends Model {\n    constructor(data) {\n        super(data);\n        this.databases   = [];\n        this.dataSources = [];\n    }\n\n    init() {\n        // console.log('Application.init');\n        if (!this.data.theme) throw new Error('no theme attr');\n\n        // databases\n        for (const data of this.data.databases) {\n            const database = new Database(data, this);\n            database.init();\n            this.addDatabase(database);\n        }\n\n        // data sources\n        this.createDataSources();\n    }\n\n    deinit() {\n        this.deinitDataSources();\n        // TODO: add deinit on opened pages\n        super.deinit();\n    }\n\n    addDatabase(database) {\n        this.databases.push(database);\n    }\n\n    async logout() {\n        const data = await this.request({\n            'action': 'logout'\n        });\n        this.emit('logout', {source: this});\n    }\n\n    async request(options) {\n        // console.warn('Application.request', data);\n        const start = Date.now();\n        const [headers, body] = await FrontHostApp.doHttpRequest2(options);\n        if (!headers['qforms-platform-version']) throw new Error('no qforms-platform-version header');\n        if (!headers['qforms-app-version']) throw new Error('no qforms-app-version header');\n        this.emit('request', {\n            time: Date.now() - start,\n            remotePlatformVersion: headers['qforms-platform-version'],\n            remoteAppVersion: headers['qforms-app-version']\n        });\n        return body;\n    }\n\n    getDatabase(name) {\n        // console.log('Application.getDatabase', name);\n        const database = this.databases.find(database => database.getName() === name);\n        if (!database) throw new Error(`no database: ${name}`);\n        return database;\n    }\n\n    getText() {\n        return this.data.text;\n    }\n    getUser() {\n        return this.data.user;\n    }\n    getDomain() {\n        return this.data.domain;\n    }\n    getVirtualPath() {\n        return this.data.virtualPath;\n    }\n    async rpc(name, params) {\n        console.log('Application.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.request({\n            uuid  : this.getAttr('uuid'),\n            action: 'rpc',\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    emitResult(result, source = null) {\n        console.log('Application.emitResult', result, source);\n        const promises = [];\n        for (const database in result) {\n            promises.push(...this.getDatabase(database).emitResult(result[database], source));\n        }\n        // console.log('promises:', promises);\n        return Promise.allSettled(promises);\n    }\n    getNodeEnv() {\n        return this.data.nodeEnv;\n    }\n}\nwindow.QForms.Application = Application;\n","class Column  extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        if (!this.getAttr('type')) throw new Error(`column ${this.getFullName()}: no type`);\n        if (!['string', 'number', 'boolean', 'object', 'date'].includes(this.getAttr('type'))) {\n            throw new Error(`${this.getFullName()}: wrong column type: ${this.getAttr('type')}`);\n        }\n    }\n    init() {\n        // console.log('Column.init', this.getFullName());\n    }\n    getType() {\n        return this.getAttr('type');\n    }\n}\nwindow.QForms.Column = Column;\n","class DataSource extends Model {\n\n    constructor(data, parent) {\n        super(data, parent);\n        this.rows      = null;\n        this.rowsByKey = null;\t\t\t\t\t\t// for row search by key\n        this.news      = [];                        // new rows\n        this.changes   = new Map();\n    }\n\n    init() {\n        // console.log('DataSource.init', this.getFullName(), this.getClassName());\n        this.setRows(this.data.rows);\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.on('insert' , this.onTableInsert);\n            table.on('update' , this.onTableUpdate);\n            table.on('delete' , this.onTableDelete);\n            table.on('refresh', this.onTableRefresh);\n        }\n    }\n\n    deinit() {\n        if (this.getAttr('table')) {\n            const table = this.getTable();\n            table.off('insert' , this.onTableInsert);\n            table.off('update' , this.onTableUpdate);\n            table.off('delete' , this.onTableDelete);\n            table.off('refresh', this.onTableRefresh);\n        }\n        super.deinit();\n    }\n\n    setRows(rows) {\n        this.rows = rows;\n        this.fillRowsByKey();\n    }\n\n    addRow(row) {\n        this.rows.push(row);\n        const key = this.getRowKey(row);\n        this.rowsByKey[key] = row;\n    }\n\n    addRows(rows) {\n        for (let i = 0; i < rows.length; i++) {\n            this.rows.push(rows[i]);\n        }\n        this.fillRowsByKey();\n    }\n\n    getRowsLength() {\n        return this.rows.length;\n    }\n\n    fillRowsByKey() {\n        // console.log('DataSource.fillRowsByKey', this.getFullName())\n        this.rowsByKey = {};\n        for (let i = 0; i < this.rows.length; i++) {\n            const row = this.rows[i];\n            const key = this.getRowKey(row);\n            this.rowsByKey[key] = row;\n        }\n        // console.log('this.rowsByKey:', this.getFullName(), this.rowsByKey);\n    }\n\n    // deinit() {\n    //     console.log('DataSource.deinit', this.getFullName());\n    //     super.deinit();\n    // }\n\n    getType(column) {\n        // console.log('DataSource.getType', this.getClassName(), column);\n        throw new Error('DataSource column type not implemented');\n    }\n\n    discardRowColumn(row, column) {\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            delete this.changes.get(row)[column];\n        }\n    }\n\n    changeRowColumn(row, column, newValue) {\n        if (!this.changes.has(row)) this.changes.set(row, {});\n        this.changes.get(row)[column] = newValue;\n    }\n\n    setValue(row, column, value) {\n        // console.log('DataSource.setValue', this.getFullName(), column, value, typeof value);\n        if (value === undefined) throw new Error(`${this.getFullName()}: undefined is wrong value for data source`);\n        if (typeof value === 'object' && value !== null) {\n            throw new Error(`setValue: ${this.getFullName()}.${column}: object must be in JSON format`);\n        }\n        if (row[column] !== value) {\n            this.changeRowColumn(row, column, value);\n            if (row[column] === undefined && value === null) {  // workaround for new rows\n                this.discardRowColumn(row, column);\n            }\n        } else {\n            this.discardRowColumn(row, column);\n        }\n        if (this.changes.has(row) && !Object.keys(this.changes.get(row)).length) this.changes.delete(row);\n        // console.log('changes:', this.changes);\n    }\n\n    isChanged() {\n        // console.log('DataSource.isChanged', this.getFullName(), this.changes.size);\n        return !!this.changes.size;\n    }\n\n    hasNew() {\n        return !!this.news.length;\n    }\n\n    isRowColumnChanged(row, column) {\n        // console.log('DataSource.isRowColumnChanged', this.getFullName());\n        return row[column] !== this.getValue(row, column);\n    }\n\n    getValue(row, column) {\n        // console.log('DataSource.getValue', column);\n        let value;\n        if (this.changes.has(row) && this.changes.get(row)[column] !== undefined) {\n            value = this.changes.get(row)[column];\n        } else {\n            value = row[column];\n        }\n        if (value !== undefined && typeof value !== 'string') {\n            throw new Error(`getValue: ${this.getFullName()}.${column}: object must be in JSON format, value: ${value}`);\n        }\n        // console.log('DataSource.getValue:', value);\n        return value;\n    }\n\n    getKeyValues(row) {\n        return this.data.keyColumns.reduce((key, column) => {\n            key[column] = JSON.parse(row[column]);\n            return key;\n        }, {});\n    }\n\n    getRowKey(row) {\n        // console.log('DataSource.getRowKey', row);\n        const arr = [];\n        for (const column of this.data.keyColumns) {\n            if (row[column] === undefined) return null;\n            if (row[column] === null) throw new Error('wrong value null for data source value');\n            try {\n                const value = JSON.parse(row[column]);\n                arr.push(value);\n            } catch (err) {\n                console.log('getRowKey: cannot parse: ', row[column]);\n                throw err;\n            }\n        }\n        return JSON.stringify(arr);\n    }\n\n    removeRow(key) {\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key} to remove`);\n        const i = this.rows.indexOf(row);\n        if (i === -1) throw new Error(`${this.getFullName()}: no row with i ${i} to remove`);\n        this.rows.splice(i, 1);\n        delete this.rowsByKey[key];\n    }\n\n    newRow(row) {\n        console.log('DataSource.newRow', this.getFullName(), row);\n        if (this.rows.length > 0) {\n            throw new Error('rows can be added to empty data sources only in new mode');\n        }\n        this.news.push(row);\n    }\n\n    getSingleRow(withChanges = false) {\n        if (this.news[0]) return this.news[0];\n        const row = this.rows[0];\n        if (!row) throw new Error('no single row');\n        if (withChanges) return this.getRowWithChanges(row);\n        return row;\n    }\n\n    getForm() {\n        return this.parent instanceof Form ? this.parent : null;\n    }\n\n    getPage() {\n        if (this.parent instanceof Page) return this.parent;\n        if (this.parent instanceof Form) return this.parent.getPage();\n        return null;\n    }\n\n    getApp() {\n        if (this.parent instanceof Application) return this.parent;\n        return this.parent.getApp();\n    }\n\n    /*getNamespace() {\n        if (this.parent instanceof Form) {\n            return this.parent.getPage().getName() + '.' + this.parent.getName() + '.' + this.getName();\n        }\n        if (this.parent instanceof Page) {\n            return this.parent.getName() + '.' + this.getName();\n        }\n        return this.getName();\n    }*/\n\n    getRow(key) {\n        return this.rowsByKey[key] || null;\n    }\n\n    /*getRowByKey(key) {\n        return this.rowsByKey[key] || null;\n    }*/\n\n    getRows() {\n        return this.rows;\n    }\n\n    getRowByIndex(i) {\n        return this.rows[i];\n    }\n\n    discard() {\n        console.log('DataSource.discard', this.getFullName());\n        if (!this.isChanged()) throw new Error(`no changes in data source ${this.getFullName()}`);\n        this.changes.clear();\n    }\n\n    static keyToParams(key, paramName = 'key') {\n        if (typeof key !== 'string') throw new Error('key not string');\n        const params = {};\n        const arr = JSON.parse(key);\n        if (arr.length === 1) {\n            params[paramName] = arr[0];\n        } else  if (arr.length > 1) {\n            for (let i = 0; i < arr.length; i++) {\n                params[`${paramName}${i + 1}`] = arr[i];\n            }\n        } else {\n            throw new Error(`invalid key: ${key}`);\n        }\n        return params;\n    }\n\n    getChangesByKey() {\n        const changes = {};\n        for (const row of this.changes.keys()) {\n            changes[this.getRowKey(row)] = this.changes.get(row);\n        }\n        return changes;\n    }\n\n    getRowWithChanges(row) {\n        if (this.changes.has(row)) {\n            return {...row, ...this.changes.get(row)};\n        }\n        return row;\n    }\n\n    hasNewRows() {\n        return this.news.length > 0;\n    }\n\n    static copyNewValues(row, newValues) {\n        for (const name in newValues) {\n            row[name] = newValues[name];\n        }\n    }\n\n    updateRow(key, newValues) {\n        console.log('DataSource.updateRow', this.getFullName(), key, newValues);\n        if (!key) throw new Error('no key');\n        const row = this.getRow(key);\n        if (!row) throw new Error(`${this.getFullName()}: no row with key ${key}`);\n        const newKey = this.getRowKey(newValues);\n        DataSource.copyNewValues(row, newValues);// copy new values to original row object\n        if (key !== newKey) {\n            delete this.rowsByKey[key];\n            this.rowsByKey[newKey] = row;\n        }\n        // console.log(`key: ${key} to ${newKey}`);\n        // console.log('this.rowsByKey:', this.rowsByKey);\n        // console.log('this.data.rows:', this.data.rows);\n    }\n\n    getTable() {\n        if (!this.getAttr('table')) throw new Error(`${this.getFullName()}: table attr empty`);\n        return this.getDatabase().getTable(this.getAttr('table'));\n    }\n\n    getDatabase() {\n        // console.log('DataSource.getDatabase', this.getFullName(), this.getAttr('database'));\n        if (!this.getAttr('database')) throw new Error(`${this.getFullName()}: database attr empty`);\n        return this.getApp().getDatabase(this.getAttr('database'));\n    }\n\n    getType(columnName) {\n        // console.log('DataSource.getType', columnName);\n        const type = this.getTable().getColumn(columnName).getType();\n        // console.log('type:', type);\n        return type;\n    }\n\n    async insert() {\n        console.log('DataSource.insert', this.news);\n        if (!this.news.length) throw new Error('no new rows to insert');\n        const inserts = [];\n        for (const row of this.news) {\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            DataSource.copyNewValues(row, newValues);\n            // console.log('row:', row);\n            const key = this.getRowKey(row);\n            if (!key) throw new Error('invalid insert row, no key');\n            // console.log('key:', key);\n            inserts.push(key);\n        }\n        this.changes.clear();\n        for (const row of this.news) {\n            this.addRow(row);\n        }\n        this.news = [];\n        console.log('rows:', this.getRows());\n        console.log('inserts:', inserts);\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert({source: this, inserts});\n        }\n        this.emit('insert', {source: this, inserts});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {insert: inserts}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async delete(key) {\n        console.log('DataSource.delete', key);\n        if (!key) throw new Error('no key');\n        this.removeRow(key);\n\n        // events\n        const deletes = [key];\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete({source: this, deletes});\n        }\n        this.emit('delete', {source: this, deletes});\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (database && table) {\n            const result = {[database]: {\n                    [table]: {delete: deletes}\n                }};\n            await this.getApp().emitResult(result, this);\n            return result;\n        }\n        return null;\n    }\n\n    async update() {\n        console.log('DataSource.update', this.getFullName());\n        if (this.news.length) {\n            await this.insert();\n            return;\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n        const changes = this.getChangesByKey();\n        // console.log('changes:', changes);\n\n        // apply changes to rows\n        const updates = {};\n        for (const key in changes) {\n            // console.log('key:', key);\n            const row = this.getRow(key);\n            // console.log('row:', row);\n            const newValues = this.getRowWithChanges(row);\n            // console.log('newValues:', newValues);\n            const newKey = this.getRowKey(newValues);\n            // console.log('newKey:', newKey);\n            this.updateRow(key, newValues);\n            updates[key] = newKey;\n        }\n        this.changes.clear();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate({source: this, updates});\n        }\n        this.emit('update', {source: this, updates});\n\n        const database = this.getAttr('database');\n        const table    = this.getAttr('table');\n        if (database && table) {\n            const reuslt = {[database]: {\n                    [table]: {\n                        update: updates\n                    }\n                }};\n            await this.getApp().emitResult(reuslt, this);\n            return reuslt;\n        }\n        return null;\n    }\n\n    onTableInsert = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableInsert', this.getFullName(), e);\n        if (!e.inserts.length) throw new Error(`${this.getFullName()}: no inserts`);\n\n        for (const key of e.inserts) {\n            if (this.getRow(key)) {\n                console.log('rows:', this.rows);\n                console.log('rowsByKey:', this.rowsByKey);\n                throw new Error(`${this.getFullName()}: row already in this data source: ${key}`);\n            }\n            const newValues = e.source.getRow(key);\n            const newRow = {};\n            DataSource.copyNewValues(newRow, newValues);\n            // console.log('newRow:', newRow);\n            this.addRow(newRow);\n        }\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableUpdate = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableUpdate', this.getFullName(), e);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n        for (const key in e.updates) {\n            if (this.getRow(key)) {\n                const newKey = e.updates[key];\n                const sourceRow = e.source.getRow(newKey);\n                this.updateRow(key, sourceRow);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableDelete = async e => {\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self update', this.getFullName());\n            return;\n        }\n        console.log('DataSource.onTableDelete', this.getFullName(), e);\n        if (!e.deletes.length) throw new Error(`${this.getFullName()}: no deletes`);\n        for (const key of e.deletes) {\n            if (this.getRow(key)) {\n                this.removeRow(key);\n            }\n        }\n\n        // events\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        throw new Error('DataSource.onTableRefresh: not implemented');\n    }\n\n    isSurrogate() {\n        return this.isAttr('database');\n    }\n\n    moveRow(row, offset) {\n        console.log('DataSource.moveRow');\n        Helper.moveArrItem(this.rows, row, offset);\n\n        // refresh event\n        const event = {source: this};\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh(event);\n        }\n        this.emit('refresh', event);\n    }\n\n}\nwindow.QForms.DataSource = DataSource;\n","class SqlDataSource extends DataSource {\n    constructor(data, parent) {\n        super(data, parent);\n        this.frame  = 1;\n        this.count  = data.count !== undefined ? data.count : null;\n        this.lastFrame = 1;\n    }\n\n    /*init() {\n        super.init();\n    }*/\n\n    /*deinit() {\n        super.deinit();\n    }*/\n\n    async insert(row) {\n        console.log('SqlDataSource.insert', row);\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to insert');\n\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: 'insert',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            row   : this.getRowWithChanges(row),\n        });\n\n        // key & values\n        const [key] = Object.keys(result[database][table].insertEx);\n        if (!key) throw new Error('no inserted row key');\n        const values = result[database][table].insertEx[key];\n        for (const column in values) {\n            row[column] = values[column];\n        }\n        // console.log('key:', key);\n        // console.log('row:', row);\n\n        // clear news & changes\n        this.news.splice(this.news.indexOf(row), 1);\n        // console.log('this.news:', this.news);\n        this.changes.clear();\n\n        // add new row to rows\n        this.addRow(row);\n\n        // events\n        const event = {source : this, inserts: result[database][table].insert};\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(event);\n        }\n        this.emit('insert', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    async update() {\n        console.log('SqlDataSource.update', this.getFullName());\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (table === '') throw new Error('no data source table to update');\n        if (this.news[0]) {\n            return await this.insert(this.news[0]);\n        }\n        if (!this.changes.size) throw new Error(`no changes: ${this.getFullName()}`);\n\n        // specific to SqlDataSource\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action : 'update',\n            page   : this.getForm().getPage().getName(),\n            form   : this.getForm().getName(),\n            changes: this.getChangesByKey(),\n        });\n\n\n        const [key] = Object.keys(result[database][table].updateEx);\n        if (!key) throw new Error('no updated row');\n        const newValues = result[database][table].updateEx[key];\n        // const newKey = this.getRowKey(newValues);\n\n        this.changes.clear();\n        this.updateRow(key, newValues);\n\n        // events\n        const event = {source: this, updates: result[database][table].update};\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(event);\n        }\n        this.emit('update', event);\n        await this.getApp().emitResult(result, this);\n        return result;\n    }\n\n    async delete(key) {\n        console.log('SqlDataSource.delete:', this.getFullName(), key);\n        if (!key) throw new Error('no key');\n        const database = this.getAttr('database');\n        const table = this.getAttr('table');\n        if (!table) {\n            throw new Error(`no table in SqlDataSource: ${this.getFullName()}`);\n        }\n        const result = await this.getApp().request({\n            uuid   : this.getApp().getAttr('uuid'),\n            action: '_delete',\n            page  : this.getForm().getPage().getName(),\n            form  : this.getForm().getName(),\n            params: {key},\n        });\n        await this.refill();\n\n        // events\n        const event = {source: this, deletes: result[database][table].delete};\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(event);\n        }\n        this.emit('delete', event);\n        await this.getApp().emitResult(result, this);\n\n        return result;\n    }\n\n    onTableUpdate = async e => {\n        console.log('SqlDataSource.onTableUpdate', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableUpdate`);\n        if (e.source === this) {\n            // console.error('onTableUpdate stop self update', this.getFullName());\n            return;\n        }\n        // console.log('updates:', e.updates);\n        if (!Object.keys(e.updates).length) throw new Error(`${this.getFullName()}: no updates`);\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceUpdate) {\n            this.parent.onDataSourceUpdate(e);\n        }\n        this.emit('update', e);\n    }\n\n    onTableInsert = async (e) => {\n        console.log('SqlDataSource.onTableInsert', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableInsert`);\n        if (e.source === this) {\n            // console.error('onTableInsert stop self insert', this.getFullName());\n            return;\n        }\n\n        // update rows\n        await this.refill();\n\n        // events\n        if (this.parent.onDataSourceInsert) {\n            this.parent.onDataSourceInsert(e);\n        }\n        this.emit('insert', e);\n    }\n\n    onTableDelete = async (e) => {\n        console.log('SqlDataSource.onTableDelete', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source === this) {\n            // console.error('onTableDelete stop self delete', this.getFullName());\n            return;\n        }\n        await this.refill();\n        if (this.parent.onDataSourceDelete) {\n            this.parent.onDataSourceDelete(e);\n        }\n        this.emit('delete', e);\n    }\n\n    onTableRefresh = async e => {\n        console.log('SqlDataSource.onTableRefresh', this.getFullName(), e);\n        if (this.deinited) throw new Error(`${this.getFullName()}: this data source deinited for onTableDelete`);\n        if (e.source) throw new Error('refresh is foreign result so source must be null');\n        await this.refill();\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh(e);\n        }\n        this.emit('refresh', e);\n    }\n\n    getPageParams() {\n        const page = this.getPage();\n        return page ? page.getParams() : {};\n    }\n\n    async refresh() {\n        console.log('SqlDataSource.refresh', this.getFullName());\n        await this.refill();\n        if (this.parent.onDataSourceRefresh) {\n            this.parent.onDataSourceRefresh({source: this});\n        }\n    }\n\n    async refill() {\n        console.log('SqlDataSource.refill', this.getFullName());\n        if (this.isChanged()) throw new Error(`cannot refill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame : this.frame} : {});\n        this.count = data.count;\n        this.setRows(data.rows);\n        this.lastFrame = 1;\n    }\n\n    async fill(frame) {\n        if (this.isChanged()) throw new Error(`cannot fill changed data source: ${this.getFullName()}`);\n        const data = await this.select(this.getLimit() ? {frame} : {});\n        this.count = data.count;\n        this.addRows(data.rows);\n    }\n\n    async more() {\n        if (!this.hasMore()) throw new Error(`${this.getFullName()}: no more rows`);\n        this.lastFrame++;\n        await this.fill(this.lastFrame);\n    }\n\n    async select(params = {}) {\n        console.log('SqlDataSource.select', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action        : 'select',\n            page          : page ? page.getName()           : null,\n            form          : form ? form.getName()           : null,\n            ds            : this.getName(),\n            params        : {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!(data.rows instanceof Array)) throw new Error('rows must be array');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }\n\n    /*async selectSingle(params = {}) {\n        console.log('SqlDataSource.selectSingle', this.getFullName(), params);\n        const page = this.getPage();\n        const form = this.getForm();\n        const data = await this.getApp().request({\n            action: 'selectSingle',\n            page  : page ? page.getName()           : null,\n            form  : form ? form.getName()           : null,\n            ds    : this.getName(),\n            params: {\n                ...this.getPageParams(),\n                ...params,\n            }\n        });\n        if (!data.row) throw new Error('selectSingle must return row');\n        // if (data.time) console.log(`select time of ${this.getFullName()}:`, data.time);\n        return data;\n    }*/\n\n    getFramesCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        if (this.count === 0) return 1;\n        if (this.getLimit()) return Math.ceil(this.count / this.getLimit());\n        return 1;\n    }\n    getLimit() {\n        if (this.getAttr('limit')) return parseInt(this.getAttr('limit'));\n        return null;\n    }\n    getCount() {\n        if (this.count === null) throw new Error(`${this.getFullName()}: no count info`);\n        return this.count;\n    }\n    getFrame() {\n        return this.frame;\n    }\n    getLastFrame() {\n        return this.lastFrame;\n    }\n    setFrame(frame) {\n        this.frame = frame;\n    }\n    hasMore() {\n        return this.lastFrame < this.getFramesCount();\n    }\n}\nwindow.QForms.SqlDataSource = SqlDataSource;\n","class Database extends Model {\n    constructor(...args) {\n        super(...args);\n        this.tables = [];\n    }\n\n    init() {\n        // console.log('Database.init', this.getName());\n        for (const data of this.data.tables) {\n            const table = new Table(data, this);\n            table.init();\n            this.addTable(table);\n        }\n    }\n\n    addTable(table) {\n        this.tables.push(table);\n    }\n\n    getTable(name) {\n        const table = this.tables.find(table => table.getName() === name);\n        if (!table) throw new Error(`${this.getFullName()}: no table with name: ${name}`);\n        return table;\n    }\n\n    emitResult(result, source = null) {\n        console.log('Database.emitResult');\n        const promises = [];\n        for (const table in result) {\n            promises.push(...this.getTable(table).emitResult(result[table], source));\n        }\n        return promises;\n    }\n}\nwindow.QForms.Database = Database;\n","class Field extends Model {\n    // constructor(data, parent) {\n    //     super(data, parent);\n    // }\n\n    init() {\n    }\n\n    replaceThis(value) {\n        return value.replace(/\\{([@\\w\\.]+)\\}/g, (text, name) => {\n            if (name.indexOf('.') === -1) return text;\n            let arr = name.split('.');\n            if (arr[0] === 'this') arr[0] = this.getPage().getName();\n            return `{${arr.join('.')}}`;\n        });\n    }\n\n    fillDefaultValue(row) {\n        // console.log('Field.fillDefaultValue', this.getFullName());\n        const column = this.getAttr('column');\n        if (!column) return;\n        const defaultValue = this.replaceThis(this.getAttr('defaultValue'));\n        const js = Helper.templateToJsString(defaultValue, this.getPage().getParams());\n        if (typeof js !== 'string') throw new Error(`${this.getFullName()}: defaultValue must be templated to js string`);\n        // console.log('js', this.getFullName(), js);\n        try {\n            const value = eval(js);\n            if (value !== undefined) {\n                row[column] = this.valueToRaw(value);\n            }\n        } catch (err) {\n            throw new Error(`[${this.getFullName()}] fillDefaultValue: ${err.toString()}`);\n        }\n    }\n\n    valueToPageParams(row) {\n        // console.log('Field.valueToPageParams', this.getFullName());\n        if (this.isParam()) {\n            // we need to dump value to param without meta info such as timezone prop\n            const value = this.getValue(row);\n            const rawValue = this.valueToRaw(value);\n            // console.log('value:', value);\n            // console.log('rawValue:', rawValue);\n            const paramValue = rawValue !== undefined ? Helper.decodeValue(rawValue) : undefined;\n            this.getPage().setParam(this.getFullName(), paramValue);\n        }\n    }\n\n    isChanged(row) {\n        // console.log('Field.isChanged', this.getFullName());\n        if (!this.getAttr('column')) throw new Error(`${this.getFullName()}: field has no column`);\n        return this.getDefaultDataSource().isRowColumnChanged(row, this.getAttr('column'));\n    }\n\n    hasColumn() {\n        return !!this.getAttr('column');\n    }\n\n    getValue(row) {\n        // console.log('Field.getValue', this.getFullName(), row);\n        if (!row && this.parent instanceof RowForm) {\n            row = this.parent.getRow();\n        }\n        if (!row) {\n            throw new Error(`${this.getFullName()}: need row`);\n        }\n        let rawValue;\n        if (this.getAttr('column')) {\n            rawValue = this.getRawValue(row);\n        } else if (this.getAttr('value')) {\n            const js = this.getAttr('value');\n            try {\n                rawValue = eval(js);\n            } catch (err) {\n                console.error(err);\n                throw new Error(`${this.getFullName()}: value eval error: ${err.message}`);\n            }\n        } else {\n            throw new Error(`${this.getFullName()}: no column and no value in field`);\n        }\n\n        // use rawValue\n        if (rawValue === undefined) return undefined;\n        if (rawValue === null) throw new Error(`[${this.getFullName()}]: null is wrong raw value`);\n        try {\n            return this.rawToValue(rawValue);\n        } catch (err) {\n            console.log('raw value decode error:', this.getFullName(), rawValue);\n            throw err;\n        }\n    }\n\n    setValue(row, value) {\n        // console.log('Field.setValue', this.getFullName(), value);\n        if (!this.getAttr('column')) throw new Error(`field has no column: ${this.getFullName()}`);\n        const rawValue = this.valueToRaw(value);\n        this.getForm().getDefaultDataSource().setValue(row, this.getAttr('column'), rawValue);\n        this.valueToPageParams(row);\n    }\n\n    rawToValue(rawValue) {\n        return Helper.decodeValue(rawValue);\n    }\n\n    valueToRaw(value) {\n        return Helper.encodeValue(value);\n    }\n\n    getRawValue(row) {\n        if (!this.hasColumn()) throw new Error(`${this.getFullName()}: no column`);\n        return this.getForm().getDefaultDataSource().getValue(row, this.getAttr('column'));\n    }\n\n    getDefaultDataSource() {\n        return this.getForm().getDefaultDataSource();\n    }\n\n    getType() {\n        if (this.getAttr('type')) {\n            return this.getAttr('type');\n        }\n        if (this.getAttr('column')) {\n            const dataSource = this.getDefaultDataSource();\n            if (dataSource.isSurrogate()) {\n                return dataSource.getType(this.getAttr('column'));\n            }\n            throw new Error('field type empty');\n        }\n        throw new Error('field type and column empty');\n    }\n\n    getForm() {\n        return this.parent;\n    }\n\n    getPage() {\n        return this.parent.parent;\n    }\n\n    getApp() {\n        return this.parent.parent.parent;\n    }\n\n    isReadOnly() {\n        return this.data.readOnly === 'true';\n    }\n    isNotNull() {\n        return this.data.notNull === 'true';\n    }\n    isNullable() {\n        return this.data.notNull === 'false';\n    }\n    getWidth() {\n        const width = parseInt(this.data.width);\n        if (isNaN(width)) return null;\n        if (width === 0) return 100;\n        return width;\n    }\n    getFullName() {\n        return `${this.getPage().getName()}.${this.getForm().getName()}.${this.getName()}`;\n    }\n    isParam() {\n        return this.data.param === 'true';\n    }\n    validateOnChange() {\n        if (this.data.validateOnChange !== undefined) {\n            return this.data.validateOnChange === 'true';\n        }\n        return true;\n    }\n    validateOnBlur() {\n        if (this.data.validateOnBlur !== undefined) {\n            return this.data.validateOnBlur === 'true';\n        }\n        return false;\n    }\n    getCaption() {\n        const caption = this.getAttr('caption');\n        if (caption === '') {\n            const columnName = this.getAttr('column');\n            if (columnName && this.parent.hasDefaultSqlDataSource()) {\n                const ds = this.parent.getDataSource('default');\n                if (ds.getAttr('table')) {\n                    const column = ds.getTable().getColumn(columnName);\n                    return column.getCaption();\n                }\n            }\n        }\n        return caption;\n    }\n}\nwindow.QForms.Field = Field;\n","class CheckBoxField extends Field {\n\n}\nwindow.QForms.CheckBoxField = CheckBoxField;\n","class CheckBoxListField extends Field {\n\n    getDisplayValue(row) {\n        let value = null;\n        if (row[this.data.displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[this.data.displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[this.data.displayColumn]);\n                throw err;\n            }\n        } else {\n            value = this.data.displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        if (!row[this.data.valueColumn]) {\n            throw new Error('no valueColumn in CheckBoxList data source');\n        }\n        return Helper.decodeValue(row[this.data.valueColumn]);\n    }\n\n    getDataSource() {\n        const name = this.data.dataSourceName;\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        }\n        if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        }\n        if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        throw new Error(`${this.getFullName()}: no data source: ${name}`);\n    }\n\n    findRowByRawValue(rawValue) {\n        return this.getDataSource().getRows().find(row => row[this.data.valueColumn] === rawValue);\n    }\n}\nwindow.QForms.CheckBoxListField = CheckBoxListField;\n","class ComboBoxField extends Field {\n\n    getDisplayValue(row) {\n        let value = null;\n        if (row[this.data.displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[this.data.displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[this.data.displayColumn]);\n                throw err;\n            }\n        } else {\n            value = this.data.displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        if (!row[this.data.valueColumn]) {\n            throw new Error('no valueColumn in ComboBox data source');\n        }\n        return Helper.decodeValue(row[this.data.valueColumn]);\n    }\n\n    getComboBoxDataSource() {\n        const name = this.data.dataSourceName;\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        }\n        if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        }\n        if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        throw new Error(`${this.getFullName()}: no data source: ${name}`);\n    }\n\n    findRowByRawValue(rawValue) {\n        return this.getComboBoxDataSource().getRows().find(row => row[this.data.valueColumn] === rawValue);\n    }\n}\nwindow.QForms.ComboBoxField = ComboBoxField;\n","class DateField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n\n    rawToValue(raw) {\n        // console.log('DateField.rawToValue', this.getFullName(), raw);\n        const value = Helper.decodeValue(raw);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addTimezoneOffset(value);\n        }\n        // console.log('DateField.rawToValue:', raw, value);\n        return value;\n    }\n\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = Helper.cloneDate(value);\n            Helper.removeTimezoneOffset(v);\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateField = DateField;\n","class DateTimeField extends Field {\n    getFormat() {\n        return this.getAttr('format');\n    }\n    rawToValue(rawValue) {\n        const value = Helper.decodeValue(rawValue);\n        if (value && this.getAttr('timezone') === 'false') {\n            Helper.addTimezoneOffset(value);\n        }\n        // console.log('DateTimeField.rawToValue:', value);\n        return value;\n    }\n    valueToRaw(value) {\n        let rawValue;\n        if (value && this.getAttr('timezone') === 'false') {\n            const v = Helper.cloneDate(value);\n            Helper.removeTimezoneOffset(v);\n            // console.log('date without timezone:', v);\n            rawValue = Helper.encodeValue(v);\n        } else {\n            rawValue = Helper.encodeValue(value);\n        }\n        // console.log('DateTimeField.valueToRaw', rawValue);\n        return rawValue;\n    }\n}\nwindow.QForms.DateTimeField = DateTimeField;\n","class FileField extends Field {\n}\nwindow.QForms.FileField = FileField;\n","class ImageField extends Field {\n}\nwindow.QForms.ImageField = ImageField;\n","class LabelField extends Field {\n}\nwindow.QForms.LabelField = LabelField;\n","class LinkField extends Field {\n}\nwindow.QForms.LinkField = LinkField;\n","class PasswordField extends Field {\n\n}\nwindow.QForms.PasswordField = PasswordField;\n","class PhoneField extends Field {\n}\nwindow.QForms.PhoneField = PhoneField;\n","class RadioField extends Field {\n    getDisplayValue(row) {\n        const displayColumn = this.getAttr('displayColumn');\n        let value = null;\n        if (row[displayColumn]) {\n            try {\n                value = Helper.decodeValue(row[displayColumn]);\n            } catch (err) {\n                console.log('cannot parse:', row[displayColumn]);\n                throw err;\n            }\n        } else {\n            value = displayColumn;\n            value = value.replace(/\\{([\\w\\.]+)\\}/g, (text, name) => {\n                return row.hasOwnProperty(name) ? (row[name] || '') : text;\n            });\n        }\n        return value;\n    }\n\n    getValueValue(row) {\n        const valueColumn = this.getAttr('valueColumn');\n        if (!row[valueColumn]) {\n            throw new Error('no valueColumn in ComboBox data source');\n        }\n        return Helper.decodeValue(row[valueColumn]);\n    }\n\n    getDataSource() {\n        const name = this.getAttr('dataSourceName');\n        if (!name) throw new Error(`${this.getFullName()}: no dataSourceName`);\n        if (this.getForm().getDataSource(name)) {\n            return this.getForm().getDataSource(name);\n        }\n        if (this.getPage().getDataSource(name)) {\n            return this.getPage().getDataSource(name);\n        }\n        if (this.getApp().getDataSource(name)) {\n            return this.getApp().getDataSource(name);\n        }\n        throw new Error(`${this.getFullName()}: no data source: ${name}`);\n    }\n\n    findRowByRawValue(rawValue) {\n        const valueColumn = this.getAttr('valueColumn');\n        return this.getDataSource().getRows().find(row => row[valueColumn] === rawValue);\n    }\n}\n","class TextAreaField extends Field {\n    getRows() {\n        return this.data.rows;\n    }\n    getCols() {\n        return this.data.cols;\n    }\n}\nwindow.QForms.TextAreaField = TextAreaField;\n","class TextBoxField extends Field {\n\n}\nwindow.QForms.TextBoxField = TextBoxField;\n","class TimeField extends Field {\n\n}\nwindow.QForms.TimeField = TimeField;\n","class Form extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.dataSources = [];\n        this.fields      = [];\n    }\n\n    init() {\n        // data sources\n        this.createDataSources();\n\n        // fields\n        for (const data of this.data.fields) {\n            const Class = FrontHostApp.getClassByName(data.class);\n            if (!Class) throw new Error(`no class ${data.class} class`);\n            const field = new Class(data, this);\n            field.init();\n            this.fields.push(field);\n        }\n    }\n\n    deinit() {\n        // console.log('Form.deinit:', this.getFullName());\n        this.deinitDataSources();\n        for (const field of this.fields) {\n            field.deinit();\n        }\n        super.deinit();\n    }\n\n    fillDefaultValues(row) {\n        for (const field of this.fields) {\n            field.fillDefaultValue(row);\n        }\n    }\n\n    onDataSourceRefresh(e) {\n        // console.log('Form.onDataSourceRefresh', this.getFullName());\n        this.emit('refresh', e);\n    }\n\n    onDataSourceInsert(e) {\n        // console.log('Form.onDataSourceInsert', this.getFullName());\n        this.parent.onFormInsert(e);\n        this.emit('insert', e);\n    }\n\n    onDataSourceUpdate(e) {\n        // console.log('Form.onDataSourceUpdate', this.getFullName());\n        this.emit('update', e);\n    }\n\n    onDataSourceDelete(e) {\n        // console.log('Form.onDataSourceDelete', this.getFullName());\n        this.emit('delete', e);\n    }\n\n    async update() {\n        console.log('Form.update', this.getFullName(), this.isChanged());\n        if (this.getPage().deinited) throw new Error('page already deinited');\n        if (!this.isChanged() && !this.getDefaultDataSource().hasNewRows()) throw new Error(`form model not changed or does not have new rows: ${this.getFullName()}`);\n        await this.getDefaultDataSource().update();\n    }\n\n    isChanged() {\n        // console.log('Form.isChanged', this.getFullName());\n        return this.getDefaultDataSource().isChanged();\n    }\n\n    hasNew() {\n        // console.log('Form.hasNew', this.getFullName());\n        return this.getDefaultDataSource().hasNew();\n    }\n\n    async rpc(name, params) {\n        console.log('Form.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result = await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getPage().getName(),\n            form  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n\n    getKey() {\n        return null;\n    }\n\n    getDefaultDataSource() {\n        const dataSource = this.getDataSource('default');\n        if (!dataSource) throw new Error(`${this.getFullName()}: no default data source`);\n        return dataSource;\n    }\n\n    getPage() {\n        return this.parent;\n    }\n\n    getApp() {\n        return this.parent.parent;\n    }\n    async refresh() {\n        await this.getDefaultDataSource().refresh();\n    }\n    getField(name) {\n        return this.fields.find(field => field.getName() === name);\n    }\n    hasDefaultSqlDataSource() {\n        return this.getDefaultDataSource().getClassName() === 'SqlDataSource';\n    }\n    decodeRow(row) {\n        const values = {};\n        for (const field of this.fields) {\n            const column = field.getAttr('column');\n            if (column) {\n                values[column] = field.getValue(row);\n            }\n        }\n        return values;\n    }\n}\nwindow.QForms.Form = Form;\n","class RowForm extends Form {\n    init() {\n        super.init();\n        if (this.isNewMode()) {\n            this.getDefaultDataSource().newRow(this.createRow());\n        }\n        this.fillParams(this.getRow()); // dump row values to page params\n    }\n\n    isNewMode() {\n        const newMode = this.getAttr('newMode');\n        if (newMode ===  'true') return  true;\n        if (newMode === 'false') return false;\n        return this.getPage().isNewMode();\n    }\n\n    fillParams(row) {\n        for (const field of this.fields) {\n            field.valueToPageParams(row);\n        }\n    }\n\n    onDataSourceUpdate(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceUpdate(e);\n    }\n\n    onDataSourceInsert(e) {\n        this.fillParams(this.getRow());\n        super.onDataSourceInsert(e);\n    }\n\n    getRow(withChanges) {\n        return this.getDefaultDataSource().getSingleRow(withChanges);\n    }\n\n    getKey() {\n        // console.log('RowForm.getKey', this.getFullName());\n        const dataSource = this.getDefaultDataSource();\n        if (dataSource.getClassName() === 'SqlDataSource') {\n            const row = this.getRow();\n            return dataSource.getRowKey(row);\n        }\n        return null;\n    }\n\n    createRow() {\n        const row = {};\n        this.fillDefaultValues(row);\n        return row;\n    }\n\n    discard(fields) {\n        console.log('RowForm.discard', fields);\n        if (this.getDefaultDataSource().isChanged()) {\n            this.getDefaultDataSource().discard();\n            fields.forEach(name => {\n                this.getField(name).valueToPageParams(this.getRow())\n            });\n        }\n    }\n\n}\nwindow.QForms.RowForm = RowForm;\n","class TableForm extends Form {\n\n}\nwindow.QForms.TableForm = TableForm;\n","class Page extends Model {\n    constructor(data, parent, options) {\n        // console.log('Page.constructor', options);\n        // if (!options.id) throw new Error('no page id');\n        super(data, parent);\n        this.options     = options; // {id, modal, newMode, selectMode, params}\n        this.dataSources = [];\n        this.forms       = [];\n        this.params      = {};\n        if (options.onCreate) {\n            options.onCreate(this);\n        }\n    }\n\n    init() {\n        this.createDataSources();\n        this.createForms();\n        console.log('page options:', this.options);\n        console.log('page params:', this.getParams());\n    }\n\n    deinit() {\n        // console.log('Page.deinit', this.getFullName());\n        if (this.deinited) throw new Error(`page ${this.getFullName()} is already deinited`);\n        this.deinitDataSources();\n        this.deinitForms();\n        super.deinit();\n    }\n\n    getOptions() {\n        return this.options;\n    }\n\n    createForms() {\n        // forms\n        for (const data of this.data.forms) {\n            const FormClass = FrontHostApp.getClassByName(Model.getClassName(data));\n            const form = new FormClass(data, this);\n            form.init();\n            this.forms.push(form);\n        }\n    }\n\n    deinitForms() {\n        for (const form of this.forms) {\n            form.deinit();\n        }\n    }\n\n    /*getId() {\n        return this.options.id;\n    }*/\n\n    getParams() {\n        return {\n            ...(this.options.params || {}),\n            ...this.params,\n        };\n    }\n\n    setParam(name, value) {\n        // console.log('Page.setParam', name);\n        this.params[name] = value !== undefined ? value : null;\n    }\n\n    async update() {\n        console.log('Page.update', this.getFullName());\n        for (const form of this.forms) {\n            if (form.isChanged() || form.hasNew()) {\n                await form.update();\n            }\n        }\n    }\n\n    discard() {\n        console.log('Page.discard', this.getFullName());\n        for (const form of this.forms) {\n            form.discard();\n        }\n    }\n\n    getKey() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm') {\n                return form.getKey();\n            }\n        }\n        return null;\n    }\n\n    hasRowFormWithDefaultDs() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.getDefaultDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowFormWithDefaultSqlDataSource() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.hasDefaultSqlDataSource()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasRowForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'RowForm' && form.getAttr('visible') === 'true') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    hasTableForm() {\n        for (const form of this.forms) {\n            if (form.getClassName() === 'TableForm' && form.getAttr('visible') === 'true') {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    isNewMode() {\n        return !!this.options.newMode;\n    }\n\n    hasNew() {\n        for (const form of this.forms) {\n            if (form.hasNew()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getApp() {\n        return this.parent;\n    }\n\n    isModal() {\n        return !!this.options.modal;\n    }\n\n    onFormInsert(e) {\n        console.log('Page.onFormInsert', e);\n        for (const key of e.inserts) {\n            const keyParams = DataSource.keyToParams(key);// key params to page params\n            for (const name in keyParams) {\n                this.setParam(name, keyParams[name]);\n            }\n        }\n    }\n    async rpc(name, params) {\n        // console.log('Page.rpc', this.getFullName(), name, params);\n        if (!name) throw new Error('no name');\n        const result =  await this.getApp().request({\n            uuid  : this.getApp().getAttr('uuid'),\n            action: 'rpc',\n            page  : this.getName(),\n            name  : name,\n            params: params\n        });\n        if (result.errorMessage) throw new Error(result.errorMessage);\n        return result;\n    }\n    getForm(name) {\n        return this.forms.find(form => form.getName() === name);\n    }\n    isSelectMode() {\n        return !!this.options.selectMode;\n    }\n}\nwindow.QForms.Page = Page;\n","class Table extends Model {\n    constructor(data, parent) {\n        super(data, parent);\n        this.columns = [];\n    }\n    init() {\n        // console.log('Table.init', this.getFullName());\n        for (const data of this.data.columns) {\n            const column = new Column(data, this);\n            column.init();\n            this.addColumn(column);\n        }\n    }\n    addColumn(column) {\n        this.columns.push(column);\n    }\n    getColumn(name) {\n        const column = this.columns.find(column => column.getName() === name);\n        if (!column) throw new Error(`table ${this.getFullName()}: no column ${name}`);\n        return column;\n    }\n    emitResult(result, source = null) {\n        console.log('Table.emitResult');\n        return [\n            ...(result.insert  ? [this.emitInsert(source, result.insert)] : []),\n            ...(result.update  ? [this.emitUpdate(source, result.update)] : []),\n            ...(result.delete  ? [this.emitDelete(source, result.delete)] : []),\n            ...(result.refresh ? [this.emitRefresh(source              )] : [])\n        ];\n    }\n    emitInsert(source, inserts) {\n        return this.emit('insert', {source, inserts});\n    }\n    emitUpdate(source, updates) {\n        return this.emit('update', {source, updates});\n    }\n    emitDelete(source, deletes) {\n        return this.emit('delete', {source, deletes});\n    }\n    emitRefresh(source) {\n        return this.emit('refresh', {source});\n    }\n}\nwindow.QForms.Table = Table;\n"]}