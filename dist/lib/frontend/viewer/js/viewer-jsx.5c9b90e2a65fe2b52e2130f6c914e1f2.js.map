{"version":3,"sources":["Controller/View.jsx","Controller/AlertController/View.jsx","Controller/ConfirmController/View.jsx","Controller/LoginController/View.jsx","Controller/ModalController/ImageDialogController/View.jsx","Controller/ModelController/ModelView.jsx","Controller/ModelController/ApplicationController/ApplicationView.jsx","Controller/ModelController/FieldController/FieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormCheckBoxFieldController/RowFormCheckBoxFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormComboBoxFieldController/RowFormComboBoxFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateFieldController/RowFormDateFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormDateTimeFieldController/RowFormDateTimeFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormFileFieldController/RowFormFileFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormImageFieldController/RowFormImageFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormLinkFieldController/RowFormLinkFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormPasswordFieldController/RowFormPasswordFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormPhoneFieldController/RowFormPhoneFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextAreaFieldController/RowFormTextAreaFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormTextBoxFieldController/RowFormTextBoxFieldView.jsx","Controller/ModelController/FieldController/RowFormFieldController/RowFormTimeFieldController/RowFormTimeFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormCheckBoxFieldController/TableFormCheckBoxFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormComboBoxFieldController/TableFormComboBoxFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateFieldController/TableFormDateFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormDateTimeFieldController/TableFormDateTimeFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormLinkFieldController/TableFormLinkFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormPhoneFieldController/TableFormPhoneFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextAreaFieldController/TableFormTextAreaFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormTextBoxFieldController/TableFormTextBoxFieldView.jsx","Controller/ModelController/FieldController/TableFormFieldController/TableFormTimeFieldController/TableFormTimeFieldView.jsx","Controller/ModelController/FormController/FormView.jsx","Controller/ModelController/FormController/RowFormController/RowFormView.jsx","Controller/ModelController/FormController/TableFormController/TableFormView.jsx","Controller/ModelController/PageController/PageView.jsx"],"names":["View","ReactComponent","constructor","props","super","ctrl","Error","this","name","onCreate","getCtrl","AlertView","el","React","createRef","getHeaderStyle","options","titleStyle","render","createElement","className","getCssClassNames","ref","tabIndex","onKeyDown","getCssBlockName","style","title","onClick","onCloseClick","CloseIcon2","message","Button","classList","onOkButtonClick","componentDidMount","getElement","focus","ConfirmView","yesButton","noButton","onYesClick","LoginView","_defineProperty","e","document","querySelector","disabled","errMsgRef","current","innerHTML","renderLogo","renderTitle","getFrontHostApp","getData","method","onSubmit","onLoginFormSubmit","type","value","JSON","stringify","Date","getTimezoneOffset","TextBox","placeholder","getText","login","username","required","autoFocus","spellCheck","onChange","Password","password","errMsg","signIn","ImageDialogView","console","log","src","getSrc","ModelView","getActionsForDropdownButton","getModel","getCol","map","data","actionName","Model","getName","renderActionIcon","key","getAttr","enabled","isActionEnabled","model","isAttr","getStyle","window","QForms","ApplicationView","renderActivePage","activePage","renderView","getViewClass","parent","onViewCreate","renderModals","modals","PageController","Modal","getId","renderHeader","Menu","items","getMenuItemsProp","onMenuItemClick","renderMain","renderFooter","Statusbar","onStatusbarCreate","getFullName","FieldView","row","getViewStyle","RowFormFieldView","widget","getWidget","getClassList","isChanged","getErrorMessage","RowFormCheckBoxFieldView","CheckBox","onWidgetCreate","checked","getValueForWidget","readOnly","isEditable","RowFormComboBoxFieldView","args","widgetValue","rerender","isCreateButtonVisible","getForm","getMode","Select","nullable","getItems","getPlaceholder","onMouseDown","onItemSelect","getValue","onEditButtonClick","onCreateButtonClick","RowFormDateFieldView","DropdownDatePicker","format","getFormat","oldDates","getMinDate","RowFormDateTimeFieldView","widget2","setState","onChange2","isCloseVisible","state","undefined","renderDatePart","highlightedDate","getHighlightedDate","renderTimePart","TimeBox","onView2Create","getValueForTime","onBlur","onBlur2","getPlaceholder2","onCloseDown","CloseIcon","TimeIcon","getRow","RowFormFileFieldView","file","target","files","Helper","readFileAsDataURL","app","getApp","imageDialogCtrl","ImageDialogController","id","getNewId","onClose","getPage","getView","openModal","image","div","getImage","getDiv","updateSize","ns","getNaturalSize","innerText","Image","onImageClick","formatNumber","length","onClearClick","setTimeout","componentDidUpdate","prevProps","prevState","snapshot","RowFormImageFieldView","RowFormLinkFieldView","href","RowFormPasswordFieldView","addCssClass","removeCssClass","isAutoFocus","autocomplete","getAutocomplete","onFocus","onIconClick","VisibilityIcon","VisibilityOffIcon","RowFormPhoneFieldView","PhoneBox","PhoneIcon","RowFormTextAreaFieldView","TextArea","rows","getRows","cols","getCols","RowFormTextBoxFieldView","RowFormTimeFieldView","TableFormFieldView","span","getSpanOffsetWidth","offsetWidth","TableFormCheckBoxFieldView","TableFormComboBoxFieldView","TableFormDateFieldView","TableFormDateTimeFieldView","TableFormLinkFieldView","TableFormPhoneFieldView","formatPhoneNumber","TableFormTextAreaFieldView","TableFormTextBoxFieldView","TableFormTimeFieldView","FormView","li","dataset","action","onActionClick","getActiveRow","err","alert","checkParent","shouldComponentUpdate","nextProps","nextState","updated","RowFormView","renderToolbar","text","hasDefaultSqlDataSource","onEditClick","visible","EditIcon","form","edit","changed","hasNew","valid","onSaveClick","SaveIcon","save","getKey","onCancelClick","CancelIcon","cancel","isValid","onDiscardClick","discard","onRefreshClick","RefreshIcon","refresh","isActionsVisible","hasActions","DropdownButton","actions","onActionsClick","isActionsEnabled","MoreVertIcon","renderLabel","fieldCtrl","getCaption","isNotNull","color","renderField","renderError","Tooltip","position","hidden","tip","renderItem","renderGrid","Object","keys","fields","filter","getField","isVisible","TableFormView","column","onUnmount","createLink","page","DataSource","keyToParams","dataSource","getDefaultDataSource","newRowMode","onNewClick","AddIcon","new","deleteRowMode","onDeleteClick","isRowSelected","DeleteIcon","delete","refreshButton","renderPaging","getRowsLength","getLimit","getCount","canPrev","onPreviousClick","LeftIcon","size","ComboBox","getFrame","toString","onFrameChanged","Array","getFramesCount","fill","val","i","canNext","onNextClick","RightIcon","getGridColumns","field","width","getWidth","getGridExtraColumn","getGridClass","Grid","onGridCreate","columns","getRowKey","onDoubleClick","onGridCellDblClick","onDeleteKeyDown","onGridDeleteKeyDown","onSelectionChange","onGridSelectionChange","onLinkClick","onGridLinkClick","renderGridCellView","getUpdated","extraColumn","selectedKey","getOptions","createLinkCallback","PageView","renderForm","formCtrl","renderRowForms","getRowForms","getTitle","hasRowFormWithDefaultSqlDataSource","selectMode","onSelectClick","getSelectedRowKey","DoneIcon","select","isModal","onSaveAndCloseClick","saveAndClose","isToolbar","renderTableForms","tableForms","getTableForms","Tab","tabs","getTabs","content","forms","getClassName","renderOpenPageHeaderButton","onOpenPageClick","OpenInNewIcon","renderClosePageHeaderButton","onClosePageClick","hasRowForm","hasTableForm","height","error"],"mappings":"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","file":"viewer-jsx.5c9b90e2a65fe2b52e2130f6c914e1f2.js","sourcesContent":["class View extends ReactComponent {\n    constructor(props) {\n        super(props);\n        if (!props.ctrl) throw new Error(`${this.constructor.name}: no ctrl`);\n        if (!props.onCreate) throw new Error(`${this.constructor.name}: no onCreate`);\n    }\n    getCtrl() {\n        return this.props.ctrl;\n    }\n}\n","class AlertView extends View {\n    constructor(props) {\n        super(props);\n        this.el = React.createRef();\n    }\n    getHeaderStyle() {\n        return this.getCtrl().options.titleStyle/* || {color: 'red'}*/;\n    }\n    render() {\n        return (\n            <div className={this.getCssClassNames()}\n                 ref={this.el}\n                 tabIndex={0}\n                 onKeyDown={this.getCtrl().onKeyDown}\n            >\n                <div className={`${this.getCssBlockName()}__container`}>\n                    <div className={`${this.getCssBlockName()}__content flex-column`}>\n                        <div className={`${this.getCssBlockName()}__header`}>\n                            <div className={`${this.getCssBlockName()}__title`} style={this.getHeaderStyle()}>\n                                {this.getCtrl().options.title || 'Alert'}\n                            </div>\n                            <div className={`${this.getCssBlockName()}__close`} onClick={this.getCtrl().onCloseClick}>\n                                <CloseIcon2/>\n                            </div>\n                        </div>\n                        <div className={`${this.getCssBlockName()}__main flex-max`}>\n                            {this.getCtrl().options.message}\n                        </div>\n                        <div className={`${this.getCssBlockName()}__footer`}>\n                            <Button classList={[`${this.getCssBlockName()}__ok-button`]} title={'OK'} onClick={this.getCtrl().onOkButtonClick}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    componentDidMount() {\n        this.getElement().focus();\n    }\n}\n","class ConfirmView extends View {\n    constructor(props) {\n        super(props);\n        this.el = React.createRef();\n    }\n    render() {\n        // console.log('ConfirmView.render', this.getCtrl().options);\n        if (!this.getCtrl().options.yesButton) throw new Error('no yesButton option');\n        if (!this.getCtrl().options.noButton) throw new Error('no noButton option');\n        return (\n            <div className={this.getCssClassNames()}\n                 ref={this.el}\n                 tabIndex={0}\n                 onKeyDown={this.getCtrl().onKeyDown}\n            >\n                <div className={`${this.getCssBlockName()}__container`}>\n                    <div className={`${this.getCssBlockName()}__content flex-column`}>\n                        <div className={`${this.getCssBlockName()}__header`}>\n                            <div className={`${this.getCssBlockName()}__title`} style={this.getCtrl().options.titleStyle}>\n                                {this.getCtrl().options.title || 'Confirm'}\n                            </div>\n                            <div className={`${this.getCssBlockName()}__close`} onClick={this.getCtrl().onCloseClick}>\n                                <CloseIcon2/>\n                            </div>\n                        </div>\n                        <div className={`${this.getCssBlockName()}__main flex-max`}>\n                            {this.getCtrl().options.message}\n                        </div>\n                        <div className={`${this.getCssBlockName()}__footer`}>\n                            <Button classList={[`${this.getCssBlockName()}__no-button`]}\n                                    title={this.getCtrl().options.noButton}\n                                    onClick={this.getCtrl().onCloseClick}\n                            />\n                            <Button classList={[`${this.getCssBlockName()}__yes-button`]}\n                                    title={this.getCtrl().options.yesButton}\n                                    onClick={this.getCtrl().onYesClick}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    componentDidMount() {\n        this.getElement().focus();\n    }\n}\n","class LoginView extends View {\n    constructor(props) {\n        super(props);\n        this.errMsgRef = React.createRef();\n    }\n    onLoginFormSubmit = e => {\n        // console.log('LoginView.onLoginFormSubmit');\n        document.querySelector('.LoginView__button').disabled = true;\n        // e.preventDefault();\n    }\n    renderLogo() {\n    }\n    renderTitle() {\n        return this.getCtrl().getFrontHostApp().getData().title;\n    }\n    onChange = e => {\n        this.errMsgRef.current.innerHTML = '';\n    }\n    render() {\n        // console.log('LoginView.render');\n        return <div className={`${this.getCssBlockName()}__container`}>\n            <form className={`${this.getCssBlockName()}__form`}\n                  method={'post'}\n                  onSubmit={this.onLoginFormSubmit}\n            >\n                <input type={'hidden'} name={'tzOffset'} value={JSON.stringify(new Date().getTimezoneOffset())}/>\n                <input type={'hidden'} name={'action'} value={'login'}/>\n                <div className={`${this.getCssBlockName()}__logo-title`}>\n                    <div className={`${this.getCssBlockName()}__logo`}>\n                        {this.renderLogo()}\n                    </div>\n                    <div className={`${this.getCssBlockName()}__title`}>\n                        {this.renderTitle()}\n                    </div>\n                </div>\n                <TextBox classList={[`${this.getCssBlockName()}__field`]}\n                       name={'username'}\n                       placeholder={this.getCtrl().getText().login.username}\n                       required={true}\n                       autoFocus={true}\n                       spellCheck={false}\n                       value={this.getCtrl().getFrontHostApp().getData().username || ''}\n                       onChange={this.onChange}\n                />\n                <Password classList={[`${this.getCssBlockName()}__field2`]}\n                          name={'password'}\n                          placeholder={this.getCtrl().getText().login.password}\n                          value={this.getCtrl().getFrontHostApp().getData().password || ''}\n                          onChange={this.onChange}\n                />\n                <p className={`${this.getCssBlockName()}__err-msg`} ref={this.errMsgRef}>\n                    {this.getCtrl().getFrontHostApp().getData().errMsg}\n                </p>\n                <button className={`${this.getCssBlockName()}__button`} type={'submit'}>\n                    {this.getCtrl().getText().login.signIn}\n                </button>\n            </form>\n        </div>;\n    }\n}\n","class ImageDialogView extends View {\n    constructor(props) {\n        super(props);\n        this.el = React.createRef();\n    }\n    render() {\n        console.log('ImageDialogView.render');\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}\n                    ref={this.el}\n                    tabIndex={0}\n                    onKeyDown={this.getCtrl().onKeyDown}\n        >\n            <img className={`${this.getCssBlockName()}__image`} src={ctrl.getSrc()}/>\n            <div className={`${this.getCssBlockName()}__close`} onClick={ctrl.onCloseClick}>\n                <CloseIcon2/>\n            </div>\n        </div>;\n    }\n    componentDidMount() {\n        this.getElement().focus();\n    }\n}\n","class ModelView extends View {\n    getActionsForDropdownButton() {\n        return this.props.ctrl.getModel().getCol('actions').map(data => {\n            const actionName = Model.getName(data);\n            return {\n                name : actionName,\n                title: this.renderActionIcon ? [\n                    <div key={'icon'}>{this.renderActionIcon(actionName)}</div>,\n                    <div key={'title'}>{Model.getAttr(data, 'caption')}</div>\n                ] : Model.getAttr(data, 'caption'),\n                enabled: this.getCtrl().isActionEnabled(actionName)\n            };\n        });\n    }\n    getCssBlockName() {\n        const model = this.props.ctrl.getModel();\n        if (model.isAttr('cssBlock') && model.getAttr('cssBlock')) {\n            return model.getAttr('cssBlock');\n        }\n        return super.getCssBlockName();\n    }\n    getStyle() {\n\n    }\n}\n\nwindow.QForms.ModelView = ModelView;\n","class ApplicationView extends ModelView {\n    renderActivePage() {\n        const ctrl = this.props.ctrl;\n        if (ctrl.activePage) {\n            return this.renderView(ctrl.activePage);\n        }\n    }\n    renderView(ctrl, props = {}) {\n        return React.createElement(ctrl.getViewClass(), {\n            parent  : this,\n            ctrl    : ctrl,\n            onCreate: ctrl.onViewCreate,\n            ...props\n        });\n    }\n    renderModals() {\n        return this.props.ctrl.modals.map(ctrl => {\n            if (ctrl instanceof PageController) {\n                return <Modal key={ctrl.getId()}>\n                    {this.renderView(ctrl)}\n                </Modal>;\n            }\n            return this.renderView(ctrl, {key: ctrl.getId()});\n        });\n    }\n    renderHeader() {\n        return <header className={`${this.getCssBlockName()}__header`}>\n            <Menu items={this.getCtrl().getMenuItemsProp()} onClick={this.getCtrl().onMenuItemClick}/>\n        </header>;\n    }\n    renderMain() {\n        return <main className={`${this.getCssBlockName()}__main`}>\n            {this.renderActivePage()}\n        </main>;\n    }\n    renderFooter() {\n        return <footer className={`${this.getCssBlockName()}__footer`}>\n            <Statusbar onCreate={this.getCtrl().onStatusbarCreate}/>\n        </footer>;\n    }\n    render() {\n        console.log(`${this.constructor.name}.render`, this.props.ctrl.model.getFullName());\n        return <div className={`${this.getCssBlockName()}__container`} style={this.getStyle()}>\n            {this.renderHeader()}\n            {this.renderMain()}\n            {this.renderFooter()}\n            {this.renderModals()}\n        </div>;\n    }\n}\n\nwindow.QForms.ApplicationView = ApplicationView;\n","class FieldView extends ModelView {\n    getStyle(row) {\n        return this.getCtrl().getViewStyle(row);\n    }\n}\n","class RowFormFieldView extends FieldView {\n    constructor(props) {\n        super(props);\n        this.widget = null;\n    }\n    getWidget() {\n        return this.widget;\n    }\n    getClassList() {\n        const ctrl = this.getCtrl();\n        return [\n            ...super.getClassList(),\n            ...(ctrl.isChanged()                ? ['changed'] : []),\n            ...(ctrl.getErrorMessage() !== null ? ['error']   : [])\n        ];\n    }\n    onWidgetCreate = widget => {\n        this.widget = widget;\n    }\n}\nwindow.QForms.RowFormFieldView = RowFormFieldView;\n","class RowFormCheckBoxFieldView extends RowFormFieldView {\n    render() {\n        // console.log('RowFormCheckBoxFieldView.render');\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <CheckBox\n                onCreate={this.onWidgetCreate}\n                checked={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                disabled={!ctrl.isEditable()}\n                onChange={ctrl.onChange}\n            />\n        </div>;\n    }\n}\n\nwindow.QForms.RowFormCheckBoxFieldView = RowFormCheckBoxFieldView;\n","class RowFormComboBoxFieldView extends RowFormFieldView {\n    onChange = async widgetValue => {\n        // console.log('RowFormComboBoxFieldView.onChange', widgetValue);\n        this.rerender();\n        await this.props.ctrl.onChange(widgetValue);\n    }\n    isCreateButtonVisible() {\n        if (this.getCtrl().getForm().getMode() !== 'edit') {\n            return false;\n        }\n        if (this.getCtrl().getModel().getAttr('newRowMode') === 'disabled') {\n            return false;\n        }\n        if (this.getCtrl().getModel().getAttr('newRowMode') === 'editPage') {\n            return !!this.getCtrl().getModel().getAttr('itemEditPage')\n                && !!this.getCtrl().getModel().getAttr('itemCreateForm');\n        }\n        if (this.getCtrl().getModel().getAttr('newRowMode') === 'createPage') {\n            return !!this.getCtrl().getModel().getAttr('itemCreatePage')\n                && !!this.getCtrl().getModel().getAttr('itemCreateForm');\n        }\n    }\n    render() {\n        // console.log('RowFormComboBoxFieldView.render', this.props.ctrl.getItems(), this.props.ctrl.getValue());\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={this.getCssClassNames()}>\n                <Select\n                    classList={[`${this.getCssBlockName()}__select`]}\n                    onCreate={this.onWidgetCreate}\n                    nullable={true}\n                    value={ctrl.getValueForWidget()}\n                    readOnly={!ctrl.isEditable()}\n                    onChange={this.onChange}\n                    items={ctrl.getItems()}\n                    placeholder={ctrl.getPlaceholder()}\n                    onMouseDown={ctrl.getModel().getAttr('itemSelectPage') ? ctrl.onItemSelect : null}\n                />\n                {ctrl.getModel().getAttr('itemEditPage') && !!ctrl.getValue() &&\n                    <Button\n                        classList={[`${this.getCssBlockName()}__edit-button`]}\n                        onClick={ctrl.onEditButtonClick}\n                        enabled={!!ctrl.getValue()}\n                    >...</Button>\n                }\n                {this.isCreateButtonVisible()\n                    && <Button\n                        classList={[`${this.getCssBlockName()}__create-button`]}\n                        onClick={ctrl.onCreateButtonClick}\n                    >+</Button>\n                }\n            </div>\n        );\n    }\n}\nwindow.QForms.RowFormComboBoxFieldView = RowFormComboBoxFieldView;\n","class RowFormDateFieldView extends RowFormFieldView {\n    render() {\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <DropdownDatePicker\n                classList={[`${this.getCssBlockName()}__date-picker`]}\n                onCreate={this.onWidgetCreate}\n                value={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                onChange={ctrl.onChange}\n                placeholder={ctrl.getPlaceholder()}\n                format={ctrl.getFormat()}\n                oldDates={this.props.oldDates}\n                getMinDate={this.props.getMinDate}\n            />\n        </div>;\n    }\n}\nwindow.QForms.RowFormDateFieldView = RowFormDateFieldView;\n","class RowFormDateTimeFieldView extends RowFormFieldView {\n    onCloseDown = async e => {\n        console.log('RowFormDateTimeFieldView.onCloseDown');\n        const ctrl = this.props.ctrl;\n        ctrl.widget2.setState({value: ''}, () => {\n            ctrl.onChange2(null);\n        });\n    }\n    isCloseVisible() {\n        if (this.props.readOnly) return false;\n        const ctrl = this.props.ctrl;\n        if (!ctrl.widget2) {\n            return this.props.value !== undefined;\n        }\n        return ctrl.widget2.state.value !== '';\n    }\n    renderDatePart() {\n        const ctrl = this.props.ctrl;\n        return <DropdownDatePicker\n            classList={[`${this.getCssBlockName()}__dropdown-date-picker`]}\n            onCreate={this.onWidgetCreate}\n            value={ctrl.getValueForWidget()}\n            readOnly={!ctrl.isEditable()}\n            onChange={ctrl.onChange}\n            placeholder={ctrl.getPlaceholder()}\n            format={ctrl.getFormat()}\n            oldDates={this.props.oldDates}\n            getMinDate={this.props.getMinDate}\n            highlightedDate={ctrl.getHighlightedDate ? ctrl.getHighlightedDate() : null}\n        />;\n    }\n    renderTimePart() {\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssBlockName()}__time`}>\n            <TimeBox\n                classList={[`${this.getCssBlockName()}__time-box`]}\n                onCreate={ctrl.onView2Create}\n                readOnly={!ctrl.isEditable()}\n                value={ctrl.getValueForTime()}\n                onChange={ctrl.onChange2}\n                onBlur={ctrl.onBlur2}\n                placeholder={ctrl.getPlaceholder2()}\n            />\n            <div className={`${this.getCssBlockName()}__time-close ${this.isCloseVisible() ? 'visible' : ''}`} onMouseDown={this.onCloseDown}>\n                <CloseIcon/>\n            </div>\n            <div className={`${this.getCssBlockName()}__time-icon`}>\n                <TimeIcon/>\n            </div>\n        </div>;\n    }\n    render() {\n        // console.log('RowFormDateTimeFieldView.render');\n        const ctrl = this.getCtrl();\n        const row = ctrl.getRow()\n        return <div className={`${this.getCssClassNames()} ${ctrl.state.value ? 'datetime' : 'date'}`} style={this.getStyle(row)}>\n            {this.renderDatePart()}\n            {this.renderTimePart()}\n        </div>;\n    }\n}\nwindow.QForms.RowFormDateTimeFieldView = RowFormDateTimeFieldView;\n","class RowFormFileFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.image = React.createRef();\n        this.div   = React.createRef();\n    }\n    getImage() {\n        return this.image.current;\n    }\n    getDiv() {\n        return this.div.current;\n    }\n    updateSize() {\n        if (this.getImage()) {\n            const ns = this.getImage().getNaturalSize();\n            this.getDiv().innerText = `${ns[0]}×${ns[1]}`;\n        }\n    }\n    onClearClick = e => {\n        this.props.ctrl.onChange('');\n    }\n    onChange = async e => {\n        const file = e.target.files[0];\n        const widgetValue = await Helper.readFileAsDataURL(file);\n        // console.log('widgetValue:', widgetValue);\n        this.props.ctrl.onChange(widgetValue);\n    }\n    onImageClick = async e => {\n        console.log('RowFormFileFieldView.onImageClick');\n        const ctrl = this.props.ctrl;\n        const app = ctrl.getApp();\n        const src = ctrl.getValueForWidget();\n        const imageDialogCtrl = new ImageDialogController({\n            app,\n            id: app.getNewId(),\n            src,\n            onClose: () => {\n                console.log('onClose');\n                this.getCtrl().getPage().getView().getElement().focus();\n            }\n        });\n        await app.openModal(imageDialogCtrl);\n    }\n    render() {\n        const ctrl = this.props.ctrl;\n        const row = ctrl.getRow();\n        const value = ctrl.getValueForWidget();\n        return <div className={this.getCssClassNames()} style={this.getStyle(row)}>\n            {!!value &&\n                <div>\n                    <Image ref={this.image} src={value} onClick={this.onImageClick}/>\n                    <span className=\"size\" ref={this.div}></span>\n                    <span className=\"length\">{Helper.formatNumber(value.length)}</span>\n                </div>\n            }\n            <input type=\"file\" onChange={this.onChange} disabled={!ctrl.isEditable()}/>\n            {!!value && <Button onClick={this.onClearClick} enabled={ctrl.isEditable()}>Clear</Button>}\n        </div>;\n    }\n    componentDidMount() {\n        // console.log('RowFormFileFieldView.componentDidMount', this.props.ctrl.model.getFullName());\n        setTimeout(() => this.updateSize(), 0);\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // console.log('RowFormFileFieldView.componentDidUpdate', this.props.ctrl.model.getFullName(), snapshot);\n        setTimeout(() => this.updateSize(), 0);\n    }\n}\nwindow.QForms.RowFormFileFieldView = RowFormFileFieldView;\n","class RowFormImageFieldView extends RowFormFieldView {\n    onImageClick = async e => {\n        const ctrl = this.props.ctrl;\n        console.log('RowFormImageFieldView.onImageClick');\n    }\n    render() {\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()} style={this.getStyle(ctrl.getRow())}>\n            <Image src={ctrl.getValueForWidget()}\n                   onClick={this.onImageClick}\n            />\n        </div>;\n    }\n}\nwindow.QForms.RowFormImageFieldView = RowFormImageFieldView;\n","class RowFormLinkFieldView extends RowFormFieldView {\n    render() {\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={this.getCssClassNames()}>\n                <a href={ctrl.getValueForWidget()} onClick={ctrl.onClick} target={'_blank'}>\n                    {ctrl.getValueForWidget()}\n                </a>\n            </div>\n        );\n    }\n}\nwindow.QForms.RowFormLinkFieldView = RowFormLinkFieldView;\n","class RowFormPasswordFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classList: [],\n            type: 'password'\n        };\n    }\n    onCloseClick = async e => {\n        // console.log('RowFormPasswordFieldView.onCloseClick');\n        const ctrl = this.props.ctrl;\n        this.getWidget().state.value = '';\n        this.getWidget().setState({value: ''});\n        ctrl.onChange('');\n        this.getWidget().getElement().focus();\n    }\n    isCloseVisible() {\n        // console.log('RowFormPasswordFieldView.isCloseVisible', this.props.value);\n        const ctrl = this.props.ctrl;\n        if (!ctrl.isEditable()) return false;\n        if (!this.getWidget()) {\n            return this.props.value !== undefined;\n        }\n        // console.log('this.getWidget().state.value:', this.getWidget().state.value);\n        return this.getWidget().state.value !== '';\n    }\n    onFocus = async e => {\n        // console.log('RowFormPasswordFieldView.onFocus');\n        this.addCssClass('focus');\n        await this.rerender();\n    }\n    onBlur = async e => {\n        // console.log('RowFormPasswordFieldView.onBlur');\n        this.removeCssClass('focus');\n        await this.rerender();\n    }\n    onIconClick = e => {\n        this.setState(prevState => {\n            return {\n                type: prevState.type === 'password' ? 'text' : 'password'\n            };\n        });\n    }\n    render() {\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <TextBox\n                classList={[`${this.getCssBlockName()}__input`]}\n                type={this.state.type}\n                value={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                disabled={!ctrl.isEditable()}\n                autoFocus={ctrl.isAutoFocus()}\n                placeholder={ctrl.getPlaceholder() || null}\n                autocomplete={ctrl.getAutocomplete()}\n                onCreate={this.onWidgetCreate}\n                onChange={ctrl.onChange}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n            />\n            <div className={`${this.getCssBlockName()}__close ${this.isCloseVisible() ? 'visible' : ''}`}\n                 onClick={this.onCloseClick}\n            >\n                <CloseIcon/>\n            </div>\n            <div className={`${this.getCssBlockName()}__icon`} onClick={this.onIconClick}>\n                {this.state.type === 'password' ? <VisibilityIcon/> : <VisibilityOffIcon/>}\n            </div>\n        </div>;\n    }\n}\nwindow.QForms.RowFormPasswordFieldView = RowFormPasswordFieldView;\n","class RowFormPhoneFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classList: []\n        };\n    }\n    onCloseClick = async e => {\n        const ctrl = this.getCtrl();\n        this.getWidget().state.value = '';\n        this.getWidget().setState({value: ''});\n        ctrl.onChange('');\n        this.getWidget().getElement().focus();\n    }\n    isCloseVisible() {\n        const ctrl = this.getCtrl();\n        if (!ctrl.isEditable()) return false;\n        if (!this.getWidget()) {\n            return this.props.value !== undefined;\n        }\n        // console.log('this.getWidget().state.value:', this.getWidget().state.value);\n        return this.getWidget().state.value !== '';\n    }\n    onFocus = async e => {\n        this.addCssClass('focus');\n        await this.rerender();\n    }\n    onBlur = async e => {\n        this.removeCssClass('focus');\n        await this.rerender();\n    }\n    render() {\n        console.log('RowFormPhoneFieldView.render');\n        const ctrl = this.getCtrl();\n        return <div className={this.getCssClassNames()}>\n            <PhoneBox classList={[`${this.getCssBlockName()}__input`]}\n                      value={ctrl.getValueForWidget()}\n                      readOnly={!ctrl.isEditable()}\n                      disabled={!ctrl.isEditable()}\n                      autoFocus={ctrl.isAutoFocus()}\n                      placeholder={ctrl.getPlaceholder() || null}\n                      autocomplete={ctrl.getAutocomplete()}\n                      onCreate={this.onWidgetCreate}\n                      onChange={ctrl.onChange}\n                      onFocus={this.onFocus}\n                      onBlur={this.onBlur}\n            />\n            <div className={`${this.getCssBlockName()}__close ${this.isCloseVisible() ? 'visible' : ''}`}\n                 onClick={this.onCloseClick}\n            >\n                <CloseIcon/>\n            </div>\n            <div className={`${this.getCssBlockName()}__icon`} >\n                <PhoneIcon/>\n            </div>\n        </div>;\n    }\n}\nwindow.QForms.RowFormPhoneFieldView = RowFormPhoneFieldView;\n","class RowFormTextAreaFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classList: []\n        };\n    }\n    onFocus = async e => {\n        // console.log('RowFormTextAreaFieldView.onFocus');\n        this.addCssClass('focus');\n        await this.rerender();\n    }\n    onBlur = async e => {\n        // console.log('RowFormTextAreaFieldView.onBlur');\n        this.removeCssClass('focus');\n        await this.rerender();\n    }\n    render() {\n        // console.log('RowFormTextAreaFieldView.render', this.state);\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <TextArea\n                classList={[`${this.getCssBlockName()}__textarea`]}\n                onCreate={this.onWidgetCreate}\n                value={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                disabled={!ctrl.isEditable()}\n                onChange={ctrl.onChange}\n                placeholder={ctrl.getPlaceholder()}\n                rows={ctrl.model.getRows()}\n                cols={ctrl.model.getCols()}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n            />\n        </div>;\n    }\n}\nwindow.QForms.RowFormTextAreaFieldView = RowFormTextAreaFieldView;\n","class RowFormTextBoxFieldView extends RowFormFieldView {\n    constructor(props) {\n        super(props);\n        this.state = {\n            classList: []\n        };\n    }\n    onCloseClick = async e => {\n        // console.log('RowFormTextBoxFieldView.onCloseClick');\n        const ctrl = this.props.ctrl;\n        this.getWidget().state.value = '';\n        this.getWidget().setState({value: ''});\n        ctrl.onChange('');\n        this.getWidget().getElement().focus();\n    }\n    isCloseVisible() {\n        // console.log('RowFormTextBoxFieldView.isCloseVisible', this.props.value);\n        const ctrl = this.props.ctrl;\n        if (!ctrl.isEditable()) return false;\n        if (!this.getWidget()) {\n            return this.props.value !== undefined;\n        }\n        // console.log('this.getWidget().state.value:', this.getWidget().state.value);\n        return this.getWidget().state.value !== '';\n    }\n    onFocus = async e => {\n        // console.log('RowFormTextBoxFieldView.onFocus');\n        this.addCssClass('focus');\n        await this.rerender();\n    }\n    onBlur = async e => {\n        // console.log('RowFormTextBoxFieldView.onBlur');\n        this.removeCssClass('focus');\n        await this.rerender();\n    }\n    render() {\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <TextBox\n                classList={[`${this.getCssBlockName()}__input`]}\n                value={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                disabled={!ctrl.isEditable()}\n                autoFocus={ctrl.isAutoFocus()}\n                placeholder={ctrl.getPlaceholder() || null}\n                autocomplete={ctrl.getAutocomplete()}\n                onCreate={this.onWidgetCreate}\n                onChange={ctrl.onChange}\n                onFocus={this.onFocus}\n                onBlur={this.onBlur}\n            />\n            <div className={`${this.getCssBlockName()}__close ${this.isCloseVisible() ? 'visible' : ''}`}\n                 onClick={this.onCloseClick}\n            >\n                <CloseIcon/>\n            </div>\n        </div>;\n    }\n}\nwindow.QForms.RowFormTextBoxFieldView = RowFormTextBoxFieldView;\n","class RowFormTimeFieldView extends RowFormFieldView {\n    onCloseClick = async e => {\n        console.log('RowFormTimeFieldView.onCloseClick');\n        /*const ctrl = this.props.ctrl;\n        this.getWidget().state.value = '';\n        this.getWidget().setState({value: ''});\n        ctrl.onChange(null);*/\n    }\n    isCloseVisible() {\n        // console.log('RowFormTimeFieldView.isCloseVisible', this.props.value);\n        if (this.props.readOnly) return false;\n        if (!this.getWidget()) {\n            return this.props.value !== undefined;\n        }\n        // console.log('this.getWidget().state.value:', ctrl.view.state.value);\n        return this.getWidget().state.value !== '';\n    }\n    render() {\n        const ctrl = this.props.ctrl;\n        return <div className={this.getCssClassNames()}>\n            <TimeBox\n                onCreate={this.onWidgetCreate}\n                value={ctrl.getValueForWidget()}\n                readOnly={!ctrl.isEditable()}\n                onChange={ctrl.onChange}\n                onBlur={ctrl.onBlur}\n                placeholder={ctrl.getPlaceholder()}\n            />\n            <div className={`close ${this.isCloseVisible() ? 'visible' : ''}`} onClick={this.onCloseClick}>\n                <CloseIcon/>\n            </div>\n        </div>\n    }\n}\nwindow.QForms.RowFormTimeFieldView = RowFormTimeFieldView;\n","class TableFormFieldView extends FieldView {\n    constructor(props) {\n        super(props);\n        this.span = React.createRef();\n    }\n    getSpanOffsetWidth() {\n        // console.log('TableFormFieldView.getSpanOffsetWidth', this.span.current);\n        if (!this.span.current) return 0;\n        return this.span.current.offsetWidth;\n    }\n}\nwindow.QForms.TableFormFieldView = TableFormFieldView;\n","class TableFormCheckBoxFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={this.getCssClassNames()} style={this.getStyle(row)}>\n                <CheckBox\n                    ref={this.span}\n                    checked={ctrl.getValueForWidget(row)}\n                    readOnly={true}\n                    disabled={true}\n                />\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormCheckBoxFieldView = TableFormCheckBoxFieldView;\n","class TableFormComboBoxFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n                <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormComboBoxFieldView = TableFormComboBoxFieldView;\n","class TableFormDateFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n                <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormDateFieldView = TableFormDateFieldView;\n","class TableFormDateTimeFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n                <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormDateTimeFieldView = TableFormDateTimeFieldView;\n","class TableFormLinkFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return (\n            <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n                <a href=\"#\" onClick={ctrl.onClick}>{ctrl.getValueForWidget(row)}</a>\n            </div>\n        );\n    }\n}\nwindow.QForms.TableFormLinkFieldView = TableFormLinkFieldView;\n","class TableFormPhoneFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        return <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n            <span ref={this.span}>{PhoneBox.formatPhoneNumber(this.getCtrl().getValueForWidget(row))}</span>\n        </div>;\n    }\n}\n","class TableFormTextAreaFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n            <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n        </div>;\n    }\n}\nwindow.QForms.TableFormTextAreaFieldView = TableFormTextAreaFieldView;\n","class TableFormTextBoxFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n            <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n        </div>;\n    }\n}\nwindow.QForms.TableFormTextBoxFieldView = TableFormTextBoxFieldView;\n","class TableFormTimeFieldView extends TableFormFieldView {\n    render() {\n        const row = this.props.row;\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssClassNames()} ellipsis`} style={this.getStyle(row)}>\n            <span ref={this.span}>{ctrl.getValueForWidget(row)}</span>\n        </div>;\n    }\n}\nwindow.QForms.TableFormTimeFieldView = TableFormTimeFieldView;\n","class FormView extends ModelView {\n    constructor(props) {\n        super(props);\n        this.checkParent();\n    }\n    onActionsClick = async li => {\n        // console.log('FormView.onActionsClick:', li);\n        const ctrl = this.props.ctrl;\n        const name = li.dataset.action;\n        try {\n            const result = await ctrl.onActionClick(name, ctrl.getActiveRow(true));\n            if (!result) {\n                throw new Error(`no handler for action '${name}'`);\n            }\n        } catch (err) {\n            await this.getCtrl().getApp().alert({message: err.message});\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        // console.log('FormView.shouldComponentUpdate', nextProps.updated - this.props.updated);\n        if (nextProps.updated - this.props.updated) return true;\n        return false;\n    }\n}\nwindow.QForms.FormView = FormView;\n","class RowFormView extends FormView {\n    renderToolbar() {\n        // console.log('RowFormView.renderToolbar');\n        const ctrl = this.props.ctrl;\n        const text = ctrl.getModel().getApp().getText();\n        return (\n            <div className={`${this.getCssBlockName()}__toolbar flex grid-gap-5`}>\n                {ctrl.model.hasDefaultSqlDataSource() &&\n                    <Button\n                        key=\"edit\"\n                        classList={['toolbar-button']}\n                        onClick={ctrl.onEditClick}\n                        visible={ctrl.getMode() === 'view'}\n                    >\n                        <EditIcon/>\n                        <div>{text.form.edit}</div>\n                    </Button>\n                }\n                {ctrl.model.hasDefaultSqlDataSource() &&\n                    <Button\n                        key=\"save\"\n                        classList={['toolbar-button']}\n                        enabled={(ctrl.state.changed || ctrl.state.hasNew) && ctrl.state.valid}\n                        onClick={ctrl.onSaveClick}\n                        visible={ctrl.getMode() === 'edit'}\n                    >\n                        <SaveIcon/>\n                        <div>{text.form.save}</div>\n                    </Button>\n                }\n                {ctrl.model.hasDefaultSqlDataSource() && ctrl.model.getKey() &&\n                    <Button\n                        key=\"cancel\"\n                        classList={['toolbar-button']}\n                        visible={ctrl.getMode() === 'edit' && !ctrl.state.changed && ctrl.state.valid}\n                        onClick={ctrl.onCancelClick}\n                    >\n                        <CancelIcon/>\n                        <div>{text.form.cancel}</div>\n                    </Button>\n                }\n                {ctrl.model.hasDefaultSqlDataSource() && ctrl.model.getKey() &&\n                    <Button\n                        key=\"discard\"\n                        classList={['toolbar-button']}\n                        enabled={ctrl.state.changed || !ctrl.isValid()}\n                        onClick={ctrl.onDiscardClick}\n                        visible={ctrl.getMode() === 'edit' && (ctrl.state.changed || !ctrl.state.valid)}\n                    >\n                        <CloseIcon2/>\n                        <div>{text.form.discard}</div>\n                    </Button>\n                }\n                {ctrl.model.hasDefaultSqlDataSource() && ctrl.getModel().getAttr('refreshButton') === 'true' &&\n                    <Button\n                        key=\"refresh\"\n                        classList={['toolbar-button']}\n                        enabled={!ctrl.state.changed && !ctrl.state.hasNew}\n                        onClick={ctrl.onRefreshClick}\n                        visible={ctrl.getMode() === 'view'}\n                    >\n                        <RefreshIcon/>\n                        <div>{text.form.refresh}</div>\n                    </Button>\n                }\n                {this.isActionsVisible() && ctrl.model.hasActions() &&\n                    <DropdownButton\n                        classList={['toolbar-dropdown-button']}\n                        actions={this.getActionsForDropdownButton()}\n                        onClick={this.onActionsClick}\n                        enabled={this.isActionsEnabled()}\n                    >\n                        <MoreVertIcon/>\n                    </DropdownButton>\n                }\n            </div>\n        );\n    }\n    isActionsEnabled() {\n        // return this.getCtrl().state.mode === 'view';\n        return true;\n    }\n    isActionsVisible() {\n        if (this.getCtrl().getModel().hasDefaultSqlDataSource()) {\n            return !!this.getCtrl().getModel().getKey();\n        }\n        return true;\n    }\n    renderLabel(fieldCtrl) {\n        const model = fieldCtrl.getModel();\n        const name = model.getName();\n        return <div key={`label.${name}`} className={`${this.getCssBlockName()}__label`}>\n            {model.getCaption()}:\n            {model.isNotNull() && <span style={{color: 'red'}}>*</span>}\n        </div>;\n    }\n    renderField(fieldCtrl) {\n        // console.log('RowFormView.renderField', fieldCtrl.model.getClassName());\n        const name = fieldCtrl.getModel().getName();\n        return <div key={`field.${name}`} className={`${this.getCssBlockName()}__field`}>\n            {React.createElement(fieldCtrl.getViewClass(), {\n                onCreate: fieldCtrl.onViewCreate,\n                ctrl: fieldCtrl,\n            })}\n        </div>;\n    }\n    renderError(fieldCtrl) {\n        // console.log('RowFormView.renderError:', fieldCtrl.state);\n        const name = fieldCtrl.getModel().getName();\n        return <div key={`tooltip.${name}`} className={`${this.getCssBlockName()}__error`}>\n            <Tooltip position=\"left\" type=\"alert\" hidden={fieldCtrl.getErrorMessage() === null} tip={fieldCtrl.getErrorMessage()}/>\n        </div>;\n    }\n    renderItem(fieldCtrl) {\n        const name = fieldCtrl.getModel().getName();\n        return [\n            this.renderLabel(fieldCtrl),\n            this.renderField(fieldCtrl),\n            this.renderError(fieldCtrl)\n        ];\n    }\n    renderGrid() {\n        // console.log('RowFormView.renderGrid');\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssBlockName()}__grid`}>\n            {Object.keys(ctrl.fields)\n                .filter(name => ctrl.getField(name).isVisible())\n                .map(name => {\n                return this.renderItem(ctrl.getField(name));\n            })}\n        </div>;\n    }\n    render() {\n        console.log('RowFormView.render', this.getCtrl().getModel().getFullName());\n        return <div className={`${this.getCssClassNames()} flex-column grid-gap-5`} style={this.getStyle()}>\n            {(this.getCtrl().getModel().hasDefaultSqlDataSource() || this.getCtrl().getModel().hasActions()) && this.renderToolbar()}\n            {this.renderGrid()}\n        </div>;\n    }\n    /*renderActionIcon() {\n        return <CancelIcon/>;\n    }*/\n}\n\nwindow.QForms.RowFormView = RowFormView;\n","class TableFormView extends FormView {\n    renderToolbar() {\n        const ctrl = this.props.ctrl;\n        const model = ctrl.model;\n        const dataSource = model.getDefaultDataSource();\n        return (\n            <div className={`${this.getCssBlockName()}__toolbar flex grid-gap-5`}>\n                {model.data.newRowMode !== 'disabled' &&\n                    <Button\n                        key=\"new\"\n                        classList={['toolbar-button', 'default']}\n                        onClick={ctrl.onNewClick}\n                        enabled={!ctrl.parent.model.hasNew()}\n                    >\n                        <AddIcon/>\n                        <div>{model.getApp().getText().form.new}</div>\n                    </Button>\n                }\n                {model.data.deleteRowMode !== 'disabled' &&\n                    <Button\n                        key=\"delete\"\n                        classList={['toolbar-button']}\n                        onClick={ctrl.onDeleteClick}\n                        enabled={ctrl.isRowSelected()}\n                    >\n                        <DeleteIcon/>\n                        <div>{model.getApp().getText().form.delete}</div>\n                    </Button>\n                }\n                {model.data.refreshButton === 'true' && dataSource.constructor.name === 'SqlDataSource' &&\n                    <Button\n                        key=\"refresh\"\n                        classList={['toolbar-button']}\n                        onClick={ctrl.onRefreshClick}\n                        enabled={!ctrl.parent.model.hasNew()}\n                    >\n                        <RefreshIcon/>\n                        <div>{model.getApp().getText().form.refresh}</div>\n                    </Button>\n                }\n                {ctrl.model.hasActions() &&\n                    <DropdownButton\n                        classList={['toolbar-dropdown-button']}\n                        actions={this.getActionsForDropdownButton()}\n                        onClick={this.onActionsClick}\n                    >\n                        <MoreVertIcon/>\n                    </DropdownButton>\n                }\n            </div>\n        );\n    }\n    renderPaging() {\n        const ctrl = this.props.ctrl;\n        const model = this.props.ctrl.model;\n        const dataSource = model.getDefaultDataSource();\n        const text = model.getApp().getText();\n        return (\n            <div className=\"paging\">\n                <div className=\"paging__countBlock\">\n                    <span className=\"count\">{dataSource.getRowsLength()} {dataSource.getLimit() && `of ${dataSource.getCount()}`}</span>\n                </div>\n                {dataSource.getLimit() &&\n                    <div className=\"paging__gotoBlock\">\n                        <Button enabled={ctrl.canPrev()} onClick={ctrl.onPreviousClick}>\n                            <LeftIcon size={18}/>\n                        </Button>\n                        <ComboBox\n                            value={ctrl.model.getDefaultDataSource().getFrame().toString()}\n                            onChange={ctrl.onFrameChanged}\n                            items={new Array(dataSource.getFramesCount()).fill().map((val, i) =>\n                            ({value: (i+1).toString(), title: (i+1).toString()})\n                        )}/>\n                        <Button enabled={ctrl.canNext()} onClick={ctrl.onNextClick}>\n                            <RightIcon size={18}/>\n                        </Button>\n                    </div>\n                }\n            </div>\n        );\n    }\n    renderGridCellView = (row, column, onCreate, onUnmount) => {\n        // console.log('TableFormView.renderGridCellView');\n        const ctrl = this.props.ctrl.getField(column.name);\n        if (!ctrl) throw new Error(`no field: ${column.name}`);\n        // console.log(column.name, ctrl.constructor.name);\n        return React.createElement(ctrl.getViewClass(), {row, column, onCreate, onUnmount, ctrl});\n    }\n    getGridColumns() {\n        const ctrl = this.props.ctrl;\n        return Object.keys(ctrl.fields).filter(name => ctrl.getField(name).isVisible()).map(name => {\n            const field = ctrl.getField(name);\n            return {\n                name : field.getModel().getName(),\n                title: field.getModel().getCaption(),\n                width: field.getModel().getWidth()\n            };\n        });\n    }\n    getRows() {\n        const ctrl = this.props.ctrl;\n        return ctrl.model.getDefaultDataSource().getRows();\n    }\n    getGridExtraColumn() {\n        return true;\n    }\n    getGridClass() {\n        return Grid;\n    }\n    renderGrid() {\n        const ctrl = this.props.ctrl;\n        return React.createElement(this.getGridClass(), {\n            classList         : ['flex-max'],\n            onCreate          : ctrl.onGridCreate,\n            name              : ctrl.model.getFullName(),\n            columns           : this.getGridColumns(),\n            rows              : this.getRows(),\n            getRowKey         : row => ctrl.model.getDefaultDataSource().getRowKey(row),\n            onDoubleClick     : ctrl.onGridCellDblClick,\n            onDeleteKeyDown   : ctrl.onGridDeleteKeyDown,\n            onSelectionChange : ctrl.onGridSelectionChange,\n            onLinkClick       : ctrl.onGridLinkClick,\n            renderGridCellView: this.renderGridCellView,\n            updated           : ctrl.getUpdated(),\n            extraColumn       : this.getGridExtraColumn(),\n            selectedKey       : ctrl.getPage().getModel().getOptions().selectedKey,\n            createLinkCallback: this.createLinkCallback,\n        });\n    }\n    render() {\n        console.log('TableFormView.render', this.props.ctrl.model.getFullName());\n        const ctrl = this.props.ctrl;\n        return <div className={`${this.getCssClassNames()} full flex-column grid-gap-5`} style={this.getStyle()}>\n            {this.renderToolbar()}\n            {this.renderGrid()}\n            {ctrl.getModel().hasDefaultSqlDataSource() && this.renderPaging()}\n        </div>;\n    }\n    createLinkCallback = key => {\n        return PageController.createLink({\n            page: this.getCtrl().getModel().getAttr('itemEditPage'),\n            ...DataSource.keyToParams(key)\n        });\n    }\n}\nwindow.QForms.TableFormView = TableFormView;\n","class PageView extends ModelView {\n    constructor(props) {\n        super(props);\n        this.checkParent();\n        this.el = React.createRef();\n    }\n    renderForm(formCtrl, props = {}) {\n        return React.createElement(formCtrl.getViewClass(), {\n            parent  : this,\n            key     : formCtrl.getModel().getName(),\n            ctrl    : formCtrl,\n            onCreate: formCtrl.onViewCreate,\n            updated : formCtrl.getUpdated(),\n            ...props\n        });\n    }\n    renderRowForms() {\n        return this.getRowForms().map(form => this.renderForm(form));\n    }\n    renderTitle() {\n        const ctrl = this.props.ctrl;\n        const model = ctrl.getModel();\n        return <h1 className={`${this.getCssBlockName()}__title`}>\n            {ctrl.getTitle()}\n            {model.hasRowFormWithDefaultSqlDataSource() && (ctrl.isChanged() || model.hasNew()) &&\n                [' ', <span key={'star'} className={`${this.getCssBlockName()}__star`}>*</span>]\n            }\n        </h1>;\n    }\n    onActionsClick = async li => {\n        // console.log('PageView.onActionsClick:', li);\n        const ctrl = this.props.ctrl;\n        const name = li.dataset.action;\n        try {\n            const result = await ctrl.onActionClick(name);\n            if (!result) {\n                throw new Error(`no handler for action '${name}'`);\n            }\n        } catch (err) {\n            await this.getCtrl().getApp().alert({message: err.message});\n        }\n    }\n    renderToolbar() {\n        const ctrl = this.props.ctrl;\n        const model = ctrl.model;\n        return (\n            <div className={`${this.getCssBlockName()}__toolbar`}>\n                {model.options.selectMode &&\n                    <Button\n                        classList={['toolbar-button', 'default']}\n                        onClick={ctrl.onSelectClick}\n                        enabled={!!ctrl.getSelectedRowKey()}\n                    >\n                        <DoneIcon/>\n                        <div>{model.getApp().getText().page.select}</div>\n                    </Button>\n                }\n                {/*{model.options.selectMode &&\n                    <Button classList={['toolbar-button']}\n                        title={model.getApp().getText().page.reset}\n                            onClick={ctrl.onResetClick}\n                    />\n                }*/}\n                {model.isModal() && model.hasRowFormWithDefaultSqlDataSource() &&\n                    <Button\n                        classList={['toolbar-button', 'default']}\n                        onClick={ctrl.onSaveAndCloseClick}\n                        enabled={ctrl.isValid() && (model.hasNew() || (ctrl.isChanged()))}\n                    >\n                        <DoneIcon/>\n                        <div>{model.getApp().getText().page.saveAndClose}</div>\n                    </Button>\n                }\n                {model.hasActions() &&\n                    <DropdownButton\n                        classList={['toolbar-dropdown-button']}\n                        actions={this.getActionsForDropdownButton()}\n                        onClick={this.onActionsClick}\n                    >\n                        <MoreVertIcon/>\n                    </DropdownButton>\n                }\n            </div>\n        );\n    }\n    /*shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }*/\n    isToolbar() {\n        const model = this.getCtrl().getModel();\n        return model.options.selectMode\n            || (model.isModal() && model.hasRowFormWithDefaultSqlDataSource())\n            || model.hasActions();\n    }\n    renderTableForms() {\n        const tableForms = this.getTableForms();\n        if (tableForms.length === 1) {\n            return this.renderForm(tableForms[0]);\n        } else {\n            return <div className={`${this.getCssBlockName()}__table-forms flex-max frame`}>\n                <div className=\"frame__container\">\n                    <Tab tabs={this.getTabs()} classList={['Tab-blue', 'full']}/>\n                </div>\n            </div>;\n        }\n    }\n    getTabs() {\n        return this.getTableForms().map(form => {\n            return {\n                name   : form.model.getName(),\n                title  : form.getTitle(),\n                content: this.renderForm(form)\n            };\n        });\n    }\n    getRowForms() {\n        return this.getCtrl().forms.filter(form => form.getModel().getClassName() === 'RowForm');\n    }\n    getTableForms() {\n        return this.getCtrl().forms.filter(form => form.getModel().getClassName() === 'TableForm');\n    }\n    renderOpenPageHeaderButton() {\n        const ctrl = this.props.ctrl;\n        return <div key={'open'} className={`${this.getCssBlockName()}__open`} onClick={ctrl.onOpenPageClick}>\n            <OpenInNewIcon/>\n        </div>;\n    }\n    renderClosePageHeaderButton() {\n        const ctrl = this.props.ctrl;\n        return <div key={'close'} className={`${this.getCssBlockName()}__close`} onClick={ctrl.onClosePageClick}>\n            <CloseIcon2/>\n        </div>;\n    }\n    renderHeader() {\n        const ctrl = this.props.ctrl;\n        const model = ctrl.getModel();\n        return <div className={`${this.getCssBlockName()}__header`}>\n            {this.renderTitle()}\n            {model.isModal() &&\n                [\n                    ...(model.getKey() ? [this.renderOpenPageHeaderButton()] : []),\n                    this.renderClosePageHeaderButton()\n                ]\n            }\n        </div>;\n    }\n    renderMain() {\n        const model = this.getCtrl().getModel();\n        return <div className={`${this.getCssBlockName()}__main flex-max frame`}>\n            <div className=\"frame__container flex-column grid-gap-10\">\n                {this.isToolbar() && this.renderToolbar()}\n                {model.hasRowForm() && this.renderRowForms()}\n                {model.hasTableForm() && this.renderTableForms()}\n            </div>\n        </div>;\n    }\n    renderFooter() {\n    }\n    render() {\n        console.log('PageView.render', this.getCtrl().getModel().getFullName());\n        return <div ref={this.el}\n                    tabIndex={0}\n                    onKeyDown={this.getCtrl().onKeyDown}\n                    className={`${this.getCssClassNames()} ${this.getCtrl().isModal() ? '' : 'full'} flex-column`}\n                    style={this.getStyle()}\n        >\n            {this.renderHeader()}\n            {this.renderMain()}\n            {this.renderFooter()}\n        </div>;\n    }\n    getStyle() {\n        if (this.getCtrl().isModal()) {\n            return {\n                width: 1000,\n                height: 750\n            };\n        }\n    }\n    componentDidMount() {\n        // console.log('PageView.componentDidMount', this.getCtrl().getModel().getFullName());\n        if (this.getCtrl().isAutoFocus() && !this.getCtrl().getModel().getKey()) {\n\n        } else {\n            this.focus();\n        }\n    }\n    focus() {\n        // console.log('PageView.focus', this.getCtrl().getModel().getFullName());\n        if (this.getElement()) {\n            // console.log('focus', this.getElement());\n            this.getElement().focus();\n        } else {\n            console.error(`${this.getCtrl().getModel().getFullName()}: el is null`);\n        }\n    }\n}\nwindow.QForms.PageView = PageView;\n"]}