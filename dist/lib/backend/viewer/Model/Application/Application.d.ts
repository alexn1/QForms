import { AppInfo } from "../../../AppInfo";
import BackHostApp from '../../../BackHostApp';
import Model from '../Model';
import Action from '../Action/Action';
import Database from '../Database/Database';
import DataSource from '../DataSource/DataSource';
import Page from '../Page/Page';
import PageLink from '../PageLink/PageLink';
import Context from '../../../Context';
declare class Application extends Model {
    appInfo: AppInfo;
    hostApp: any;
    env: string;
    databases: Database[];
    actions: Action[];
    dataSources: DataSource[];
    pages: any;
    links: any[];
    scripts: any[];
    domain: string;
    menu: any;
    constructor(data: any, appInfo: AppInfo, hostApp: BackHostApp, context: Context);
    init(context: Context): Promise<void>;
    getLinks(context: Context): Promise<string[]>;
    getScripts(context: Context): Promise<string[]>;
    deinit(): Promise<void>;
    getDirPath(): string;
    getFrontendDirPath(): any;
    getText(): any;
    getVersion(): any;
    fillAttributes(response: any): void;
    fill(context: Context): Promise<any>;
    createMenu(context: Context): Promise<{}>;
    createPageLink(name: string): PageLink;
    createPage(pageLinkName: string): Promise<Page>;
    authorizePage(user: any, pageName: string): boolean;
    getPage(context: Context, pageLinkName: string): Promise<Page>;
    getStartupPageLinkNames(): string[];
    fillPages(context: Context): Promise<any[]>;
    authenticate(context: Context, username: string, password: string): Promise<{
        id: number;
        name: string;
    }>;
    isAuthentication(): boolean;
    getUsers(context: Context): Promise<any>;
    rpc(name: string, context: Context): Promise<any>;
    request(options: any): Promise<any>;
    getEnv(): string;
    getEnvVarValue(name: string): any;
    getApp(): Application;
    getDatabase(name: string): Database;
    getTitle(context: Context, response: any): string;
    initContext(context: Context): Promise<void>;
    static getAppInfoFromData(appFilePath: any, data: any): AppInfo;
    static getAppInfo(appFilePath: any): Promise<AppInfo>;
    static getAppInfos(appsDirPath: any): Promise<any[]>;
    getDataSource(name: any): DataSource;
    getViewClassName(): string;
    connect(context: Context): Promise<void>;
    release(context: any): void;
}
export = Application;
